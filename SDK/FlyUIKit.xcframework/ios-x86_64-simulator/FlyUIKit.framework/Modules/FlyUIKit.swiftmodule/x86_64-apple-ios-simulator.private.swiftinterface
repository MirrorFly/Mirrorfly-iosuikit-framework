// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlyUIKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFAudio
import AVFoundation
import AVKit
@_exported import Alamofire
import CloudKit
import Contacts
import ContactsUI
import CoreGraphics
import CoreLocation
@_exported import FlyUIKit
import Foundation
import GoogleMaps
import IQKeyboardManagerSwift
import MapKit
import MirrorFlySDK
import MobileCoreServices
import Network
import NicoProgress
import Photos
import PhotosUI
import QuickLook
import RealmSwift
@_exported import SDWebImage
import Swift
import SwiftLinkPreview
import SwiftUI
@_exported import Toaster
import UIKit
import UserNotifications
import WebKit
import WebRTC
import _Concurrency
import _StringProcessing
import os
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIGroupInfoCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFGroupInfoTheme
  @objc @_Concurrency.MainActor(unsafe) public var VstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var HstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configGroupInfoUpdateCell(groupInfo: MirrorFlySDK.GroupParticipantDetail)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIBaseMediaContentView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var message: MirrorFlySDK.ChatMessage!
  @_Concurrency.MainActor(unsafe) public var position: FlyUIKit.MessagePosition
  @_Concurrency.MainActor(unsafe) public var progressDelegate: (any FlyUIKit.MFUIProgressDelegate)?
  @_Concurrency.MainActor(unsafe) public var audioViewDelegate: (any FlyUIKit.MFUIAudioContentViewDelegate)?
  @_Concurrency.MainActor(unsafe) open func configure(message: MirrorFlySDK.ChatMessage, position: FlyUIKit.MessagePosition, delegate: any FlyUIKit.MFUIProgressDelegate, audioViewDelegate: any FlyUIKit.MFUIAudioContentViewDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol MFUIBaseChatViewModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didTapMessage message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didTapMultiSelect message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didTapSaveContact message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didDoubleTapMessage message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func baseChannelModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didLongTapMessage message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func baseChannelModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didSwipeGesture message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didScroll scrollView: UIKit.UIScrollView)
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, message: MirrorFlySDK.ChatMessage, didTapReplyMessageView replyMessageView: FlyUIKit.MFUIReplyBaseMessageView)
}
public protocol MFUIBaseChatViewModuleLisDataSource : AnyObject {
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, chatForTableView tableView: UIKit.UITableView) -> MirrorFlySDK.RecentChat?
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, sentMessagesInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ChatMessage]
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, fullMessagesInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ChatMessage]
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, lastSeenIndexPathIn tableView: UIKit.UITableView) -> Foundation.IndexPath?
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, startingPointIn tableView: UIKit.UITableView) -> Swift.Int64?
  func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, hasNextInTableView tableView: UIKit.UITableView) -> Swift.Bool
}
extension FlyUIKit.MFUIBaseChatViewModule {
  @_inheritsConvenienceInitializers @objc(MFUIBaseChatViewModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var newMessageInfoView: UIKit.UIView?
    @objc @_Concurrency.MainActor(unsafe) public var scrollBottomView: UIKit.UIView?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any FlyUIKit.MFUIBaseChatViewModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var baseDataSource: (any FlyUIKit.MFUIBaseChatViewModuleLisDataSource)?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatTheme?
    @objc @_Concurrency.MainActor(unsafe) public var multiSelect: Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public var messageMenuItem: FlyUIKit.MessageMenuItem
    @objc @_Concurrency.MainActor(unsafe) public var baseChat: MirrorFlySDK.RecentChat? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var fullMessageList: [MirrorFlySDK.ChatMessage] {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var selectedMessageList: [MirrorFlySDK.ChatMessage]
    @available(*, unavailable, renamed: "MFUIBaseChatViewModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUIBaseChatViewModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFChatTheme? = nil)
    @_Concurrency.MainActor(unsafe) open func updateStyles(theme: FlyUIKit.MFChatTheme? = nil, componentTheme: FlyUIKit.MFComponentTheme = MFUITheme.componentTheme)
    @_Concurrency.MainActor(unsafe) public func setupScrollBottomViewStyle(scrollBottomView: UIKit.UIView, theme: FlyUIKit.MFComponentTheme = MFUITheme.componentTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setScrollBottomView(hidden: Swift.Bool)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @objc @_Concurrency.MainActor(unsafe) public func updateEmptyView(type: FlyUIKit.EmptyViewType)
    @objc @_Concurrency.MainActor(unsafe) public func reloadAt(index: Swift.Int)
    @objc @_Concurrency.MainActor(unsafe) open func setTapGesture(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setMultSelect(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setSaveContact(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setDoubleTapGesture(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setLongTapGesture(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setSwipeGesture(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setReplyTapGesture(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage, replyMessageView: FlyUIKit.MFUIReplyBaseMessageView)
    @objc @_Concurrency.MainActor(unsafe) open func onTapScrollToBottom()
    @_Concurrency.MainActor(unsafe) @objc open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  }
}
extension FlyUIKit.MFUIBaseChatViewModule.List : FlyUIKit.MFUIEmptyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
}
extension FlyUIKit.MFUIBaseChatViewModule.List {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isScrollNearByBottom: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func checkSameDayAsNextMessage(currentIndex: Swift.Int, fullMessageList: [MirrorFlySDK.ChatMessage]) -> Swift.Bool
}
public class MFUIViewMediaModule {
  public var headerComponent: FlyUIKit.MFUIViewMediaModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUIViewMediaModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIViewMediaModule.Header? = nil, listComponent: FlyUIKit.MFUIViewMediaModule.List? = nil)
  @objc deinit
}
public class MFUIReplyBaseMessageViewParams {
  final public let message: MirrorFlySDK.ChatMessage
  final public let replyMessageNickname: Swift.String
  public var fileName: Swift.String
  public var replyToText: Swift.String {
    get
  }
  public init(message: MirrorFlySDK.ChatMessage)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MFUISelectableStackView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) final public let stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var position: FlyUIKit.MessagePosition
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) public func setAxis(_ axis: UIKit.NSLayoutConstraint.Axis)
  @_Concurrency.MainActor(unsafe) public func addArrangedSubview(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func removeArrangedSubview(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func insertArrangedSubview(_ view: UIKit.UIView, at index: Swift.Int)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIContentBaseMessageCell : FlyUIKit.MFUIBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var replyMessageView: FlyUIKit.MFUIReplyBaseMessageView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userNameView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var profileView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userNameStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var languageVStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var languageLineView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var languageText: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var languageHStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentHStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var selectHStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contactSeparatorLine: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contactLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var saveContactVStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var useReaction: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var usingReplyMessage: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var contentVStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var NewLeftHStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageHStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var iconQuickForward: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var multiSelectImage: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var multiSelectButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mainContainerView: FlyUIKit.MFUISelectableStackView
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: FlyUIKit.MFUIBaseMessageCellParams)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc @_Concurrency.MainActor(unsafe) public func setMessageGrouping()
  @objc @_Concurrency.MainActor(unsafe) public func setupReplyMessageView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onTapContentView(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func onTapMultiSelect(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onTapSaveContact(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onDoubleTapContentView(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func onLongPressContentView(sender: UIKit.UILongPressGestureRecognizer?)
  @objc @_Concurrency.MainActor(unsafe) open func onSwipeRightGesture(sender: UIKit.UISwipeGestureRecognizer?)
  @objc @available(*, deprecated, renamed: "configure(message:configuration:)")
  @_Concurrency.MainActor(unsafe) open func configure(_ message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool, position: FlyUIKit.MessagePosition, groupPosition: FlyUIKit.MessageGroupPosition)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension FlyUIKit.MFUIContentBaseMessageCell : FlyUIKit.MFUIReplyMessageViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didTapReplyMessageView(_ replyMessageView: FlyUIKit.MFUIReplyBaseMessageView)
}
public protocol MFUICallScreenModuleRetryFooterDelegate : FlyUIKit.MFUICommonDelegate {
  func CallScreenModule(_ RetryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter, didUpdateCancelButton: UIKit.UIView?)
  func CallScreenModule(_ RetryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter, didTapCancelButton button: UIKit.UIView?)
  func CallScreenModule(_ RetryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter, didUpdateCallAgainButton: UIKit.UIView?)
  func CallScreenModule(_ RetryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter, didTapCallAgainButton button: UIKit.UIView?)
}
extension FlyUIKit.MFUICallScreenModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class RetryFooter : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICallScreenModuleRetryFooterDelegate)?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme?
    @objc @_Concurrency.MainActor(unsafe) public var cancelLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var callAgainLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var callAgainButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var defaultCancelButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var defaultCallAgainButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var cancelstackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var callAgainstackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICallScreenModuleRetryFooterDelegate, theme: FlyUIKit.MFCallScreenTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallScreenTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
@objc public enum MFUIFloatyItemLabelPositionType : Swift.Int {
  case left
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class MFUIFloatyItem : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var size: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var buttonColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var titleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var hasShadow: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var circleShadowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var titleShadowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var handler: ((FlyUIKit.MFUIFloatyItem) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var imageOffset: CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var imageSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) weak open var actionButton: FlyUIKit.MFUIFloaty?
  @objc @_Concurrency.MainActor(unsafe) open var titleLabelPosition: FlyUIKit.MFUIFloatyItemLabelPositionType {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var iconImageView: UIKit.UIImageView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var icon: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var iconTintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var itemBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
public class MFUIBaseMessageCellParams {
  final public let message: MirrorFlySDK.ChatMessage
  final public let hideDateView: Swift.Bool
  final public let messagePosition: FlyUIKit.MessagePosition
  final public let groupPosition: FlyUIKit.MessageGroupPosition
  final public let receiptState: FlyUIKit.MFUIMessageReceiptState
  final public let multiSelect: Swift.Bool
  final public let messageMenuItem: FlyUIKit.MessageMenuItem
  public var isMessageSelected: Swift.Bool
  public init(message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool, messagePosition: FlyUIKit.MessagePosition = .center, groupPosition: FlyUIKit.MessageGroupPosition = .none, receiptState: FlyUIKit.MFUIMessageReceiptState = .none, multiSelect: Swift.Bool, messageMenuItem: FlyUIKit.MessageMenuItem, isMessageSelected: Swift.Bool = false)
  @objc deinit
}
public protocol MFUIGallerydelegate : ObjectiveC.NSObject {
  func passSelectedAssests(obj: [Photos.PHAsset])
  func passCameraImage(img: UIKit.UIImage)
}
public protocol MFUIBaseChatViewModuleInputDelegate : FlyUIKit.MFUICommonDelegate {
  func baseChatModuleDidStartTyping(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input)
  func baseChatModuleDidEndTyping(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input)
  func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didTapSend text: Swift.String, parentMessage: MirrorFlySDK.ChatMessage?)
  func baseChannelModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didTapResource type: FlyUIKit.MediaResourceType)
  func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didChangeText text: Swift.String)
  func baseChatlModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, willChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
  func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
  func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didTapAuidoRecord message: MirrorFlySDK.ChatMessage?)
  func didTapDelete()
  func didTapDeleteCancel()
  func didTapAudio()
}
public protocol MFUIBaseChatViewModuleInputDataSource : AnyObject {
  func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, chatForInputView messageInputView: UIKit.UIView?) -> MirrorFlySDK.RecentChat?
}
extension FlyUIKit.MFUIBaseChatViewModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Input : UIKit.UIView, FlyUIKit.MFUIMessageInputViewDelegate {
    @objc @_Concurrency.MainActor(unsafe) public func didTapDelete()
    @objc @_Concurrency.MainActor(unsafe) public func didTapDeleteCancel()
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didTapAudioRecord message: MirrorFlySDK.ChatMessage?)
    @objc @_Concurrency.MainActor(unsafe) public func didTapAudio()
    @objc @_Concurrency.MainActor(unsafe) public var messageInputView: UIKit.UIView?
    @objc @_Concurrency.MainActor(unsafe) public var inputText: Swift.String?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatTheme?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any FlyUIKit.MFUIBaseChatViewModuleInputDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var baseDataSource: (any FlyUIKit.MFUIBaseChatViewModuleInputDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var defaultMessageInputView: FlyUIKit.MFUIMessageInputView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var baseChat: MirrorFlySDK.RecentChat? {
      @objc get
    }
    @available(*, unavailable, renamed: "MFUIBaseChatViewModule.Input()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUIBaseChatViewModule.Input()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFChatTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func resetTextView()
    @objc @_Concurrency.MainActor(unsafe) open func updateMessageInputMode(_ mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func updateMessageReplyto(profile: MirrorFlySDK.ProfileDetails?)
    @objc @_Concurrency.MainActor(unsafe) open func updateTextviewtext(string: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) open func updateMessageInputModeState()
    @objc @_Concurrency.MainActor(unsafe) public func messageInputViewDidStartTyping()
    @objc @_Concurrency.MainActor(unsafe) public func messageInputViewDidEndTyping()
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didSelectSend text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didSelectResource type: FlyUIKit.MediaResourceType)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeText text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, willChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeSelection range: Foundation.NSRange)
    @objc deinit
  }
}
public protocol MFUICreateGroupChatModuleCreateGroupViewDelegate : FlyUIKit.MFUICommonDelegate {
  func createGroupChatModule(_ createGroupComponent: FlyUIKit.MFUICreateGroupChatModule.CreateGroupView, didUpdateProfileImageView profileImageView: UIKit.UIImageView?)
  func createGroupChatModule(_ createGroupComponent: FlyUIKit.MFUICreateGroupChatModule.CreateGroupView, didUpdateGroupNameTitle groupNameTitle: Swift.String?)
}
extension FlyUIKit.MFUICreateGroupChatModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class CreateGroupView : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCreateGroupTheme?
    @_Concurrency.MainActor(unsafe) open func configure(theme: FlyUIKit.MFCreateGroupTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCreateGroupTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public protocol MFUICreateGroupChatModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUICreateGroupChatModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICreateGroupChatModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCreateGroupTheme?
    @available(*, unavailable, renamed: "MFUICreateGroupChatModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUICreateGroupChatModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICreateGroupChatModuleHeaderDelegate, theme: FlyUIKit.MFCreateGroupTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCreateGroupTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
  }
}
@objc @_inheritsConvenienceInitializers open class MFUIUserProfileViewModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public class MFUIContactPreviewModule {
  public var headerComponent: FlyUIKit.MFUIContactPreviewModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUIContactPreviewModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIContactPreviewModule.Header? = nil, listComponent: FlyUIKit.MFUIContactPreviewModule.List? = nil)
  @objc deinit
}
extension UIKit.UIImage {
  public func cropped(withCropperState cropperState: FlyUIKit.CropperState) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIInfoView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) open func config()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MFUIFontSet {
  public static var h1: UIKit.UIFont
  public static var h2: UIKit.UIFont
  public static var h3: UIKit.UIFont
  public static var h4: UIKit.UIFont
  public static var body1: UIKit.UIFont
  public static var body2: UIKit.UIFont
  public static var body3: UIKit.UIFont
  public static var body4: UIKit.UIFont
  public static var button1: UIKit.UIFont
  public static var button2: UIKit.UIFont
  public static var button3: UIKit.UIFont
  public static var caption1: UIKit.UIFont
  public static var caption2: UIKit.UIFont
  public static var caption3: UIKit.UIFont
  public static var caption4: UIKit.UIFont
  public static var caption5: UIKit.UIFont
  public static var subtitle1: UIKit.UIFont
  public static var subtitle2: UIKit.UIFont
  @objc deinit
}
public protocol MFUILanguageModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func languageModule(_ listComponent: FlyUIKit.MFUILanguageModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func languageModule(_ listComponent: FlyUIKit.MFUILanguageModule.List, _ tap: UIKit.UITapGestureRecognizer, indexPath: Foundation.IndexPath)
}
extension FlyUIKit.MFUILanguageModule {
  @_inheritsConvenienceInitializers @objc(MFUILanguageModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var languageCell: FlyUIKit.MFUILanguageCell?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFLanguageTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUILanguageModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUILanguageModuleListDelegate, theme: FlyUIKit.MFLanguageTheme, translateArr: [FlyUIKit.LanguageModel])
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFLanguageTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(chatCell: FlyUIKit.MFUILanguageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ languageCell: FlyUIKit.MFUILanguageCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUILanguageModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
public protocol MFUICallScreenModuleHangupFooterDelegate : FlyUIKit.MFUICommonDelegate {
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdateHangupButton: UIKit.UIView?)
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapHangupButton button: UIKit.UIView?)
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdatemuteButton: UIKit.UIView?)
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapmuteButton button: UIKit.UIView?)
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdateSpeakerButton: UIKit.UIView?)
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapSpeakerButton button: UIKit.UIView?)
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdateCameraSwitchButton: UIKit.UIView?)
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapCameraSwitchButton button: UIKit.UIView?)
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdateSwitchAudioVideoButton: UIKit.UIView?)
  func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapSwitchAudioVideoButton button: UIKit.UIView?)
}
extension FlyUIKit.MFUICallScreenModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class HangupFooter : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICallScreenModuleHangupFooterDelegate)?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme?
    @objc @_Concurrency.MainActor(unsafe) public var hangupButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var speakerButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var cameraSwitchButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var switchAudioVideoButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var defaultHangupButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var defaultMuteButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var defaultSpeakerButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var defaultCameraSwitchButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var defaultAudioVideoSwitchButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICallScreenModuleHangupFooterDelegate, theme: FlyUIKit.MFCallScreenTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallScreenTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public class MFUICommonItem {
  public init(title: Swift.String? = nil, color: UIKit.UIColor? = MFUIColorSet.onlight01, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, tintColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment = .left)
  @objc deinit
}
public protocol MFUIUserProfileModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func UserProfileModule(_ headerComponent: FlyUIKit.MFUIUserProfileModule.Header, didUpdateLeftBackButton leftBack: UIKit.UIView?)
  func UserProfileModule(_ headerComponent: FlyUIKit.MFUIUserProfileModule.Header, didTapLeftBackButton leftItem: UIKit.UIView?)
  func UserProfileModule(_ headerComponent: FlyUIKit.MFUIUserProfileModule.Header, didClickProfileImage button: UIKit.UIView?)
  func UserProfileModule(_ headerComponent: FlyUIKit.MFUIUserProfileModule.Header, didClickMuteSwitch button: UIKit.UISwitch)
}
extension FlyUIKit.MFUIUserProfileModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIUserProfileModuleHeaderDelegate)?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFUserProfileTheme
    @objc @_Concurrency.MainActor(unsafe) public var leftBackButton: UIKit.UIButton? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var nameLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var lastseenLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteSwitch: UIKit.UISwitch
    @objc @_Concurrency.MainActor(unsafe) public var defaultLeftBackButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var MainImageView: UIKit.UIImageView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var imageActionButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteNotificationView: UIKit.UIView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteNotificationLbl: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteNotificationStackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var underLineView: UIKit.UIView {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIUserProfileModuleHeaderDelegate, theme: FlyUIKit.MFUserProfileTheme, profile: MirrorFlySDK.ProfileDetails?, lastseen: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
    @objc @_Concurrency.MainActor(unsafe) open func onClickBack()
    @objc @_Concurrency.MainActor(unsafe) open func onClickImage()
    @objc @_Concurrency.MainActor(unsafe) open func onClickMuteSwitch()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers open class MFUIMessageStatusViewModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public var pushChatId: Swift.String?
@objc @_inheritsConvenienceInitializers open class FlyUIKitSDK : ObjectiveC.NSObject {
  public static let shared: FlyUIKit.FlyUIKitSDK
  public func initialization(userID: Swift.String, isPushNotification: Swift.Bool? = false, isExport: Swift.Bool, selfObj: (any FlyUIKit.CallNotificationDelegate)? = nil, completionHandler: @escaping (_ isSuccess: Swift.Bool, _ error: Swift.String) -> Swift.Void)
  public func intializePushNotification(_ request: UserNotifications.UNMutableNotificationContent, isVoipType: Swift.Bool, completionHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  public func registration(uniqueIdentifier: Swift.String, completionHandler: @escaping ([Swift.String : Any]?, Swift.String?) -> Swift.Void)
  public func register(mobileNumber: Swift.String)
  public func initcallsdk()
  public func willEnterForeGround(response: UserNotifications.UNNotificationResponse)
  public func navigateToChatScreen(response: UserNotifications.UNNotificationResponse)
  public func didLogout(logoutHandler: @escaping () -> Swift.Void)
  public func resetWhenLogout()
  @objc override dynamic public init()
  @objc deinit
}
extension FlyUIKit.FlyUIKitSDK : MirrorFlySDK.ConnectionEventDelegate {
  public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  public func onReconnecting()
  public func onConnected()
  public func onDisconnected()
  public func onConnectionNotAuthorized()
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public func removeViewController(_ controller: UIKit.UIViewController.Type)
}
@objc public enum MFUIMessageInputMode : Swift.Int {
  case none
  case edit
  case isReply
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MFUIChatViewParentController : FlyUIKit.MFUIBaseChatViewParentController, FlyUIKit.MFUIChatViewParentModuleHeaderDelegate, FlyUIKit.MFUIChatViewModelDelegate, FlyUIKit.MFUIChatViewModelDataSource, FlyUIKit.MFUIChatViewParentModuleListDelegate, FlyUIKit.MFUIChatViewParentModuleListDataSource, FlyUIKit.MFUIChatViewParentModuleInputDelegate, FlyUIKit.MFUIChatViewParentModuleInpuDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIChatViewParentModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: FlyUIKit.MFUIChatViewParentModule.List? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var inputComponent: FlyUIKit.MFUIChatViewParentModule.Input? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var chat: MirrorFlySDK.RecentChat? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageMenuType: FlyUIKit.MessageMenuItem
  @objc @_Concurrency.MainActor(unsafe) public var message: MirrorFlySDK.ChatMessage?
  @objc @_Concurrency.MainActor(unsafe) public var newMessagesCount: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required public init(chatJid: Swift.String?, startingPoint: Swift.Int64 = .max)
  @_Concurrency.MainActor(unsafe) required public init(chatMessage: MirrorFlySDK.ChatMessage? = nil, chatJid: Swift.String?, messageMenItem: FlyUIKit.MessageMenuItem? = MessageMenuItem.reply)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc dynamic open func willCometoForeground()
  @_Concurrency.MainActor(unsafe) override open func createViewModel(chatJid: Swift.String? = nil, startingPoint: Swift.Int64? = Int64.max, showIndicator: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChatViewModuleDidTapScrollToButton(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didScroll scrollView: UIKit.UIScrollView)
  @objc @_Concurrency.MainActor(unsafe) open func groupChatViewModel(_ viewModel: FlyUIKit.MFUIChatViewModel, startingPointIndexPathsForChat chat: MirrorFlySDK.ChatMessage?) -> [Foundation.IndexPath]?
  @objc @_Concurrency.MainActor(unsafe) public func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, didTapImageDownload message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, didTapCloseDownloadOrUpload message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, didTapQuickForward message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, didTapPlayOrPause message: MirrorFlySDK.ChatMessage, sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) public func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, _ slider: UIKit.UISlider, didDragSlider message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, _ slider: UIKit.UISlider, _ tapGesture: UIKit.UITapGestureRecognizer, didTapSlider message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func chatViewModule(_ inputComponent: FlyUIKit.MFUIChatViewParentModule.Input, didTapSend text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String], parentMessage: MirrorFlySDK.ChatMessage?)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChatModuleDidStartTyping(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChatModuleDidEndTyping(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input)
  @objc @_Concurrency.MainActor(unsafe) public func chatViewModule(_ inputComponent: FlyUIKit.MFUIChatViewParentModule.Input, didPickFileData fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String, parentMessage: MirrorFlySDK.ChatMessage?)
  @objc @_Concurrency.MainActor(unsafe) public func chatListModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, chatParentInTableView tableView: UIKit.UITableView, forRowAt indexPath: Foundation.IndexPath, message: MirrorFlySDK.ChatMessage, audioView: FlyUIKit.MFUIAudioContentView)
  @objc @_Concurrency.MainActor(unsafe) public func connectionStateDidChange(_ isConnected: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
}
extension FlyUIKit.MFUIChatViewParentController : MirrorFlySDK.GroupEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didAddNewMemeberToGroup(groupJid: Swift.String, newMemberJid: Swift.String, addedByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didRemoveMemberFromGroup(groupJid: Swift.String, removedMemberJid: Swift.String, removedByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didFetchGroupProfile(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didUpdateGroupProfile(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didMakeMemberAsAdmin(groupJid: Swift.String, newAdminMemberJid: Swift.String, madeByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didRemoveMemberFromAdmin(groupJid: Swift.String, removedAdminMemberJid: Swift.String, removedByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didDeleteGroupLocally(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didLeftFromGroup(groupJid: Swift.String, leftUserJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didCreateGroup(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didFetchGroups(groups: [MirrorFlySDK.ProfileDetails])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didFetchGroupMembers(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didReceiveGroupNotificationMessage(message: MirrorFlySDK.ChatMessage)
}
extension FlyUIKit.MFUIChatViewParentController : MirrorFlySDK.AvailableFeaturesDelegate {
  @_Concurrency.MainActor(unsafe) public func didUpdateAvailableFeatures(features: MirrorFlySDK.AvailableFeaturesModel)
}
extension FlyUIKit.MFUIChatViewParentController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadPreviousMessage()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadNextMessage()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadNextMessageWhenComeBack()
}
public protocol MFSectionHeaderViewDelegate : AnyObject {
  func passHeaderAction(_ headerview: FlyUIKit.MFSectionHeaderView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MFSectionHeaderView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(theme: FlyUIKit.MFMessageInfoTheme, headerTitle: Swift.String, section: Swift.Int, delegate: any FlyUIKit.MFSectionHeaderViewDelegate, hiddenSections: Swift.Set<Swift.Int>)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Utility : ObjectiveC.NSObject {
  public class func saveInPreference(key: Swift.String, value: Any)
  public class func getStringFromPreference(key: Swift.String) -> Swift.String
  public class func IntialLetter(name: Swift.String, imageView: UIKit.UIImageView, colorCode: Swift.String, frameSize: Swift.Int, fontSize: CoreFoundation.CGFloat, theme: FlyUIKit.MFCallScreenTheme?)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageCache {
  public static let shared: Foundation.NSCache<Foundation.NSString, UIKit.UIImage>
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUICallScreenViewController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUICallScreenModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter?
  @objc @_Concurrency.MainActor(unsafe) public var retryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter?
  @objc @_Concurrency.MainActor(unsafe) public var muteViewComponent: FlyUIKit.MFUICallScreenModule.MuteView?
  @objc @_Concurrency.MainActor(unsafe) public var callOverlayComponent: FlyUIKit.MFUICallScreenModule.CallOverlayView?
  @objc @_Concurrency.MainActor(unsafe) public var remoteVideoComponent: FlyUIKit.MFUICallScreenModule.RemoteVideoView?
  @objc @_Concurrency.MainActor(unsafe) public var localVideoComponent: FlyUIKit.MFUICallScreenModule.LocalVideoView?
  @objc @_Concurrency.MainActor(unsafe) public var groupCallListComponent: FlyUIKit.MFUICallScreenModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var mfUICallScreenViewModel: FlyUIKit.MFUICallScreenViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var backgroundImageName: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) public func showCallOverlay()
  @objc deinit
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUICallScreenModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ headerComponent: FlyUIKit.MFUICallScreenModule.Header, didUpdateLeftBackButton leftBack: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ headerComponent: FlyUIKit.MFUICallScreenModule.Header, didTapLeftBackButton leftBack: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ headerComponent: FlyUIKit.MFUICallScreenModule.Header, didTapInviteParticipant inviteParticipantItem: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUICallScreenModuleHangupFooterDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdateHangupButton: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapHangupButton button: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdatemuteButton: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapmuteButton button: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdateSpeakerButton: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapSpeakerButton button: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdateCameraSwitchButton: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapCameraSwitchButton button: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didTapSwitchAudioVideoButton button: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter, didUpdateSwitchAudioVideoButton: UIKit.UIView?)
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUICallScreenModuleRetryFooterDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ RetryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter, didUpdateCancelButton: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ RetryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter, didTapCancelButton button: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ RetryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter, didUpdateCallAgainButton: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ RetryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter, didTapCallAgainButton button: UIKit.UIView?)
}
extension FlyUIKit.MFUICallScreenViewController : MirrorFlySDK.CallManagerDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onLocalVideoTrackAdded(userId: Swift.String, videoTrack: WebRTC.RTCVideoTrack)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onRemoteVideoTrackAdded(userId: Swift.String, track: WebRTC.RTCVideoTrack)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getGroupName(_ groupId: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onUserSpeaking(userId: Swift.String, audioLevel: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onUserStoppedSpeaking(userId: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getDisplayName(IncomingUser: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func sendCallMessage(groupCallDetails: MirrorFlySDK.GroupCallDetails, users: [Swift.String], invitedUsers: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func socketConnectionEstablished()
  @_Concurrency.MainActor(unsafe) public func onCallStatusUpdated(callStatus: MirrorFlySDK.CALLSTATUS, userId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func onCallAction(callAction: MirrorFlySDK.CallAction, userId: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onLocalVideoTrackAdded(userId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func onMuteStatusUpdated(muteEvent: MirrorFlySDK.MuteEvent, userId: Swift.String)
}
extension FlyUIKit.MFUICallScreenViewController : MirrorFlySDK.AudioManagerDelegate {
  @_Concurrency.MainActor(unsafe) public func audioRoutedTo(deviceName: Swift.String, audioDeviceType: MirrorFlySDK.OutputType)
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUICallScreenViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenViewModel(reloadData isRelaod: Swift.Bool, index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func CallScreenViewModel(didupdateAudio image: UIKit.UIImage, audioDeviceType: MirrorFlySDK.OutputType)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenViewModel(didupdateTime timestring: Swift.String, username: Swift.String, image: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenViewModel(didUpdateUser index: Swift.Int)
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUICallScreenModuleCallOverlayDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ didTapOverLayView: UIKit.UIView?)
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUICallScreenModuleLocalVideoViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ LocalVideoViewComponent: FlyUIKit.MFUICallScreenModule.LocalVideoView, tapGeture sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ LocalVideoViewComponent: FlyUIKit.MFUICallScreenModule.LocalVideoView, panGesture sender: UIKit.UIPanGestureRecognizer)
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUICallScreenModuleRemoteVideoViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ RemoteVideoViewComponent: FlyUIKit.MFUICallScreenModule.RemoteVideoView, RemotetapGeture sender: UIKit.UITapGestureRecognizer)
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUIActionSheetDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUIGroupCallScreenModuleListDataSource {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func groupCallScreenModuleListModule(_ listComponent: FlyUIKit.MFUICallScreenModule.List, groupCallMemberInTableView collectionView: UIKit.UICollectionView) -> [FlyUIKit.CallMember]?
}
extension FlyUIKit.MFUICallScreenViewController : FlyUIKit.MFUIGroupCallScreenModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func groupCallScreenModule(_ listComponent: FlyUIKit.MFUICallScreenModule.List, RemotetapGeture sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func groupCallScreenModule(_ listComponent: FlyUIKit.MFUICallScreenModule.List, didTapLeftBackButton leftItem: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func groupCallScreenModule(_ listComponent: FlyUIKit.MFUICallScreenModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_Concurrency.MainActor(unsafe) open class MFUIUserProfileViewController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFUserProfileTheme
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUIUserProfileModule.List?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc deinit
}
extension FlyUIKit.MFUIUserProfileViewController : FlyUIKit.MFUIUserProfileModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func userProfileModule(_ listComponent: FlyUIKit.MFUIUserProfileModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickHeaderBackBtn()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickHeaderImageBtn()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickHeaderMuteSwitchBtn(switchState: UIKit.UISwitch)
}
extension FlyUIKit.MFUIUserProfileViewController : MirrorFlySDK.ProfileEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userCameOnline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userWentOffline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func myProfileUpdated()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersProfilesFetched()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func hideUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class MFUIRecentChatListViewController : FlyUIKit.MFUIBaseChatListViewController, FlyUIKit.MFUIRecentChatListModuleHeaderDelegate, FlyUIKit.MFUIRecentChatListModuleListtDelegate, FlyUIKit.MFUIRecentChatListModuleListtDataSource, FlyUIKit.MFUIRecentChatListViewModelDelegate, FlyUIKit.MFUICommonViewModelDelegate, FlyUIKit.MFUICreateShowOptionsDelegate, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var isInitialLoading: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIRecentChatListModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: FlyUIKit.MFUIRecentChatListModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var createShowOptions: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isConnected: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var searchJid: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var searchbarView: FlyUIKit.MFUISearchBarView
  @objc @_Concurrency.MainActor(unsafe) public var headerView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var closeButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var muteButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var deleteButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatListTheme
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: FlyUIKit.MFUIRecentChatListViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var mfUICreateChatViewModel: FlyUIKit.MFUICreateChatViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var recentChat: [MirrorFlySDK.RecentChat]
  @objc @_Concurrency.MainActor(unsafe) public var AllRecentChat: [MirrorFlySDK.RecentChat]
  @objc @_Concurrency.MainActor(unsafe) public var searchChatList: [MirrorFlySDK.ProfileDetails]
  @objc @_Concurrency.MainActor(unsafe) public var selectionIndex: Swift.Int
  @available(*, unavailable, renamed: "MFUIRecentChatListViewController()")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "MFUIRecentChatListViewController()")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel()
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func willCometoForeground()
  @objc @_Concurrency.MainActor(unsafe) open func loadCreateShowOptions()
  @objc @_Concurrency.MainActor(unsafe) open func showCreateNewChat()
  @objc @_Concurrency.MainActor(unsafe) open func showCreateSingleChat(type: FlyUIKit.ChatCreationType = .newSinglehChat)
  @objc @_Concurrency.MainActor(unsafe) open func showCreateGroupChat(type: FlyUIKit.ChatCreationType = .newGroupChat)
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didUpdateCallHistoryRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didTapCallHistoryRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func chatListModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func chatListModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, willDisplay indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func chatListModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func chatListModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, chatsInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.RecentChat]?
  @objc @_Concurrency.MainActor(unsafe) public func chatListProfileModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, chatsInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
  @objc @_Concurrency.MainActor(unsafe) public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didSelectCloseSelector()
  @objc @_Concurrency.MainActor(unsafe) open func didSelectCreateNewChat()
  @objc @_Concurrency.MainActor(unsafe) open func didSelectCreateNewSingleChat()
  @objc @_Concurrency.MainActor(unsafe) open func didSelectCreateNewGroupChat()
  @objc @_Concurrency.MainActor(unsafe) open func didSelectSettings()
  @objc @_Concurrency.MainActor(unsafe) open func ChatListViewModel(_ viewModel: FlyUIKit.MFUIRecentChatListViewModel?, didChangeChatList chats: [MirrorFlySDK.RecentChat]?, needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func ChatListViewModel(_ viewModel: FlyUIKit.MFUIRecentChatListViewModel, onReceiveMessage: MirrorFlySDK.ChatMessage, chatJid: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func ChatListViewModel(_ viewModel: FlyUIKit.MFUIRecentChatListViewModel, didUpdateChat chat: MirrorFlySDK.RecentChat)
  @objc @_Concurrency.MainActor(unsafe) open func ChatListViewModel(_ viewModel: FlyUIKit.MFUIRecentChatListViewModel, didLeaveChat chat: MirrorFlySDK.RecentChat)
  @objc @_Concurrency.MainActor(unsafe) public func connectionStateDidChange(_ isConnected: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
}
extension FlyUIKit.MFUIRecentChatListViewController : MirrorFlySDK.ConnectionEventDelegate {
  @_Concurrency.MainActor(unsafe) public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onReconnecting()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onDisconnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnectionNotAuthorized()
}
extension FlyUIKit.MFUIRecentChatListViewController : FlyUIKit.MFUISearchBarDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickCancelSearch()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func passChangeTextString(searchbar: UIKit.UISearchBar, text: Swift.String)
}
extension FlyUIKit.MFUIRecentChatListViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func registerKeyboardNotifications()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func keyboardWillShow(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func keyboardWillHide(_ notification: Foundation.Notification)
}
extension FlyUIKit.MFUIRecentChatListViewController : MirrorFlySDK.ProfileEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userCameOnline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userWentOffline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func myProfileUpdated()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersProfilesFetched()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func hideUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
extension FlyUIKit.MFUIRecentChatListViewController : MirrorFlySDK.GroupEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didRemoveMemberFromAdmin(groupJid: Swift.String, removedAdminMemberJid: Swift.String, removedByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didAddNewMemeberToGroup(groupJid: Swift.String, newMemberJid: Swift.String, addedByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didRemoveMemberFromGroup(groupJid: Swift.String, removedMemberJid: Swift.String, removedByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didMakeMemberAsAdmin(groupJid: Swift.String, newAdminMemberJid: Swift.String, madeByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didDeleteGroupLocally(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didLeftFromGroup(groupJid: Swift.String, leftUserJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didCreateGroup(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didFetchGroupMembers(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didReceiveGroupNotificationMessage(message: MirrorFlySDK.ChatMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didUpdateGroupProfile(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didFetchGroups(groups: [MirrorFlySDK.ProfileDetails])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didFetchGroupProfile(groupJid: Swift.String)
}
extension FlyUIKit.MFUIRecentChatListViewController : MirrorFlySDK.AvailableFeaturesDelegate {
  @_Concurrency.MainActor(unsafe) public func didUpdateAvailableFeatures(features: MirrorFlySDK.AvailableFeaturesModel)
}
extension FlyUIKit.MFUIRecentChatListViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func showCreateOptionOf(chat: Swift.Bool, group: Swift.Bool, setting: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIFloatyViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public let floaty: FlyUIKit.MFUIFloaty
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct ImageData {
}
public struct settingsModel {
}
public struct TranslateDetail {
}
public struct LanguageDetail {
}
public struct LanguageModel {
}
public protocol MFUIReplyMessageViewProtocol {
  func configure(with configuration: FlyUIKit.MFUIReplyBaseMessageViewParams)
}
@objc @_inheritsConvenienceInitializers public class Messagestatus : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class participantDetails : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UserProfileData : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public protocol MFUICallParticipantViewModelDelegate : FlyUIKit.MFUICommonViewModelDelegate {
  func callParticipantViewModel(_ viewModel: FlyUIKit.MFUICallParticipantViewModel, didChangeUsers contact: [MirrorFlySDK.ProfileDetails], needsToReload: Swift.Bool)
  func callParticipantViewModel(_ viewModel: FlyUIKit.MFUICallParticipantViewModel, didCreateChat chat: MirrorFlySDK.RecentChat?)
  func callParticipantViewModel(_ viewModel: FlyUIKit.MFUICallParticipantViewModel, didUpdateSelectedContacts selectedContacts: [MirrorFlySDK.ProfileDetails])
}
public protocol MFUICallParticipantViewModelDataSource : AnyObject {
  func callParticipantViewModel(_ viewModel: FlyUIKit.MFUICallParticipantViewModel, nextContactListForChatType chatType: FlyUIKit.ChatCreationType) -> [MirrorFlySDK.ProfileDetails]?
}
@objc @_hasMissingDesignatedInitializers open class MFUICallParticipantViewModel : ObjectiveC.NSObject {
  public var contactList: [MirrorFlySDK.ProfileDetails]
  public var selectedContactList: Swift.Set<MirrorFlySDK.ProfileDetails>
  public func resetPaginationConstants()
  public func getUsersList(searchTerm: Swift.String)
  @objc deinit
}
public protocol Flipable {
  func flip(directionHorizontal: Swift.Bool)
}
extension FlyUIKit.Flipable where Self : FlyUIKit.CropperViewController {
  public func flip(directionHorizontal: Swift.Bool = true)
}
public protocol MFUIRecentChatListViewModelDelegate : FlyUIKit.MFUICommonViewModelDelegate {
  func ChatListViewModel(_ viewModel: FlyUIKit.MFUIRecentChatListViewModel?, didChangeChatList chats: [MirrorFlySDK.RecentChat]?, needsToReload: Swift.Bool)
  func ChatListViewModel(_ viewModel: FlyUIKit.MFUIRecentChatListViewModel, didUpdateChat chat: MirrorFlySDK.RecentChat)
  func ChatListViewModel(_ viewModel: FlyUIKit.MFUIRecentChatListViewModel, didLeaveChat chat: MirrorFlySDK.RecentChat)
  func ChatListViewModel(_ viewModel: FlyUIKit.MFUIRecentChatListViewModel, onReceiveMessage: MirrorFlySDK.ChatMessage, chatJid: Swift.String)
}
@objc open class MFUIRecentChatListViewModel : ObjectiveC.NSObject {
  public var recentChatList: [MirrorFlySDK.RecentChat] {
    get
  }
  public var searchChatList: [MirrorFlySDK.ProfileDetails] {
    get
  }
  public var selectedRecentChat: [MirrorFlySDK.RecentChat]
  public init(delegate: (any FlyUIKit.MFUIRecentChatListViewModelDelegate)?)
  @objc deinit
}
extension FlyUIKit.MFUIRecentChatListViewModel : MirrorFlySDK.ConnectionEventDelegate {
  public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  public func onReconnecting()
  public func onConnected()
  public func onDisconnected()
  public func onConnectionNotAuthorized()
}
extension FlyUIKit.MFUIRecentChatListViewModel : MirrorFlySDK.MessageEventsDelegate {
  @objc dynamic public func onMediaStatusFailed(error: Swift.String, messageId: Swift.String, errorCode: Swift.Int)
  @objc dynamic public func clearAllConversationForSyncedDevice()
  @objc dynamic public func onMessagesCleared(toJid: Swift.String, deleteType: Swift.String?)
  @objc dynamic public func onMessageReceived(message: MirrorFlySDK.ChatMessage, chatJid: Swift.String)
  @objc dynamic public func onMessageTranslated(message: MirrorFlySDK.ChatMessage, jid: Swift.String)
  @objc dynamic public func onMessageStatusUpdated(messageId: Swift.String, chatJid: Swift.String, status: MirrorFlySDK.MessageStatus)
  @objc dynamic public func onMediaStatusUpdated(message: MirrorFlySDK.ChatMessage)
  public func onMediaStatusFailed(error: Swift.String, messageId: Swift.String)
  @objc dynamic public func onMediaProgressChanged(message: MirrorFlySDK.ChatMessage, progressPercentage: Swift.Float)
  @objc dynamic public func onMessagesClearedOrDeleted(messageIds: Swift.Array<Swift.String>)
  @objc dynamic public func onMessagesDeletedforEveryone(messageIds: Swift.Array<Swift.String>)
  @objc dynamic public func showOrUpdateOrCancelNotification()
  public func onMessagesCleared(toJid: Swift.String)
  @objc dynamic public func setOrUpdateFavourite(messageId: Swift.String, favourite: Swift.Bool, removeAllFavourite: Swift.Bool)
}
extension FlyUIKit.MFUIRecentChatListViewModel : MirrorFlySDK.ProfileEventsDelegate {
  @objc dynamic public func userCameOnline(for jid: Swift.String)
  @objc dynamic public func userWentOffline(for jid: Swift.String)
  @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @objc dynamic public func myProfileUpdated()
  @objc dynamic public func usersProfilesFetched()
  @objc dynamic public func blockedThisUser(jid: Swift.String)
  @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @objc dynamic public func userBlockedMe(jid: Swift.String)
  @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @objc dynamic public func hideUserLastSeen()
  @objc dynamic public func getUserLastSeen()
  @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class MFBaseViewController : UIKit.UIViewController, UIKit.UINavigationControllerDelegate, FlyUIKit.MFUIULoaderIndicatorProtocol {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
  @objc @_Concurrency.MainActor(unsafe) open func updateLayouts()
  @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func setupNavigationBar(backgroundColor: UIKit.UIColor, shadowColor: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) open func onClickBack()
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @_Concurrency.MainActor(unsafe) @objc open func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func showLoading(_ isLoading: Swift.Bool, isContact: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) open func internetAvailable(status: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension FlyUIKit.MFBaseViewController : MirrorFlySDK.LogoutDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveLogout()
}
extension FlyUIKit.MFBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func postLogoutNotification()
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIUserMessageCell : FlyUIKit.MFUIContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var messageTextView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userMessage: MirrorFlySDK.ChatMessage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: FlyUIKit.MFUIBaseMessageCellParams)
  @_Concurrency.MainActor(unsafe) open func configure(_ message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool, groupPosition: FlyUIKit.MessageGroupPosition, receiptState: FlyUIKit.MFUIMessageReceiptState?, useReaction: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func configure(_ message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool, receiptState: FlyUIKit.MFUIMessageReceiptState?, groupPosition: FlyUIKit.MessageGroupPosition, withTextView: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIImage {
  public func mfui_with(tintColor: UIKit.UIColor?) -> UIKit.UIImage
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func containsImage(image: UIKit.UIImage) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func makeRounded()
  @_Concurrency.MainActor(unsafe) public func setCircleView()
  @_Concurrency.MainActor(unsafe) public func setImageInsect(insect: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func applyShadow(_ shawdowRadius: CoreFoundation.CGFloat = 8.0, shawdowOpacity: Swift.Float = 0.5)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @objcMembers @_Concurrency.MainActor(unsafe) open class MFUITableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension FlyUIKit.MFUITableViewCell : FlyUIKit.MFUIViewLifeCycle {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupActions()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class CropBox : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DocumentTableViewCell : FlyUIKit.MFUITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var icon: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var nameLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var fileSizeLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var dateLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var separatorView: UIKit.UIView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIImageContentView : FlyUIKit.MFUIBaseMediaContentView {
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var progressContentView: FlyUIKit.MFUIProgressContentView
  @_Concurrency.MainActor(unsafe) public var widthConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) public var text: Swift.String
  @_Concurrency.MainActor(unsafe) public var playImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var videoIconImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var videoSizeLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var backgroundColorView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var VideoSizeStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func setupSizeContraint()
  @_Concurrency.MainActor(unsafe) override open func configure(message: MirrorFlySDK.ChatMessage, position: FlyUIKit.MessagePosition, delegate: any FlyUIKit.MFUIProgressDelegate, audioViewDelegate: any FlyUIKit.MFUIAudioContentViewDelegate)
  @_Concurrency.MainActor(unsafe) open func updateReceiverImageCell()
  @_Concurrency.MainActor(unsafe) open func updateSenderImageCell()
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, size: CoreFoundation.CGSize? = nil)
  @_Concurrency.MainActor(unsafe) open func resizeImageView(by size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol MFUIMessageInfoModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func MessageInfoModule(_ headerComponent: FlyUIKit.MFUIMessageInfoModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func MessageInfoModule(_ headerComponent: FlyUIKit.MFUIMessageInfoModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func MessageInfoModule(_ headerComponent: FlyUIKit.MFUIMessageInfoModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIMessageInfoModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIMessageInfoModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageInfoTheme?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIMessageInfoModuleHeaderDelegate, theme: FlyUIKit.MFMessageInfoTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFMessageInfoTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
  }
}
@_hasMissingDesignatedInitializers public class MFUIIconSet {
  public static var iconAdd: UIKit.UIImage {
    get
    set
  }
  public static var iconBack: UIKit.UIImage {
    get
    set
  }
  public static var iconUser: UIKit.UIImage {
    get
    set
  }
  public static var iconChevronDown: UIKit.UIImage {
    get
    set
  }
  public static var iconSend: UIKit.UIImage {
    get
    set
  }
  public static var ic_sent: UIKit.UIImage {
    get
    set
  }
  public static var ic_hour: UIKit.UIImage {
    get
    set
  }
  public static var ic_delivered: UIKit.UIImage {
    get
    set
  }
  public static var ic_seen: UIKit.UIImage {
    get
    set
  }
  public static var iconError: UIKit.UIImage {
    get
    set
  }
  public static var iconDone: UIKit.UIImage {
    get
    set
  }
  public static var iconDoneAll: UIKit.UIImage {
    get
    set
  }
  public static var iconClose: UIKit.UIImage {
    get
    set
  }
  public static var chatFloating: UIKit.UIImage {
    get
    set
  }
  public static var plusBlack: UIKit.UIImage {
    get
    set
  }
  public static var iconChat: UIKit.UIImage {
    get
    set
  }
  public static var iconSpinner: UIKit.UIImage {
    get
    set
  }
  public static var iconSingleChat: UIKit.UIImage {
    get
    set
  }
  public static var iconGroupChat: UIKit.UIImage {
    get
    set
  }
  public static var iconAttachment: UIKit.UIImage {
    get
    set
  }
  public static var iconVoiceCall: UIKit.UIImage {
    get
    set
  }
  public static var iconHangUp: UIKit.UIImage {
    get
    set
  }
  public static var iconSpeakerOff: UIKit.UIImage {
    get
    set
  }
  public static var iconSpeakerOn: UIKit.UIImage {
    get
    set
  }
  public static var iconAudioOn: UIKit.UIImage {
    get
    set
  }
  public static var iconAudioOff: UIKit.UIImage {
    get
    set
  }
  public static var iconCallAgain: UIKit.UIImage {
    get
    set
  }
  public static var iconCallCancel: UIKit.UIImage {
    get
    set
  }
  public static var iconMute: UIKit.UIImage {
    get
    set
  }
  public static var icondefault_avatar: UIKit.UIImage {
    get
    set
  }
  public static var ic_close: UIKit.UIImage {
    get
    set
  }
  public static var ic_delete: UIKit.UIImage {
    get
    set
  }
  public static var addImage: UIKit.UIImage {
    get
    set
  }
  public static var download: UIKit.UIImage {
    get
    set
  }
  public static var ic_upload: UIKit.UIImage {
    get
    set
  }
  public static var iconVideoCall: UIKit.UIImage {
    get
    set
  }
  public static var iconCameraOff: UIKit.UIImage {
    get
    set
  }
  public static var iconCameraOn: UIKit.UIImage {
    get
    set
  }
  public static var iconVideoDisabled: UIKit.UIImage {
    get
    set
  }
  public static var iconVideoEnabled: UIKit.UIImage {
    get
    set
  }
  public static var iconBluetooth_headset: UIKit.UIImage {
    get
    set
  }
  public static var iconheadset: UIKit.UIImage {
    get
    set
  }
  public static var iconVideoOff: UIKit.UIImage {
    get
    set
  }
  public static var iconReply: UIKit.UIImage {
    get
    set
  }
  public static var iconForward: UIKit.UIImage {
    get
    set
  }
  public static var iconCamera: UIKit.UIImage {
    get
    set
  }
  public static var ic_circleClose: UIKit.UIImage {
    get
    set
  }
  public static var iconInfo: UIKit.UIImage {
    get
    set
  }
  public static var iconCirclePlus: UIKit.UIImage {
    get
    set
  }
  public static var iconCircleMinus: UIKit.UIImage {
    get
    set
  }
  public static var iconNotDelivered: UIKit.UIImage {
    get
    set
  }
  public static var iconNotRead: UIKit.UIImage {
    get
    set
  }
  public static var iconGroup: UIKit.UIImage {
    get
    set
  }
  public static var ic_email: UIKit.UIImage {
    get
    set
  }
  public static var ic_phone: UIKit.UIImage {
    get
    set
  }
  public static var cameraBlack: UIKit.UIImage {
    get
    set
  }
  public static var check_box: UIKit.UIImage {
    get
    set
  }
  public static var checked: UIKit.UIImage {
    get
    set
  }
  public static var iconsettings: UIKit.UIImage {
    get
    set
  }
  public static var iconprofile: UIKit.UIImage {
    get
    set
  }
  public static var iconRightArrow: UIKit.UIImage {
    get
    set
  }
  public static var iconProfileCamera: UIKit.UIImage {
    get
    set
  }
  public static var imageGallery: UIKit.UIImage {
    get
    set
  }
  public static var quickForward: UIKit.UIImage {
    get
    set
  }
  public static var ic_pdf: UIKit.UIImage {
    get
    set
  }
  public static var ic_doc: UIKit.UIImage {
    get
    set
  }
  public static var ic_xls: UIKit.UIImage {
    get
    set
  }
  public static var ic_xlxs: UIKit.UIImage {
    get
    set
  }
  public static var ic_ppt: UIKit.UIImage {
    get
    set
  }
  public static var ic_pptx: UIKit.UIImage {
    get
    set
  }
  public static var ic_txt: UIKit.UIImage {
    get
    set
  }
  public static var ic_zip: UIKit.UIImage {
    get
    set
  }
  public static var ic_rar: UIKit.UIImage {
    get
    set
  }
  public static var ic_csv: UIKit.UIImage {
    get
    set
  }
  public static var ic_docx: UIKit.UIImage {
    get
    set
  }
  public static var document: UIKit.UIImage {
    get
    set
  }
  public static var videoPlay: UIKit.UIImage {
    get
    set
  }
  public static var videoWhite: UIKit.UIImage {
    get
    set
  }
  public static var addUser: UIKit.UIImage {
    get
    set
  }
  public static var video: UIKit.UIImage {
    get
    set
  }
  public static var noCall: UIKit.UIImage {
    get
    set
  }
  public static var callLog: UIKit.UIImage {
    get
    set
  }
  public static var missedCall: UIKit.UIImage {
    get
    set
  }
  public static var incomingCall: UIKit.UIImage {
    get
    set
  }
  public static var outGoing: UIKit.UIImage {
    get
    set
  }
  public static var audio_call: UIKit.UIImage {
    get
    set
  }
  public static var VideoType: UIKit.UIImage {
    get
    set
  }
  public static var ic_audio: UIKit.UIImage {
    get
    set
  }
  public static var ic_audioSender: UIKit.UIImage {
    get
    set
  }
  public static var ic_audio_receive: UIKit.UIImage {
    get
    set
  }
  public static var ic_mic_blue_animated: UIKit.UIImage {
    get
    set
  }
  public static var ic_mic_blue: UIKit.UIImage {
    get
    set
  }
  public static var arrowBackIos: UIKit.UIImage {
    get
    set
  }
  public static var ic_play: UIKit.UIImage {
    get
    set
  }
  public static var ic_slider_white: UIKit.UIImage {
    get
    set
  }
  public static var ic_audio_pause: UIKit.UIImage {
    get
    set
  }
  public static var ic_audio_filled: UIKit.UIImage {
    get
    set
  }
  public static var addParticipant: UIKit.UIImage {
    get
    set
  }
  public static var music: UIKit.UIImage {
    get
    set
  }
  public static var leave_group: UIKit.UIImage {
    get
    set
  }
  public static var ic_deletegroup: UIKit.UIImage {
    get
    set
  }
  public static var audio: UIKit.UIImage {
    get
    set
  }
  public static var receiverAudio: UIKit.UIImage {
    get
    set
  }
  public static var senderAudio: UIKit.UIImage {
    get
    set
  }
  public static var headset: UIKit.UIImage {
    get
    set
  }
  public static var moreOption: UIKit.UIImage {
    get
    set
  }
  public static var ic_copy: UIKit.UIImage {
    get
    set
  }
  public static var mute: UIKit.UIImage {
    get
    set
  }
  public static var unmute: UIKit.UIImage {
    get
    set
  }
  public static var ic_unselected: UIKit.UIImage {
    get
    set
  }
  public static var ic_selected: UIKit.UIImage {
    get
    set
  }
  public static var muted: UIKit.UIImage {
    get
    set
  }
  public static var Chats: UIKit.UIImage {
    get
    set
  }
  public static var selectedImg: UIKit.UIImage {
    get
    set
  }
  public static var unSelectedImg: UIKit.UIImage {
    get
    set
  }
  public static var deleteforEveryone: UIKit.UIImage {
    get
    set
  }
  public static var ic_contact: UIKit.UIImage {
    get
    set
  }
  public static var contact: UIKit.UIImage {
    get
    set
  }
  public static var ic_reply_contact: UIKit.UIImage {
    get
    set
  }
  public static var ic_locationSend: UIKit.UIImage {
    get
    set
  }
  public static var receivedMap: UIKit.UIImage {
    get
    set
  }
  public static var map: UIKit.UIImage {
    get
    set
  }
  public static var location: UIKit.UIImage {
    get
    set
  }
  public static var ic_notification: UIKit.UIImage {
    get
    set
  }
  public static var ic_logout: UIKit.UIImage {
    get
    set
  }
  public static var ic_viewMedia: UIKit.UIImage {
    get
    set
  }
  public static var ic_mic_white: UIKit.UIImage {
    get
    set
  }
  public static var ic_white_headphone: UIKit.UIImage {
    get
    set
  }
  public static var ic_grey_circle: UIKit.UIImage {
    get
    set
  }
  @objc deinit
}
public protocol MFUICallScreenModuleCallOverlayDelegate : FlyUIKit.MFUICommonDelegate {
  func CallScreenModule(_ didTapOverLayView: UIKit.UIView?)
}
extension FlyUIKit.MFUICallScreenModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class CallOverlayView : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICallScreenModuleCallOverlayDelegate)?
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICallScreenModuleCallOverlayDelegate, theme: FlyUIKit.MFCallScreenTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallScreenTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension UIKit.UIStackView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setHStack(_ views: [UIKit.UIView?]) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setVStack(_ views: [UIKit.UIView?]) -> Self
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) open var currentWindow: UIKit.UIWindow? {
    get
  }
}
public protocol MFUIUpdateProfileModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func updateProfileModule(_ listComponent: FlyUIKit.MFUIUpdateProfileModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func didClickCamerButton()
  func didClickProfileButton()
  func updateTextfieldContent(index: Swift.Int, content: Swift.String)
  func didClickSaveButton()
}
extension FlyUIKit.MFUIUpdateProfileModule {
  @_inheritsConvenienceInitializers @objc(MFUIUpdateProfileModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var userprofileCell: FlyUIKit.MFUserProfileCell?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFUpdateProfileTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIUpdateProfileModuleListDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var profileImageComponent: FlyUIKit.MFUIUpdateProfileModule.BImageView?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIUpdateProfileModuleListDelegate, theme: FlyUIKit.MFUpdateProfileTheme, profileArr: [FlyUIKit.UserProfileData])
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFUpdateProfileTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(profileCell: FlyUIKit.MFUserProfileCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ userprofileCell: FlyUIKit.MFUserProfileCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUIUpdateProfileModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
extension FlyUIKit.MFUIUpdateProfileModule.List : FlyUIKit.MFUIUpdateProfileModuleImageviewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didChangeNameString(name: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickCamerButton()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickProfilePhoto()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUIUpdateProfileModule.List : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MFUICoverImageView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFComponentTheme
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public func setPlaceholderImage(iconSize: CoreFoundation.CGSize)
  @objc deinit
}
public protocol StateRestorable {
  func isCurrentlyInState(_ state: FlyUIKit.CropperState?) -> Swift.Bool
  func saveState() -> FlyUIKit.CropperState
  func restoreState(_ state: FlyUIKit.CropperState, animated: Swift.Bool)
}
extension FlyUIKit.StateRestorable where Self : FlyUIKit.CropperViewController {
  public func isCurrentlyInState(_ state: FlyUIKit.CropperState?) -> Swift.Bool
  public func saveState() -> FlyUIKit.CropperState
  public func restoreState(_ state: FlyUIKit.CropperState, animated: Swift.Bool = false)
}
public protocol MFUIViewMediaModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func viewMediaModule(_ headerComponent: FlyUIKit.MFUIViewMediaModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func viewMediaModule(_ headerComponent: FlyUIKit.MFUIViewMediaModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func viewMediaModule(_ headerComponent: FlyUIKit.MFUIViewMediaModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIViewMediaModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIViewMediaModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFViewMediaTheme?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIViewMediaModuleHeaderDelegate, theme: FlyUIKit.MFViewMediaTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFViewMediaTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFContactPreviewHeaderTableCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFContactPreviewTheme
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUIViewMediaController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFViewMediaTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIViewMediaModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUIViewMediaModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var segmentControl: UIKit.UISegmentedControl?
  @objc @_Concurrency.MainActor(unsafe) public var jid: Swift.String
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc deinit
}
extension FlyUIKit.MFUIViewMediaController : FlyUIKit.MFUIViewMediaModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewDocumentModule(_ listComponent: FlyUIKit.MFUIViewMediaModule.List, chatMessage: MirrorFlySDK.ChatMessage)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewMediaModule(_ listComponent: FlyUIKit.MFUIViewMediaModule.List, chatMessage: MirrorFlySDK.ChatMessage)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUIViewMediaController : FlyUIKit.MFUIViewMediaModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewMediaModule(_ headerComponent: FlyUIKit.MFUIViewMediaModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewMediaModule(_ headerComponent: FlyUIKit.MFUIViewMediaModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewMediaModule(_ headerComponent: FlyUIKit.MFUIViewMediaModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIViewMediaController : MirrorFlySDK.MessageEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onMessageReceived(message: MirrorFlySDK.ChatMessage, chatJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onMessageStatusUpdated(messageId: Swift.String, chatJid: Swift.String, status: MirrorFlySDK.MessageStatus)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onMediaStatusUpdated(message: MirrorFlySDK.ChatMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onMediaStatusFailed(error: Swift.String, messageId: Swift.String, errorCode: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onMediaProgressChanged(message: MirrorFlySDK.ChatMessage, progressPercentage: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onMessagesClearedOrDeleted(messageIds: Swift.Array<Swift.String>)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onMessagesDeletedforEveryone(messageIds: Swift.Array<Swift.String>)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func showOrUpdateOrCancelNotification()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onMessagesCleared(toJid: Swift.String, deleteType: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func setOrUpdateFavourite(messageId: Swift.String, favourite: Swift.Bool, removeAllFavourite: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onMessageTranslated(message: MirrorFlySDK.ChatMessage, jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func clearAllConversationForSyncedDevice()
}
extension FlyUIKit.MFUIViewMediaController : MirrorFlySDK.AvailableFeaturesDelegate {
  @_Concurrency.MainActor(unsafe) public func didUpdateAvailableFeatures(features: MirrorFlySDK.AvailableFeaturesModel)
}
extension FlyUIKit.MFUIViewMediaController : QuickLook.QLPreviewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt index: Swift.Int) -> any QuickLook.QLPreviewItem
}
public typealias MFUIActionSheetHandler = () -> Swift.Void
public protocol MFUIActionSheetDelegate : ObjectiveC.NSObjectProtocol {
  func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
}
@_inheritsConvenienceInitializers public class MFUIActionSheetItem : FlyUIKit.MFUICommonItem {
  override public init(title: Swift.String? = nil, color: UIKit.UIColor? = MFUIColorSet.onlight01, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, tintColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment = .left)
  public init(title: Swift.String? = nil, color: UIKit.UIColor? = nil, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, textAlignment: UIKit.NSTextAlignment = .center, completionHandler: FlyUIKit.MFUIActionSheetHandler?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MFUIActionSheet {
  public static func show(items: [FlyUIKit.MFUIActionSheetItem], cancelItem: FlyUIKit.MFUIActionSheetItem, identifier: Swift.Int = -1, oneTimetheme: FlyUIKit.MFComponentTheme? = nil, delegate: (any FlyUIKit.MFUIActionSheetDelegate)? = nil, selectedIndex: Swift.Int = -1)
  public static func dismiss()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MFUIColorSet {
  public static var primary100: UIKit.UIColor
  public static var primary200: UIKit.UIColor
  public static var primary300: UIKit.UIColor
  public static var primary400: UIKit.UIColor
  public static var primary500: UIKit.UIColor
  public static var secondary100: UIKit.UIColor
  public static var secondary200: UIKit.UIColor
  public static var secondary300: UIKit.UIColor
  public static var secondary400: UIKit.UIColor
  public static var secondary500: UIKit.UIColor
  public static var background50: UIKit.UIColor
  public static var background75: UIKit.UIColor
  public static var background100: UIKit.UIColor
  public static var background200: UIKit.UIColor
  public static var background300: UIKit.UIColor
  public static var background400: UIKit.UIColor
  public static var background500: UIKit.UIColor
  public static var background600: UIKit.UIColor
  public static var background700: UIKit.UIColor
  public static var background800: UIKit.UIColor
  public static var overlay01: UIKit.UIColor
  public static var overlay02: UIKit.UIColor
  public static var overlay03: UIKit.UIColor
  public static var onlight01: UIKit.UIColor
  public static var onlight02: UIKit.UIColor
  public static var onlight03: UIKit.UIColor
  public static var onlight04: UIKit.UIColor
  public static var onlight05: UIKit.UIColor
  public static var ondark01: UIKit.UIColor
  public static var ondark02: UIKit.UIColor
  public static var ondark03: UIKit.UIColor
  public static var ondark04: UIKit.UIColor
  public static var error100: UIKit.UIColor
  public static var error200: UIKit.UIColor
  public static var error300: UIKit.UIColor
  public static var error400: UIKit.UIColor
  public static var error500: UIKit.UIColor
  public static var information: UIKit.UIColor
  public static var highlight: UIKit.UIColor
  public static var tableHeader: UIKit.UIColor
  public static var lightBlue: UIKit.UIColor
  public static var errorRedColor: UIKit.UIColor
  public static var audioBackGroundColor: UIKit.UIColor
  public static var whiteColor: UIKit.UIColor
  public static var lightGrey: UIKit.UIColor
  public static var lighterGrey: UIKit.UIColor
  public static var lighterGrey1: UIKit.UIColor
  @objc deinit
}
public protocol MFUICreateChatModuleHeaderDelegate : FlyUIKit.MFUIBaseSelectContactModuleHeaderDelegate {
  func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
public protocol MFUICreateChatModuleHeaderDataSource : FlyUIKit.MFUIBaseSelectContactModuleHeaderDataSource {
}
extension FlyUIKit.MFUICreateChatModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : FlyUIKit.MFUIBaseSelectContactModule.Header {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICreateChatModuleHeaderDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUICreateChatModuleHeaderDataSource)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) public var type: FlyUIKit.ChatCreationType
    @available(*, unavailable, renamed: "MFUICreateChatModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUICreateChatModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICreateChatModuleHeaderDelegate, theme: FlyUIKit.MFContactListTheme, type: FlyUIKit.ChatCreationType)
    @_Concurrency.MainActor(unsafe) @objc override open func updateRightBarButton()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateTitleView()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItem()
    @_Concurrency.MainActor(unsafe) @objc override public func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override public func onTapRightBarButton()
  }
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open func mf_setupNavigationBarAppearance(tintColor: UIKit.UIColor)
}
public protocol MFUIMessageInfoModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func messageInfoModule(_ listComponent: FlyUIKit.MFUIMessageInfoModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func messageInfoModule(_ listComponent: FlyUIKit.MFUIMessageInfoModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  func messageInfoModule(_ listComponent: FlyUIKit.MFUIMessageInfoModule.List)
}
public protocol MFUIMessageInfoModuleListDataSource : AnyObject {
  func messageInfoModule(_ listComponent: FlyUIKit.MFUIMessageInfoModule.List, chatsInTableView tableView: UIKit.UITableView) -> [FlyUIKit.Messagestatus]?
}
extension FlyUIKit.MFUIMessageInfoModule {
  @_inheritsConvenienceInitializers @objc(MFUIMessageInfoModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var emptyLabel: UIKit.UILabel
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var chatCell: FlyUIKit.MFUIBaseChatCell?
    @objc @_Concurrency.MainActor(unsafe) public var customChatCell: FlyUIKit.MFUIBaseChatCell?
    @objc @_Concurrency.MainActor(unsafe) public var emptyInfocell: FlyUIKit.MFEmptyTableCell?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageInfoTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIMessageInfoModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUIMessageInfoModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var singleChatMessageStatusArr: [FlyUIKit.Messagestatus]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var groupChatMessageStatusArr: [FlyUIKit.Messagestatus]
    @objc @_Concurrency.MainActor(unsafe) public var messageViewcomponent: FlyUIKit.MFUIMessageInfoModule.messageView?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIMessageInfoModuleListDelegate, dataSource: any FlyUIKit.MFUIMessageInfoModuleListDataSource, theme: FlyUIKit.MFMessageInfoTheme, isgroupChat: Swift.Bool, message: MirrorFlySDK.ChatMessage, groupStausArr: [FlyUIKit.Messagestatus], ProfileDetails: MirrorFlySDK.ProfileDetails)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFMessageInfoTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(chatCell: FlyUIKit.MFUIBaseChatCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func registerEmptyCell(emptyCell: FlyUIKit.MFEmptyTableCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ chatCell: FlyUIKit.MFUIBaseChatCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUIMessageInfoModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
extension FlyUIKit.MFUIMessageInfoModule.List : FlyUIKit.MFSectionHeaderViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func passHeaderAction(_ headerview: FlyUIKit.MFSectionHeaderView)
}
public protocol MFUICallScreenModuleRemoteVideoViewDelegate : FlyUIKit.MFUICommonDelegate {
  func CallScreenModule(_ RemoteVideoViewComponent: FlyUIKit.MFUICallScreenModule.RemoteVideoView, RemotetapGeture sender: UIKit.UITapGestureRecognizer)
}
extension FlyUIKit.MFUICallScreenModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class RemoteVideoView : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme?
    @objc @_Concurrency.MainActor(unsafe) public var RtcRemoteVideoView: WebRTC.RTCMTLVideoView?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICallScreenModuleRemoteVideoViewDelegate)?
    @_Concurrency.MainActor(unsafe) open func configure(theme: FlyUIKit.MFCallScreenTheme, delegate: any FlyUIKit.MFUICallScreenModuleRemoteVideoViewDelegate)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public protocol MFUIMessageCellProtocol {
  func configure(with configuration: FlyUIKit.MFUIBaseMessageCellParams)
}
public protocol MFUIBaseSelectContactModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
}
public protocol MFUIBaseSelectContactModuleHeaderDataSource : AnyObject {
}
extension FlyUIKit.MFUIBaseSelectContactModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFContactListTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func updateRightBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  }
}
public class MFUIMessageInfoModule {
  public var headerComponent: FlyUIKit.MFUIMessageInfoModule.Header? {
    get
    set
  }
  public var messageViewComponent: FlyUIKit.MFUIMessageInfoModule.messageView? {
    get
    set
  }
  public var listViewcomponent: FlyUIKit.MFUIMessageInfoModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIMessageInfoModule.Header? = nil, messageviewComponent: FlyUIKit.MFUIMessageInfoModule.messageView? = nil, listComponent: FlyUIKit.MFUIMessageInfoModule.List? = nil)
  @objc deinit
}
public struct ErrorMessage {
  public static let otpAttempts: Swift.String
  public static let noInternet: Swift.String
  public static let shortMobileNumber: Swift.String
  public static let validphoneNumber: Swift.String
  public static let invalidOtp: Swift.String
  public static let otpMismatch: Swift.String
  public static let noCountriesFound: Swift.String
  public static let noContactsFound: Swift.String
  public static let enterOtp: Swift.String
  public static let enterMobileNumber: Swift.String
  public static let sessionExpired: Swift.String
  public static let restrictedMoreImages: Swift.String
  public static let restrictedforwardUsers: Swift.String
  public static let checkYourInternet: Swift.String
  public static let fileSizeLarge: Swift.String
  public static let numberDoesntMatch: Swift.String
}
public struct SuccessMessage {
  public static let successAuth: Swift.String
  public static let successOTP: Swift.String
}
public struct AppRegex {
  public static let urlFormat: Swift.String
}
public let KEY_STRING: Swift.String
public let cameraMediaTypeVideo: Swift.String
public let cameraMediaTypeImage: Swift.String
public struct TermsAndConditionsUrl {
  public static let aboutUs: Swift.String
  public static let termsAndConditions: Swift.String
  public static let privacyPolicy: Swift.String
}
public protocol Rotatable {
  func setStraightenAngle(_ angle: CoreFoundation.CGFloat)
  func rotate90degrees(clockwise: Swift.Bool)
}
extension FlyUIKit.Rotatable where Self : FlyUIKit.CropperViewController {
  public func setStraightenAngle(_ angle: CoreFoundation.CGFloat)
  public func rotate90degrees(clockwise: Swift.Bool = true)
}
public class ReplyMessage {
  final public let message: MirrorFlySDK.ChatMessage
  final public let replyMessageNickname: Swift.String
  public var fileName: Swift.String
  public var replyToText: Swift.String {
    get
  }
  public init(message: MirrorFlySDK.ChatMessage)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "init(frame:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension FlyUIKit.MFUIView : FlyUIKit.MFUIViewLifeCycle {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupActions()
}
extension CoreFoundation.CGRect {
  public init(center: CoreFoundation.CGPoint, size: CoreFoundation.CGSize)
  public func isEqual(to other: CoreFoundation.CGRect, accuracy epsilon: CoreFoundation.CGFloat) -> Swift.Bool
}
extension CoreFoundation.CGPoint {
  public func isEqual(to other: CoreFoundation.CGPoint, accuracy epsilon: CoreFoundation.CGFloat) -> Swift.Bool
}
extension CoreFoundation.CGSize {
  public func isEqual(to other: CoreFoundation.CGSize, accuracy epsilon: CoreFoundation.CGFloat) -> Swift.Bool
}
extension CoreFoundation.CGFloat {
  public func isEqual(to other: CoreFoundation.CGFloat, accuracy epsilon: CoreFoundation.CGFloat) -> Swift.Bool
}
extension CoreFoundation.CGAffineTransform {
  public func isEqual(to other: CoreFoundation.CGAffineTransform, accuracy epsilon: CoreFoundation.CGFloat) -> Swift.Bool
}
extension UIKit.UIImage {
  public func withOrientation(_ orientation: UIKit.UIImage.Orientation) -> UIKit.UIImage?
}
public protocol MFUIContactPreviewModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIContactPreviewModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIContactPreviewModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFContactPreviewTheme?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIContactPreviewModuleHeaderDelegate, theme: FlyUIKit.MFContactPreviewTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFContactPreviewTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
  }
}
@objc @_Concurrency.MainActor(unsafe) open class MFUIMessageInfoController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageInfoTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIMessageInfoModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUIMessageInfoModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var baseViewModel: FlyUIKit.MFUIBaseChatViewModel?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc deinit
}
extension FlyUIKit.MFUIMessageInfoController : FlyUIKit.MFUIMessageInfoModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func MessageInfoModule(_ headerComponent: FlyUIKit.MFUIMessageInfoModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func MessageInfoModule(_ headerComponent: FlyUIKit.MFUIMessageInfoModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func MessageInfoModule(_ headerComponent: FlyUIKit.MFUIMessageInfoModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUIMessageInfoController : FlyUIKit.MFUIMessageInfoModuleListDataSource, FlyUIKit.MFUIMessageInfoModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func messageInfoModule(_ listComponent: FlyUIKit.MFUIMessageInfoModule.List, chatsInTableView tableView: UIKit.UITableView) -> [FlyUIKit.Messagestatus]?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func messageInfoModule(_ listComponent: FlyUIKit.MFUIMessageInfoModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func messageInfoModule(_ listComponent: FlyUIKit.MFUIMessageInfoModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func messageInfoModule(_ listComponent: FlyUIKit.MFUIMessageInfoModule.List)
}
extension FlyUIKit.MFUIMessageInfoController : FlyUIKit.MFUIChatViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModel(reloadIndex: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModel(_ indexPath: Foundation.IndexPath, messageId: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModel(_ scrollLogicIndexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, reloadData chatMessage: [MirrorFlySDK.ChatMessage])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didUpdatedUserProfile(jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel?, didChangeChat chatMessage: MirrorFlySDK.ChatMessage?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, didChangeMessageList messages: [MirrorFlySDK.ChatMessage], needsToReload: Swift.Bool, initialLoad: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, shouldDismissForChat chatMessage: MirrorFlySDK.ChatMessage?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, messageId: Swift.String, chatJid: Swift.String, status: MirrorFlySDK.MessageStatus)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
}
extension FlyUIKit.MFUIMessageInfoController : AVFAudio.AVAudioPlayerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioPlayerDecodeErrorDidOccur(_ player: AVFAudio.AVAudioPlayer, error: (any Swift.Error)?)
}
extension FlyUIKit.MFUIMessageInfoController : MirrorFlySDK.ProfileEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userCameOnline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userWentOffline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func myProfileUpdated()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersProfilesFetched()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func hideUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class MFUIBaseChatViewParentController : FlyUIKit.MFBaseViewController, FlyUIKit.MFUIBaseChatViewModelDelegate, FlyUIKit.MFUIBaseChatViewModuleListDelegate, FlyUIKit.MFUIBaseChatViewModuleLisDataSource, FlyUIKit.MFUIBaseChatViewModelDataSource, FlyUIKit.MFUIBaseChatViewModuleInputDelegate, FlyUIKit.MFUIBaseChatViewModuleInputDataSource, UIKit.UIGestureRecognizerDelegate, FlyUIKit.MFUICommonViewModelDelegate, PhotosUI.PHPickerViewControllerDelegate, UIKit.UIImagePickerControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var baseHeaderComponent: FlyUIKit.MFUIBaseChatViewModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var baseListComponent: FlyUIKit.MFUIBaseChatViewModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var baseInputComponent: FlyUIKit.MFUIBaseChatViewModule.Input?
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatTheme
  @objc @_Concurrency.MainActor(unsafe) public var multiSelectMenuItem: FlyUIKit.MessageMenuItem
  @objc @_Concurrency.MainActor(unsafe) public var baseViewModel: FlyUIKit.MFUIBaseChatViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var mfUICreateChatViewModel: FlyUIKit.MFUICreateChatViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var mfUICallScreenViewModel: FlyUIKit.MFUICallScreenViewModel?
  @_Concurrency.MainActor(unsafe) public var availableFeatures: MirrorFlySDK.AvailableFeaturesModel
  @objc @_Concurrency.MainActor(unsafe) public var selectedAssets: [Photos.PHAsset]
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: FlyUIKit.MFUIChatViewModel? {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(chatJid: Swift.String?, startingPoint: Swift.Int64 = .max)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func createViewModel(chatJid: Swift.String? = nil, startingPoint: Swift.Int64? = Int64.max, showIndicator: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) public func setupScrollBottomViewStyle(scrollBottomView: UIKit.UIView, theme: FlyUIKit.MFComponentTheme = MFUITheme.componentTheme)
  @objc @_Concurrency.MainActor(unsafe) public func updateChatTitle()
  @objc @_Concurrency.MainActor(unsafe) public func updateNewMessageInfo(hidden: Swift.Bool)
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) public func increaseNewMessageCount() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func showMenuViewController(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage)
  @_Concurrency.MainActor(unsafe) public func showMenuViewController(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage, types: [FlyUIKit.MessageMenuItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func setMessageInputViewMode(_ mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, shouldDismissForChat chatMessage: MirrorFlySDK.ChatMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func didUpdatedUserProfile(jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @objc @_Concurrency.MainActor(unsafe) open func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel?, didChangeChat chatMessage: MirrorFlySDK.ChatMessage?)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, didChangeMessageList messages: [MirrorFlySDK.ChatMessage], needsToReload: Swift.Bool, initialLoad: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModel(_ scrollLogicIndexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, reloadData chatMessage: [MirrorFlySDK.ChatMessage])
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModel(reloadIndex: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModel(_ indexPath: Foundation.IndexPath, messageId: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, messageId: Swift.String, chatJid: Swift.String, status: MirrorFlySDK.MessageStatus)
  @objc @_Concurrency.MainActor(unsafe) public func getMessageGroupingPosition(currentIndex: Swift.Int) -> FlyUIKit.MessageGroupPosition
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didTapSaveContact message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didTapMessage message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didDoubleTapMessage message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didTapMultiSelect message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func baseChannelModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didLongTapMessage message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, message: MirrorFlySDK.ChatMessage, didTapReplyMessageView replyMessageView: FlyUIKit.MFUIReplyBaseMessageView)
  @objc @_Concurrency.MainActor(unsafe) public func baseChannelModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didSwipeGesture message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, didScroll scrollView: UIKit.UIScrollView)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModuleDidTapScrollToButton(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, chatForTableView tableView: UIKit.UITableView) -> MirrorFlySDK.RecentChat?
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, sentMessagesInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ChatMessage]
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, fullMessagesInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ChatMessage]
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, lastSeenIndexPathIn tableView: UIKit.UITableView) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, startingPointIn tableView: UIKit.UITableView) -> Swift.Int64?
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModule(_ listComponent: FlyUIKit.MFUIBaseChatViewModule.List, hasNextInTableView tableView: UIKit.UITableView) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func baseChatModuleDidStartTyping(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatModuleDidEndTyping(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didTapSend text: Swift.String, parentMessage: MirrorFlySDK.ChatMessage?)
  @objc @_Concurrency.MainActor(unsafe) public func baseChannelModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didTapResource type: FlyUIKit.MediaResourceType)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didChangeText text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatlModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, willChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
  @objc @_Concurrency.MainActor(unsafe) public func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, chatForInputView messageInputView: UIKit.UIView?) -> MirrorFlySDK.RecentChat?
  @objc @_Concurrency.MainActor(unsafe) public func baseChatModule(_ inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input, didTapAuidoRecord message: MirrorFlySDK.ChatMessage?)
  @objc @_Concurrency.MainActor(unsafe) public func didTapAudio()
  @objc @_Concurrency.MainActor(unsafe) open func openGallery()
  @objc @_Concurrency.MainActor(unsafe) public func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, isScrollNearBottomInChat chat: MirrorFlySDK.ChatMessage?) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @available(iOS 14, *)
  @_Concurrency.MainActor(unsafe) public func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
extension FlyUIKit.MFUIBaseChatViewParentController : FlyUIKit.MFUIBaseChatViewModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateThreeDotButton rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didTapThreeDotButton leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateVoiceCallButton rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didTapVoiceCallButton leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateVideoCallButton rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didTapVideoCallButton leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIBaseChatViewParentController : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
}
extension FlyUIKit.MFUIBaseChatViewParentController : UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentAt url: Foundation.URL)
}
extension FlyUIKit.MFUIBaseChatViewParentController : QuickLook.QLPreviewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt index: Swift.Int) -> any QuickLook.QLPreviewItem
}
extension FlyUIKit.MFUIBaseChatViewParentController : AVFAudio.AVAudioRecorderDelegate, AVFAudio.AVAudioPlayerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioRecorderDidFinishRecording(_ recorder: AVFAudio.AVAudioRecorder, successfully flag: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
}
extension FlyUIKit.MFUIBaseChatViewParentController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didTapDelete()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didTapDeleteCancel()
}
extension FlyUIKit.MFUIBaseChatViewParentController : ContactsUI.CNContactPickerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func contactPickerDidCancel(_ picker: ContactsUI.CNContactPickerViewController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func contactPicker(_ picker: ContactsUI.CNContactPickerViewController, didSelect contactProperty: Contacts.CNContactProperty)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func contactPicker(_ picker: ContactsUI.CNContactPickerViewController, didSelect contact: Contacts.CNContact)
}
extension Foundation.Date {
  public enum MFUIDateFormat : Swift.String {
    case EMMMyyyy
    case MMMddyyyy
    case EMMMdd
    case MMMdd
    case hhmma
    case hhmm
    case yyyyMMddhhmm
    case yyyyMMddhhmmss
    case ddMMMyyyy
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static func mfui_from(_ baseTimestamp: Swift.Double) -> Foundation.Date
  public func mfui_toString(format: Foundation.Date.MFUIDateFormat, localizedFormat: Swift.Bool = true) -> Swift.String
  public func mfui_toString(formatString: Swift.String, localizedFormat: Swift.Bool = true) -> Swift.String
}
public enum MFUIPhotoAccessLevel : Swift.Int, Swift.Hashable {
  case addOnly
  case readWrite
  @available(iOS 14, *)
  public var asPHAccessLevel: Photos.PHAccessLevel {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MFUIPhotoAccessibleStatus : Swift.Int, Swift.Hashable {
  case all
  case limited
  case notDetermined
  case restricted
  case denied
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LogType : Swift.UInt8 {
  case none = 0b00000000
  case error = 0b00000001
  case warning = 0b00000010
  case info = 0b00000100
  case all = 0b00000111
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol MFUIGroupInfoModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didUpdateLeftBackButton leftBack: UIKit.UIView?)
  func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didTapLeftBackButton leftItem: UIKit.UIView?)
  func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didClickProfileImage button: UIKit.UIView?)
  func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didClickAddParticipant button: UIKit.UIView?)
  func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didClickMuteSwitch button: UIKit.UISwitch)
}
extension FlyUIKit.MFUIGroupInfoModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIGroupInfoModuleHeaderDelegate)?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFGroupInfoTheme
    @objc @_Concurrency.MainActor(unsafe) public var leftBackButton: UIKit.UIButton? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var nameLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var participantLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteSwitch: UIKit.UISwitch
    @objc @_Concurrency.MainActor(unsafe) public var defaultLeftBackButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var MainImageView: UIKit.UIImageView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var addParticipantView: UIKit.UIView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteNotificationView: UIKit.UIView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteUnderLineView: UIKit.UIView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var underLineView: UIKit.UIView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var addUserImageView: UIKit.UIImageView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var addParticipantLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteNotificationLbl: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var participantStackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteNotificationStackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var imageActionButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var addParticipantsActionButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var participantViewHeightConstraint: UIKit.NSLayoutConstraint!
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIGroupInfoModuleHeaderDelegate, theme: FlyUIKit.MFGroupInfoTheme, profile: MirrorFlySDK.ProfileDetails?, memberCount: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
    @objc @_Concurrency.MainActor(unsafe) open func onClickBack()
    @objc @_Concurrency.MainActor(unsafe) open func onClickImage()
    @objc @_Concurrency.MainActor(unsafe) open func onClickAddParticipants()
    @objc @_Concurrency.MainActor(unsafe) open func onClickMuteSwitch()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUILocationContentView : FlyUIKit.MFUIBaseMediaContentView {
  @_Concurrency.MainActor(unsafe) public var widthConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) public var text: Swift.String
  @_Concurrency.MainActor(unsafe) public var backgroundColorView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var chatLocationMapView: GoogleMaps.GMSMapView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func setupSizeContraint()
  @_Concurrency.MainActor(unsafe) override open func configure(message: MirrorFlySDK.ChatMessage, position: FlyUIKit.MessagePosition, delegate: any FlyUIKit.MFUIProgressDelegate, audioViewDelegate: any FlyUIKit.MFUIAudioContentViewDelegate)
  @_Concurrency.MainActor(unsafe) open func updateReceiverImageCell()
  @_Concurrency.MainActor(unsafe) open func updateSenderImageCell()
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, size: CoreFoundation.CGSize? = nil)
  @_Concurrency.MainActor(unsafe) open func resizeImageView(by size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFContactPreviewTableCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFContactPreviewTheme
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MFUIChatViewParentModuleHeaderDelegate : FlyUIKit.MFUIBaseChatViewModuleHeaderDelegate {
}
extension FlyUIKit.MFUIChatViewParentModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : FlyUIKit.MFUIBaseChatViewModule.Header {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIChatViewParentModuleHeaderDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIChatViewParentModuleHeaderDelegate, theme: FlyUIKit.MFChatTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapLeftBarButton()
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AngleRuler : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
extension FlyUIKit.AngleRuler : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndScrollingAnimation(_: UIKit.UIScrollView)
}
public protocol MFUIUpdateProfileModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func updateProfileModule(_ headerComponent: FlyUIKit.MFUIUpdateProfileModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func updateProfileModule(_ headerComponent: FlyUIKit.MFUIUpdateProfileModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func updateProfileModule(_ headerComponent: FlyUIKit.MFUIUpdateProfileModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIUpdateProfileModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIUpdateProfileModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFUpdateProfileTheme?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIUpdateProfileModuleHeaderDelegate, theme: FlyUIKit.MFUpdateProfileTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFUpdateProfileTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
  }
}
public protocol MFUICallScreenViewModelDelegate : FlyUIKit.MFUICommonViewModelDelegate {
  func CallScreenViewModel(didupdateTime timestring: Swift.String, username: Swift.String, image: Swift.String)
  func CallScreenViewModel(didupdateAudio image: UIKit.UIImage, audioDeviceType: MirrorFlySDK.OutputType)
  func CallScreenViewModel(reloadData isRelaod: Swift.Bool, index: Swift.Int)
  func CallScreenViewModel(didUpdateUser index: Swift.Int)
}
@objc @_inheritsConvenienceInitializers open class MFUICallScreenViewModel : ObjectiveC.NSObject {
  weak public var delegate: (any FlyUIKit.MFUICallScreenViewModelDelegate)?
  public static var sharedInstance: FlyUIKit.MFUICallScreenViewModel
  public func makeCall(usersList: [Swift.String], callType: FlyUIKit.CallType, groupId: Swift.String = "", onCompletion: @escaping (_ isSuccess: Swift.Bool, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension FlyUIKit.MFUICallScreenViewModel : MirrorFlySDK.AudioManagerDelegate {
  public func audioRoutedTo(deviceName: Swift.String, audioDeviceType: MirrorFlySDK.OutputType)
}
public protocol MFUICreateChatViewModelDelegate : FlyUIKit.MFUICommonViewModelDelegate {
  func createChatViewModel(_ viewModel: FlyUIKit.MFUICreateChatViewModel, didChangeUsers contact: [MirrorFlySDK.ProfileDetails], needsToReload: Swift.Bool)
  func createChatViewModel(_ viewModel: FlyUIKit.MFUICreateChatViewModel, didCreateChat chat: MirrorFlySDK.RecentChat?)
  func createChatViewModel(_ viewModel: FlyUIKit.MFUICreateChatViewModel, didUpdateSelectedContacts selectedContacts: [MirrorFlySDK.ProfileDetails])
}
public protocol MFUICreateChatViewModelDataSource : AnyObject {
  func createChatViewModel(_ viewModel: FlyUIKit.MFUICreateChatViewModel, nextContactListForChatType chatType: FlyUIKit.ChatCreationType) -> [MirrorFlySDK.ProfileDetails]?
}
@objc @_hasMissingDesignatedInitializers open class MFUICreateChatViewModel : ObjectiveC.NSObject {
  public var chatType: FlyUIKit.ChatCreationType {
    get
  }
  public var contactList: [MirrorFlySDK.ProfileDetails] {
    get
  }
  public var contactJid: Swift.String
  public func resetPaginationConstants()
  public func getUsersList(searchTerm: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIBaseChatListViewController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MFUICommonDelegate : AnyObject {
  func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIRepyMessageInputView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageInputTheme
  @_Concurrency.MainActor(unsafe) public var replyToLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var fileMessagePreview: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var fileImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var userMessagePreview: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contactNamePreview: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var closeReplyButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mapCloseReplyButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mapView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mediaLocationMapView: GoogleMaps.GMSMapView?
  @_Concurrency.MainActor(unsafe) public var contentStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var replyLabelStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var iconCaptionStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: FlyUIKit.ReplyMessage)
  public enum Edge : Swift.Int {
    case vertical
    case leading
    case trailing
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MFUIFloatyManager : ObjectiveC.NSObject {
  open var button: FlyUIKit.MFUIFloaty {
    get
  }
  @objc override dynamic public init()
  open var font: UIKit.UIFont {
    get
    set
  }
  open var rtlMode: Swift.Bool {
    get
    set
  }
  open func show(_ animated: Swift.Bool = true)
  open func hide(_ animated: Swift.Bool = true)
  open func toggle(_ animated: Swift.Bool = true)
  open var hidden: Swift.Bool {
    get
  }
  @objc deinit
}
public protocol MFUIUserProfileModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func userProfileModule(_ listComponent: FlyUIKit.MFUIUserProfileModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func didClickHeaderBackBtn()
  func didClickHeaderImageBtn()
  func didClickHeaderMuteSwitchBtn(switchState: UIKit.UISwitch)
}
extension FlyUIKit.MFUIUserProfileModule {
  @_inheritsConvenienceInitializers @objc(MFUIUserProfileModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFUserProfileTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIUserProfileModuleListDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var userProfileArr: [FlyUIKit.UserProfileData]
    @objc @_Concurrency.MainActor(unsafe) public var menuItemsArr: [FlyUIKit.UserProfileData]
    @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIUserProfileModule.Header?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIUserProfileModuleListDelegate, theme: FlyUIKit.MFUserProfileTheme, profile: MirrorFlySDK.ProfileDetails?, lastSeen: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFUserProfileTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(profileCell: FlyUIKit.MFUserProfileCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func registerMenu(profileCell: FlyUIKit.MFUserProfileMenuCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ profilecell: FlyUIKit.MFUserProfileCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func configureMenuCell(_ profilecell: FlyUIKit.MFUserProfileMenuCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUIUserProfileModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
extension FlyUIKit.MFUIUserProfileModule.List : FlyUIKit.MFUIUserProfileModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func UserProfileModule(_ headerComponent: FlyUIKit.MFUIUserProfileModule.Header, didUpdateLeftBackButton leftBack: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func UserProfileModule(_ headerComponent: FlyUIKit.MFUIUserProfileModule.Header, didTapLeftBackButton leftItem: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func UserProfileModule(_ headerComponent: FlyUIKit.MFUIUserProfileModule.Header, didClickProfileImage button: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func UserProfileModule(_ headerComponent: FlyUIKit.MFUIUserProfileModule.Header, didClickMuteSwitch button: UIKit.UISwitch)
}
extension Swift.String {
  public func getAcronyms(separator: Swift.String = "") -> Swift.String
}
public protocol MFUILocationModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func locationModule(_ headerComponent: FlyUIKit.MFUILocationModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func locationModule(_ headerComponent: FlyUIKit.MFUILocationModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func locationModule(_ headerComponent: FlyUIKit.MFUILocationModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUILocationModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUILocationModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFLocationTheme?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUILocationModuleHeaderDelegate, theme: FlyUIKit.MFLocationTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFLocationTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIDeleteMessageView : FlyUIKit.MFUIBaseMediaContentView {
  @_Concurrency.MainActor(unsafe) public var documentView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var progressContentView: FlyUIKit.MFUIProgressContentView
  @_Concurrency.MainActor(unsafe) public var deletedLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var deleteStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func configure(message: MirrorFlySDK.ChatMessage, position: FlyUIKit.MessagePosition, delegate: any FlyUIKit.MFUIProgressDelegate, audioViewDelegate: any FlyUIKit.MFUIAudioContentViewDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol MFUIRecentChatListModuleListtDelegate : FlyUIKit.MFUICommonDelegate {
  func chatListModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func chatListModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  func chatListModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, willDisplay indexPath: Foundation.IndexPath)
}
public protocol MFUIRecentChatListModuleListtDataSource : AnyObject {
  func chatListModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, chatsInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.RecentChat]?
  func chatListProfileModule(_ listComponent: FlyUIKit.MFUIRecentChatListModule.List, chatsInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
}
extension FlyUIKit.MFUIRecentChatListModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var emptyLabel: UIKit.UILabel
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var chatCell: FlyUIKit.MFUIBaseChatCell?
    @objc @_Concurrency.MainActor(unsafe) public var customChatCell: FlyUIKit.MFUIBaseChatCell?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatListTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIRecentChatListModuleListtDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUIRecentChatListModuleListtDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var chatList: [MirrorFlySDK.RecentChat]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var filteredContactList: [MirrorFlySDK.ProfileDetails]? {
      @objc get
    }
    @available(*, unavailable, renamed: "MFUIRecentChatListModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUIRecentChatListModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIRecentChatListModuleListtDelegate, dataSource: any FlyUIKit.MFUIRecentChatListModuleListtDataSource, theme: FlyUIKit.MFChatListTheme, viewmodel: FlyUIKit.MFUIRecentChatListViewModel? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFChatListTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(chatCell: FlyUIKit.MFUIBaseChatCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ chatCell: FlyUIKit.MFUIBaseChatCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @objc @_Concurrency.MainActor(unsafe) public func setupSearchStatus(viewModel: FlyUIKit.MFUIRecentChatListViewModel? = nil, serachString: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func getMessages(messageId: Swift.String) -> MirrorFlySDK.ChatMessage
    @objc @_Concurrency.MainActor(unsafe) public func getMessageOfId(messageId: Swift.String, completionHandler: @escaping (MirrorFlySDK.ChatMessage?) -> Swift.Void)
  }
}
extension FlyUIKit.MFUIRecentChatListModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUserProfileCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFUserProfileTheme
  @objc @_Concurrency.MainActor(unsafe) public var HstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var VstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configUpdateCell(profile: FlyUIKit.UserProfileData)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUserProfileMenuCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFUserProfileTheme
  @objc @_Concurrency.MainActor(unsafe) public var HstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var VstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configUpdateCell(profile: FlyUIKit.UserProfileData)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MFUITranslateModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func translateModule(_ headerComponent: FlyUIKit.MFUITranslateModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func translateModule(_ headerComponent: FlyUIKit.MFUITranslateModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func translateModule(_ headerComponent: FlyUIKit.MFUITranslateModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUITranslateModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUITranslateModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFTranslateTheme?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUITranslateModuleHeaderDelegate, theme: FlyUIKit.MFTranslateTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFTranslateTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
  }
}
@objc(BSImagePickerController) @objcMembers @_Concurrency.MainActor(unsafe) open class ImagePickerController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) weak public var imagePickerDelegate: (any FlyUIKit.ImagePickerControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var settings: FlyUIKit.Settings
  @objc @_Concurrency.MainActor(unsafe) public var doneButton: UIKit.UIBarButtonItem
  @objc @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIBarButtonItem
  @objc @_Concurrency.MainActor(unsafe) public var albumButton: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) public var selectedAssets: [Photos.PHAsset] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var doneButtonTitle: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public init(selectedAssets: [Photos.PHAsset] = [])
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) public func deselect(asset: Photos.PHAsset)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUIUpdateProfileViewController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFUpdateProfileTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIUpdateProfileModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUIUpdateProfileModule.List?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc deinit
}
extension FlyUIKit.MFUIUpdateProfileViewController : FlyUIKit.MFUIUpdateProfileModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateProfileModule(_ headerComponent: FlyUIKit.MFUIUpdateProfileModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateProfileModule(_ headerComponent: FlyUIKit.MFUIUpdateProfileModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateProfileModule(_ headerComponent: FlyUIKit.MFUIUpdateProfileModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUIUpdateProfileViewController : FlyUIKit.MFUIUpdateProfileModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateTextfieldContent(index: Swift.Int, content: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickCamerButton()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickProfileButton()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickSaveButton()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateProfileModule(_ listComponent: FlyUIKit.MFUIUpdateProfileModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension FlyUIKit.MFUIUpdateProfileViewController : FlyUIKit.MFUIActionSheetDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
}
extension FlyUIKit.MFUIUpdateProfileViewController : FlyUIKit.MFUIGallerydelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func passSelectedAssests(obj: [Photos.PHAsset])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func passCameraImage(img: UIKit.UIImage)
}
extension FlyUIKit.MFUIUpdateProfileViewController : FlyUIKit.CropperViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func cropperDidConfirm(_ cropper: FlyUIKit.CropperViewController, state: FlyUIKit.CropperState?)
}
extension FlyUIKit.MFUIUpdateProfileViewController : MirrorFlySDK.ConnectionEventDelegate {
  @_Concurrency.MainActor(unsafe) public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onReconnecting()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onDisconnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnectionNotAuthorized()
}
extension FlyUIKit.MFUIUpdateProfileViewController : MirrorFlySDK.ProfileEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userCameOnline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userWentOffline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func myProfileUpdated()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersProfilesFetched()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func hideUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUILanguageCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFLanguageTheme
  @_Concurrency.MainActor(unsafe) open func configCell(theme: FlyUIKit.MFLanguageTheme, languageModel: FlyUIKit.LanguageModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MFUILoading {
  public static func start(isContact: Swift.Bool = false)
  public static func stop()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MFUIUtils {
  @objc deinit
}
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func presentImagePicker(_ imagePicker: FlyUIKit.ImagePickerController, animated: Swift.Bool = true, select: ((_ asset: Photos.PHAsset) -> Swift.Void)?, deselect: ((_ asset: Photos.PHAsset) -> Swift.Void)?, cancel: (([Photos.PHAsset]) -> Swift.Void)?, finish: (([Photos.PHAsset]) -> Swift.Void)?, completion: (() -> Swift.Void)? = nil)
}
extension FlyUIKit.ImagePickerController {
  @objc @_Concurrency.MainActor(unsafe) public static var currentAuthorization: Photos.PHAuthorizationStatus {
    @objc get
  }
}
extension FlyUIKit.ImagePickerController : FlyUIKit.ImagePickerControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didSelectAsset asset: Photos.PHAsset)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didDeselectAsset asset: Photos.PHAsset)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didFinishWithAssets assets: [Photos.PHAsset])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didCancelWithAssets assets: [Photos.PHAsset])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didReachSelectionLimit count: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUICallLogScreenCell : FlyUIKit.MFUITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var callImageAndTimeStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var callStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var verticalStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var groupProfileView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var imgOne: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var imgTwo: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var imgThree: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var imgFour: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var callStatusImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var callImageBtn: UIKit.UIButton? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contactNamelabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var callDateandTimeLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var callDurationLbl: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var plusCountLbl: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userIdLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var checkBox: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var separateView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallLogTheme
  @_Concurrency.MainActor(unsafe) public var type: FlyUIKit.ContactListType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(callLog: MirrorFlySDK.CallLog, searchText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MFUIStackView : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public init(axis: UIKit.NSLayoutConstraint.Axis = .horizontal, alignment: UIKit.UIStackView.Alignment = .fill, spacing: CoreFoundation.CGFloat = 0.0)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUITranslateCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFTranslateTheme
  @objc @_Concurrency.MainActor(unsafe) public var checkedImage: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var rightArrowImage: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var tapGestureHandler: ((_ tap: UIKit.UITapGestureRecognizer) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var translateLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var descriptionLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var chooseTranslateLbl: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var languageNameLbl: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var doubleLbl: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var languageVstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var chooseLanguageHstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var translateVstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var HstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var languageVstackTopConstraint: UIKit.NSLayoutConstraint
  @objc @_Concurrency.MainActor(unsafe) public var rightArrowHeightConstraint: UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configUpdateCell(theme: FlyUIKit.MFTranslateTheme, translate: FlyUIKit.TranslateDetail)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MFUICaptionInputViewDelegate : AnyObject {
  func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didSelectSend text: Swift.String)
  func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didSelectResource type: FlyUIKit.MediaResourceType)
  func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didChangeText text: Swift.String)
  func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didSelectAdd text: Swift.String)
  func captionInputViewDidStartTyping()
  func captionInputViewDidEndTyping()
  func messageInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  func messageInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didChangeSelection range: Foundation.NSRange)
}
extension FlyUIKit.MFUICaptionInputViewDelegate {
  public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didSelectSend text: Swift.String)
  public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didSelectResource type: FlyUIKit.MediaResourceType)
  public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didChangeText text: Swift.String)
  public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didSelectAdd text: Swift.String)
  public func captionInputViewDidStartTyping()
  public func captionInputViewDidEndTyping()
  public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, shouldInteractWith url: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didChangeSelection range: Foundation.NSRange)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class MFUICaptionInputView : FlyUIKit.MFUIView, FlyUIKit.MFUIActionSheetDelegate, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) public var addButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textView: UIKit.UITextView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var sendButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var inputHStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leadingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var trailingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var textViewMinHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var textViewMaxHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var showsSendButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var textViewLeadingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var textViewTrailingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var layoutInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) public var defaultAttributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var mentionedAttributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @available(*, unavailable, renamed: "MFUIMessageInputView()")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var mode: FlyUIKit.MFUIMessageInputMode {
    get
  }
  @_Concurrency.MainActor(unsafe) open func setMode(_ mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setErrorState()
  @_Concurrency.MainActor(unsafe) public func endTypingMode()
  @_Concurrency.MainActor(unsafe) public func setupTextViewHeight(textView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func updateTextViewHeight()
  @objc @_Concurrency.MainActor(unsafe) open func onClickAddButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickSendButton(_ sender: Any)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) public func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MFUIGlobals {
  public static var isMessageGroupingEnabled: Swift.Bool
  public static var photoLibraryAccessLevel: FlyUIKit.MFUIPhotoAccessLevel
  @available(iOS 14, *)
  public static var isPHPickerEnabled: Swift.Bool
  public static var imageResizingSize: CoreFoundation.CGSize
  public static var isImageCompressionEnabled: Swift.Bool
  public static var imageCompressionRate: CoreFoundation.CGFloat
  @objc deinit
}
extension FlyUIKit.ImagePickerController : UIKit.UIAdaptivePresentationControllerDelegate {
  @available(iOS 13, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerShouldDismiss(_ presentationController: UIKit.UIPresentationController) -> Swift.Bool
  @available(iOS 13, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
@_hasMissingDesignatedInitializers public class ChatUtils {
  public static func isMessagesAvailableFor(jid: Swift.String) -> Swift.Bool
  public static func getMentionTextContent(message: Swift.String, uiLabel: UIKit.UILabel? = nil, isMessageSentByMe: Swift.Bool, mentionedUsers: [Swift.String], searchedText: Swift.String? = "") -> Foundation.NSMutableAttributedString
  @objc deinit
}
extension Foundation.NSMutableAttributedString {
  @discardableResult
  public func addAttributes(_ font: UIKit.UIFont, color: UIKit.UIColor, range: Foundation.NSRange) -> Foundation.NSMutableAttributedString
  @discardableResult
  public func addBGAttributes(_ font: UIKit.UIFont, color: UIKit.UIColor, range: Foundation.NSRange) -> Foundation.NSMutableAttributedString
}
@_hasMissingDesignatedInitializers public class MFUIBarButtonItem {
  public static func backButton(vc: Any, selector: ObjectiveC.Selector) -> UIKit.UIBarButtonItem
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFEmptyTableCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageInfoTheme
  @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configCell(section: Swift.Int, theme: FlyUIKit.MFMessageInfoTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension FlyUIKit.MFUIBaseChatViewParentController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func registerKeyboardNotifications()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addGestureHideKeyboard()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func keyboardWillShow(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func keyboardWillHide(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dismissKeyboard()
}
public enum MFUIForwardType : Swift.String {
  case Contacts
  case Groups
  case Recent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol MFUIForwardModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func forwardModule(_ listComponent: FlyUIKit.MFUIForwardModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func forwardModule(_ listComponent: FlyUIKit.MFUIForwardModule.List, _ tap: UIKit.UITapGestureRecognizer, indexPath: Foundation.IndexPath)
  func forwardModule(_ listComponent: FlyUIKit.MFUIForwardModule.List, willDisplay indexPath: Foundation.IndexPath)
  func forwardModule(_ listComponent: FlyUIKit.MFUIForwardModule.List, selectedList: [Swift.String])
}
extension FlyUIKit.MFUIForwardModule {
  @_inheritsConvenienceInitializers @objc(MFUIForwardModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var forwardCell: FlyUIKit.MFUIForwardCell?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFForwardTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIForwardModuleListDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var showLoading: Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func resetGroup()
    @objc @_Concurrency.MainActor(unsafe) open func resetRecent()
    @objc @_Concurrency.MainActor(unsafe) open func resetContacts()
    @objc @_Concurrency.MainActor(unsafe) open func search(searchText: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) open func clearSearch()
    @objc @_Concurrency.MainActor(unsafe) open func configureGroup(recentChat: [MirrorFlySDK.RecentChat])
    @objc @_Concurrency.MainActor(unsafe) open func configureRecent(recentChat: [MirrorFlySDK.RecentChat])
    @objc @_Concurrency.MainActor(unsafe) open func configureContact(contacts: [MirrorFlySDK.ProfileDetails])
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIForwardModuleListDelegate, theme: FlyUIKit.MFForwardTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFForwardTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(chatCell: FlyUIKit.MFUIForwardCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ forwardCell: FlyUIKit.MFUIForwardCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @objc @_Concurrency.MainActor(unsafe) public func updateEmptyView(type: FlyUIKit.EmptyViewType)
  }
}
extension FlyUIKit.MFUIForwardModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
extension FlyUIKit.MFUIForwardModule.List : FlyUIKit.MFUIEmptyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIContactCell : FlyUIKit.MFUITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userNickname: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var nicknameLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userIdLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var checkBox: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var operatorLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var separateView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatCellTheme
  @_Concurrency.MainActor(unsafe) public var type: FlyUIKit.ContactListType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(type: FlyUIKit.ContactListType, contact: MirrorFlySDK.ProfileDetails, searchString: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum MFUIFloatyOpenAnimationType : Swift.Int {
  case pop
  case fade
  case slideLeft
  case slideUp
  case slideDown
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MFUIFloatyVerticalDirection : Swift.Int {
  case up
  case down
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIFloaty : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var items: [FlyUIKit.MFUIFloatyItem]
  @objc @_Concurrency.MainActor(unsafe) open var size: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var paddingX: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var paddingY: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) open var autoCloseOnTap: Swift.Bool
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) open var handleFirstItemDirectly: Swift.Bool
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) open var relativeToSafeArea: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var rotationDegrees: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var animationSpeed: Swift.Double
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var buttonColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var buttonShadowColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var buttonImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var plusColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var overlayColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemSpace: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemButtonColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemTitleColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemImageColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var hasShadow: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemShadowColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var closed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDraggable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var respondsToKeyboard: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var openAnimationType: FlyUIKit.MFUIFloatyOpenAnimationType
  @objc @_Concurrency.MainActor(unsafe) open var verticalDirection: FlyUIKit.MFUIFloatyVerticalDirection
  @objc @_Concurrency.MainActor(unsafe) open var friendlyTap: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var sticky: Swift.Bool
  @_Concurrency.MainActor(unsafe) public static var global: FlyUIKit.MFUIFloatyManager {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var fabDelegate: (any FlyUIKit.MFUIFloatyDelegate)?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(size: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open func open()
  @objc @_Concurrency.MainActor(unsafe) open func close()
  @objc @_Concurrency.MainActor(unsafe) open func toggle()
  @objc @_Concurrency.MainActor(unsafe) open func addItem(item: FlyUIKit.MFUIFloatyItem)
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(title: Swift.String, titlePosition: FlyUIKit.MFUIFloatyItemLabelPositionType = .left) -> FlyUIKit.MFUIFloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(title: Swift.String) -> FlyUIKit.MFUIFloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(_ title: Swift.String, icon: UIKit.UIImage?, titlePosition: FlyUIKit.MFUIFloatyItemLabelPositionType = .left) -> FlyUIKit.MFUIFloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(_ title: Swift.String, icon: UIKit.UIImage?) -> FlyUIKit.MFUIFloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(title: Swift.String, handler: @escaping ((FlyUIKit.MFUIFloatyItem) -> Swift.Void)) -> FlyUIKit.MFUIFloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(title: Swift.String, titlePosition: FlyUIKit.MFUIFloatyItemLabelPositionType = .left, handler: @escaping ((FlyUIKit.MFUIFloatyItem) -> Swift.Void)) -> FlyUIKit.MFUIFloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(_ title: Swift.String, icon: UIKit.UIImage?, handler: @escaping ((FlyUIKit.MFUIFloatyItem) -> Swift.Void)) -> FlyUIKit.MFUIFloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(_ title: Swift.String, icon: UIKit.UIImage?, titlePosition: FlyUIKit.MFUIFloatyItemLabelPositionType = .left, handler: @escaping ((FlyUIKit.MFUIFloatyItem) -> Swift.Void)) -> FlyUIKit.MFUIFloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(icon: UIKit.UIImage?) -> FlyUIKit.MFUIFloatyItem
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func addItem(icon: UIKit.UIImage?, handler: @escaping ((FlyUIKit.MFUIFloatyItem) -> Swift.Void)) -> FlyUIKit.MFUIFloatyItem
  @objc @_Concurrency.MainActor(unsafe) open func removeItem(item: FlyUIKit.MFUIFloatyItem)
  @objc @_Concurrency.MainActor(unsafe) open func removeItem(index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
}
extension FlyUIKit.MFUIFloaty {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set(newLabel)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityHint: Swift.String? {
    @objc get
    @objc set(newHint)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityValue: Swift.String? {
    @objc get
    @objc set(newHint)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
}
public protocol MFUIProgressDelegate {
  func onDownloadMedia()
  func onCloseMedia()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIProgressContentView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var progressType: FlyUIKit.ProgressType
  @_Concurrency.MainActor(unsafe) public var fileSizeOrRetryView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var closeImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var progressingView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var downloadButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public var closeButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public var progressBar: NicoProgress.NicoProgressBar
  @_Concurrency.MainActor(unsafe) public var sizeLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var widthConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) public var text: Swift.String
  @_Concurrency.MainActor(unsafe) public var progressViewDelegate: (any FlyUIKit.MFUIProgressDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func setupSizeContraint()
  @_Concurrency.MainActor(unsafe) open func updateReceiverImageCell(message: MirrorFlySDK.ChatMessage)
  @_Concurrency.MainActor(unsafe) open func updateSenderImageCell(message: MirrorFlySDK.ChatMessage)
  @objc @_Concurrency.MainActor(unsafe) open func updateReceiverCellUI(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func closeAction(_ sender: Any)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol MFUIRecentChatListModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didUpdateCallHistoryRightItem rightItem: UIKit.UIBarButtonItem?)
  func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  func ChatListModule(_ headerComponent: FlyUIKit.MFUIRecentChatListModule.Header, didTapCallHistoryRightItem rightItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIRecentChatListModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIRecentChatListModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var callHistoryRightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatListTheme?
    @available(*, unavailable, renamed: "MFUIRecentChatListModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUIRecentChatListModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIRecentChatListModuleHeaderDelegate, theme: FlyUIKit.MFChatListTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFChatListTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapCallHistoryButton()
  }
}
public protocol MFUIImageEditModuleeHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func imageEditModule(_ headerComponent: FlyUIKit.MFUIImageEditModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func imageEditModule(_ headerComponent: FlyUIKit.MFUIImageEditModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func imageEditModule(_ headerComponent: FlyUIKit.MFUIImageEditModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func imageEditModule(_ headerComponent: FlyUIKit.MFUIImageEditModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIImageEditModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIImageEditModuleeHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatTheme?
    @available(*, unavailable, renamed: "MFUIImageEditModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUIImageEditModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIImageEditModuleeHeaderDelegate, theme: FlyUIKit.MFChatTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFChatTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
  }
}
public class MFUIDeleteCellParams : FlyUIKit.MFUIBaseMessageCellParams {
  public var userMessage: MirrorFlySDK.ChatMessage? {
    get
  }
  final public let useReaction: Swift.Bool
  final public let withTextView: Swift.Bool
  public init(message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool, useMessagePosition: Swift.Bool, groupPosition: FlyUIKit.MessageGroupPosition = .none, receiptState: FlyUIKit.MFUIMessageReceiptState = .none, useReaction: Swift.Bool = false, withTextView: Swift.Bool, multiSelect: Swift.Bool, messageMenuItem: FlyUIKit.MessageMenuItem, isMessageSelected: Swift.Bool)
  @objc deinit
}
public class MFUIImageEditModule {
  public var headerComponent: (FlyUIKit.MFUIImageEditModule.Header)? {
    get
    set
  }
  public var collectionComponent: (FlyUIKit.MFUIImageEditModule.Collection)? {
    get
    set
  }
  public var inputComponent: (FlyUIKit.MFUIImageEditModule.Input)? {
    get
    set
  }
  public init(headerComponent: (FlyUIKit.MFUIImageEditModule.Header)? = nil, collectionComponent: (FlyUIKit.MFUIImageEditModule.Collection)? = nil, inputComponent: (FlyUIKit.MFUIImageEditModule.Input)? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUICallLogViewController : FlyUIKit.MFBaseViewController, FlyUIKit.MFUICallLogModuleHeaderDelegate, FlyUIKit.MFUICallLogModuleListDataSource, FlyUIKit.MFUICallLogModuleListDelegate {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallLogTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUICallLogModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: FlyUIKit.MFUICallLogModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var callLogManager: MirrorFlySDK.CallLogManager
  @_Concurrency.MainActor(unsafe) public var seletedCallLog: [MirrorFlySDK.CallLog]
  @objc @_Concurrency.MainActor(unsafe) public var selectedProfilesJid: [Swift.String]
  @objc @_Concurrency.MainActor(unsafe) public var groupName: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var groupID: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var message: MirrorFlySDK.ChatMessage?
  @objc @_Concurrency.MainActor(unsafe) public var callLogVM: FlyUIKit.MFUICallLogViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var searchbarView: FlyUIKit.MFUISearchBarView
  @available(*, unavailable, renamed: "MFUICallParticipantViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "MFUICallParticipantViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(contacts: [MirrorFlySDK.ProfileDetails]? = nil, type: FlyUIKit.ChatCreationType = .newSinglehChat)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func callLogListModule(_ listComponent: FlyUIKit.MFUICallLogModule.List, callLogMemberInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.CallLog]?
  @objc @_Concurrency.MainActor(unsafe) public func callLogModule(_ listComponent: FlyUIKit.MFUICallLogModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func didClickCallButton(indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
}
extension FlyUIKit.MFUICallLogViewController : MirrorFlySDK.ProfileEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userCameOnline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userWentOffline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func myProfileUpdated()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersProfilesFetched()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func hideUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
extension FlyUIKit.MFUICallLogViewController : MirrorFlySDK.ConnectionEventDelegate {
  @_Concurrency.MainActor(unsafe) public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onReconnecting()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onDisconnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnectionNotAuthorized()
}
extension FlyUIKit.MFUICallLogViewController : MirrorFlySDK.AdminBlockDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didBlockOrUnblockContact(userJid: Swift.String, isBlocked: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didBlockOrUnblockSelf(userJid: Swift.String, isBlocked: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didBlockOrUnblockGroup(groupJid: Swift.String, isBlocked: Swift.Bool)
}
extension FlyUIKit.MFUICallLogViewController : FlyUIKit.MFUISearchBarDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func passChangeTextString(searchbar: UIKit.UISearchBar, text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickCancelSearch()
}
public class MFUIAdminMessageCellParams : FlyUIKit.MFUIBaseMessageCellParams {
  public var adminMessage: MirrorFlySDK.ChatMessage? {
    get
  }
  public init(message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool)
  @objc deinit
}
public protocol MFUIGroupCallScreenModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func groupCallScreenModule(_ listComponent: FlyUIKit.MFUICallScreenModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func groupCallScreenModule(_ listComponent: FlyUIKit.MFUICallScreenModule.List, didTapLeftBackButton leftItem: UIKit.UIView?)
  func groupCallScreenModule(_ listComponent: FlyUIKit.MFUICallScreenModule.List, RemotetapGeture sender: UIKit.UITapGestureRecognizer)
}
public protocol MFUIGroupCallScreenModuleListDataSource : AnyObject {
  func groupCallScreenModuleListModule(_ listComponent: FlyUIKit.MFUICallScreenModule.List, groupCallMemberInTableView collectionView: UIKit.UICollectionView) -> [FlyUIKit.CallMember]?
}
extension FlyUIKit.MFUICallScreenModule {
  @_inheritsConvenienceInitializers @objc(MFUICallScreenModule) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIGroupCallScreenModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUIGroupCallScreenModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var groupMembers: [FlyUIKit.CallMember]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUICallScreenModule.Header?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIGroupCallScreenModuleListDelegate, dataSource: any FlyUIKit.MFUIGroupCallScreenModuleListDataSource, theme: FlyUIKit.MFCallScreenTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallScreenTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @_Concurrency.MainActor(unsafe) public func convertCallStatus(status: MirrorFlySDK.CALLSTATUS?) -> FlyUIKit.CallStatus
    @objc @_Concurrency.MainActor(unsafe) open func onClickBack()
  }
}
extension FlyUIKit.MFUICallScreenModule.List : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @objc @_Concurrency.MainActor(unsafe) dynamic open func pictureInPictureControllerWillStartPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func pictureInPictureControllerDidStopPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func pictureInPictureController(_ pictureInPictureController: AVKit.AVPictureInPictureController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
extension FlyUIKit.MFUICallScreenModule.List : FlyUIKit.MFUICallScreenModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ headerComponent: FlyUIKit.MFUICallScreenModule.Header, didUpdateLeftBackButton leftBack: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ headerComponent: FlyUIKit.MFUICallScreenModule.Header, didTapLeftBackButton leftItem: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func CallScreenModule(_ headerComponent: FlyUIKit.MFUICallScreenModule.Header, didTapInviteParticipant inviteParticipantItem: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIBaseMessageCell : FlyUIKit.MFUITableViewCell, FlyUIKit.MFUIMessageCellProtocol {
  @objc @_Concurrency.MainActor(unsafe) public var message: MirrorFlySDK.ChatMessage
  @objc @_Concurrency.MainActor(unsafe) public var position: FlyUIKit.MessagePosition
  @objc @_Concurrency.MainActor(unsafe) public var groupPosition: FlyUIKit.MessageGroupPosition
  @objc @_Concurrency.MainActor(unsafe) public var receiptState: FlyUIKit.MFUIMessageReceiptState
  @objc @_Concurrency.MainActor(unsafe) public var label: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var messageContentView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var dateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageCellTheme
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: FlyUIKit.MFUIBaseMessageCellParams)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class MFUIMediaMessageCellParams : FlyUIKit.MFUIBaseMessageCellParams {
  public var mediaMessage: MirrorFlySDK.ChatMessage? {
    get
  }
  public init(message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool, useMessagePosition: Swift.Bool, groupPosition: FlyUIKit.MessageGroupPosition = .none, receiptState: FlyUIKit.MFUIMessageReceiptState = .none, multiSelect: Swift.Bool, messageMenuItem: FlyUIKit.MessageMenuItem, isMessageSelected: Swift.Bool = false)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIContactContentView : FlyUIKit.MFUIBaseMediaContentView {
  @_Concurrency.MainActor(unsafe) public var contactIcon: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var contactName: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var fileStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func configure(message: MirrorFlySDK.ChatMessage, position: FlyUIKit.MessagePosition, delegate: any FlyUIKit.MFUIProgressDelegate, audioViewDelegate: any FlyUIKit.MFUIAudioContentViewDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol MFUIBaseChatViewModelDataSource : AnyObject {
  func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, isScrollNearBottomInChat chat: MirrorFlySDK.ChatMessage?) -> Swift.Bool
}
public protocol MFUIBaseChatViewModelDelegate : FlyUIKit.MFUICommonViewModelDelegate {
  func didUpdatedUserProfile(jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel?, didChangeChat chatMessage: MirrorFlySDK.ChatMessage?)
  func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, didChangeMessageList messages: [MirrorFlySDK.ChatMessage], needsToReload: Swift.Bool, initialLoad: Swift.Bool)
  func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, shouldDismissForChat chatMessage: MirrorFlySDK.ChatMessage?)
  func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, messageId: Swift.String, chatJid: Swift.String, status: MirrorFlySDK.MessageStatus)
  func baseChatViewModel(_ viewModel: FlyUIKit.MFUIBaseChatViewModel, reloadData chatMessage: [MirrorFlySDK.ChatMessage])
  func baseChatViewModel(_ scrollLogicIndexPath: Foundation.IndexPath)
  func baseChatViewModel(reloadIndex: Swift.Int)
  func baseChatViewModel(_ indexPath: Foundation.IndexPath, messageId: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class MFUIBaseChatViewModel : ObjectiveC.NSObject {
  public var chat: MirrorFlySDK.RecentChat? {
    get
  }
  public var profile: MirrorFlySDK.ProfileDetails? {
    get
  }
  public var jid: Swift.String? {
    get
  }
  public var startingPoint: Swift.Int64? {
    get
  }
  public var fullMessageList: [MirrorFlySDK.ChatMessage] {
    get
  }
  public var parentMessage: MirrorFlySDK.ChatMessage? {
    get
  }
  public var chatMessage: MirrorFlySDK.ChatMessage? {
    get
  }
  public var lastSeen: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  public func loadChat(initialLoad: Swift.Bool)
  public func refreshChat()
  public func loadInitialMessages(startingPoint: Swift.Int64?, showIndicator: Swift.Bool, initialMessages: [MirrorFlySDK.ChatMessage]?)
  public func loadPrevMessages()
  public func loadNextMessages()
  public func clearConversation(clearChatExceptStarred: Swift.Bool, completionHandler: @escaping MirrorFlySDK.FlyCompletionHandler)
  public func updateTranslationMessage(messageId: Swift.String)
  public func deleteMessageForMe(messageIdList: [Swift.String], completionHandler: @escaping MirrorFlySDK.FlyCompletionHandler)
  public func deleteMessageForEveryOne(messageIdList: [Swift.String], completionHandler: @escaping MirrorFlySDK.FlyCompletionHandler)
  public func checkMessagesAvailable() -> Swift.Bool
  public func reloadMessageList()
  public func createMessageMenuTypes(_ cell: UIKit.UITableViewCell, message: MirrorFlySDK.ChatMessage) -> [FlyUIKit.MessageMenuItem]?
}
public protocol MFUIChatViewParentModuleInputDelegate : FlyUIKit.MFUIBaseChatViewModuleInputDelegate {
  func chatViewModule(_ inputComponent: FlyUIKit.MFUIChatViewParentModule.Input, didTapSend text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String], parentMessage: MirrorFlySDK.ChatMessage?)
  func chatViewModule(_ inputComponent: FlyUIKit.MFUIChatViewParentModule.Input, didPickFileData fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String, parentMessage: MirrorFlySDK.ChatMessage?)
}
public protocol MFUIChatViewParentModuleInpuDataSource : FlyUIKit.MFUIBaseChatViewModuleInputDataSource {
}
extension FlyUIKit.MFUIChatViewParentModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Input : FlyUIKit.MFUIBaseChatViewModule.Input {
    @objc @_Concurrency.MainActor(unsafe) public var chat: MirrorFlySDK.RecentChat? {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIChatViewParentModuleInputDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUIChatViewParentModuleInpuDataSource)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIChatViewParentModuleInputDelegate, dataSource: any FlyUIKit.MFUIChatViewParentModuleInpuDataSource, theme: FlyUIKit.MFChatTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override open func updateMessageInputMode(_ mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage? = nil)
    @_Concurrency.MainActor(unsafe) @objc override open func updateMessageInputModeState()
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didSelectSend text: Swift.String)
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didTapAudioRecord message: MirrorFlySDK.ChatMessage?)
    @objc deinit
  }
}
@objc @objcMembers public class AssetStore : ObjectiveC.NSObject {
  @objc public var assets: [Photos.PHAsset] {
    get
  }
  @objc public init(assets: [Photos.PHAsset] = [])
  @objc public var count: Swift.Int {
    @objc get
  }
  @objc deinit
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public static func mfui_loadNib() -> UIKit.UINib
  @objc @_Concurrency.MainActor(unsafe) public static func mfui_loadViewFromNib() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func roundCorners(corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public var viewWidth: CoreFoundation.CGFloat {
    get
  }
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func mfui_constraint(equalTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func mfui_constraint_equalTo(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func mfui_constraint_greaterThan(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func mfui_constraint(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func mfui_constraint(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func mfui_constraint_lessThan(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
}
public protocol MFUIGroupInfoModuleListDataSource : AnyObject {
  func groupMemberListModule(_ listComponent: FlyUIKit.MFUIGroupInfoModule.List, groupMemberInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.GroupParticipantDetail]?
}
public protocol MFUIGroupInfoModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func groupInfoModule(_ listComponent: FlyUIKit.MFUIGroupInfoModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func didClickHeaderBackBtn()
  func didClickHeaderImageBtn()
  func didClickHeaderAddPariticpantBtn()
  func didClickHeaderMuteSwitchBtn(switchState: UIKit.UISwitch)
}
extension FlyUIKit.MFUIGroupInfoModule {
  @_inheritsConvenienceInitializers @objc(MFUIGroupInfoModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFGroupInfoTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIGroupInfoModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUIGroupInfoModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var groupMembers: [MirrorFlySDK.GroupParticipantDetail]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIGroupInfoModule.Header?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIGroupInfoModuleListDelegate, dataSource: any FlyUIKit.MFUIGroupInfoModuleListDataSource, theme: FlyUIKit.MFGroupInfoTheme, profile: MirrorFlySDK.ProfileDetails?)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFGroupInfoTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(groupInfoCell: FlyUIKit.MFUIGroupInfoCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(groupOptionInfoCell: FlyUIKit.MFUIGroupOptionInfoCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(viewMedia: FlyUIKit.MFUIGroupOptionViewMediaInfoCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureInfoCell(_ profilecell: FlyUIKit.MFUIGroupInfoCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func configureOptionInfoCell(_ profilecell: FlyUIKit.MFUIGroupOptionInfoCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func configureViewMediaCell(_ profilecell: FlyUIKit.MFUIGroupOptionViewMediaInfoCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUIGroupInfoModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
extension FlyUIKit.MFUIGroupInfoModule.List : FlyUIKit.MFUIGroupInfoModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didUpdateLeftBackButton leftBack: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didTapLeftBackButton leftItem: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didClickProfileImage button: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didClickAddParticipant button: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didClickMuteSwitch button: UIKit.UISwitch)
}
public class MFUIChatViewParentModule {
  public var headerComponent: (FlyUIKit.MFUIChatViewParentModule.Header)? {
    get
    set
  }
  public var listComponent: (FlyUIKit.MFUIChatViewParentModule.List)? {
    get
    set
  }
  public var inputComponent: (FlyUIKit.MFUIChatViewParentModule.Input)? {
    get
    set
  }
  public init(headerComponent: (FlyUIKit.MFUIChatViewParentModule.Header)? = nil, listComponent: (FlyUIKit.MFUIChatViewParentModule.List)? = nil, inputComponent: (FlyUIKit.MFUIChatViewParentModule.Input)? = nil)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUIContactPreviewController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFContactPreviewTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIContactPreviewModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUIContactPreviewModule.List?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc deinit
}
extension FlyUIKit.MFUIContactPreviewController : FlyUIKit.MFUIContactPreviewModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func contactPreviewModule(_ listComponent: FlyUIKit.MFUIContactPreviewModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUIContactPreviewController : FlyUIKit.MFUIContactPreviewModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func contactPreviewModule(_ headerComponent: FlyUIKit.MFUIContactPreviewModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
public protocol MFUICreateShowOptionsDelegate : AnyObject {
  func didSelectCloseSelector()
  func didSelectCreateNewChat()
  func didSelectCreateNewSingleChat()
  func didSelectCreateNewGroupChat()
  func didSelectSettings()
}
public protocol MFUICreateShowOptionsProtocol {
  func show()
  func dismiss()
}
@objc @_Concurrency.MainActor(unsafe) open class MFUICreateShowOptions : FlyUIKit.MFUIView, FlyUIKit.MFUICreateShowOptionsProtocol {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFComponentTheme
  @_Concurrency.MainActor(unsafe) public var showCreateChat: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showGroupChat: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showSettings: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var navigationBar: UIKit.UINavigationBar {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var navigationItem: UIKit.UINavigationItem {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var backgroundCloseButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var optionsStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var createNewChatButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var createNewGroupChatButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var settingsButton: UIKit.UIButton {
    get
    set
  }
  @available(*, unavailable, renamed: "MFUICreateShowOptions.init(delegate:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "MFUICreateShowOptions.init(delegate:)")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(delegate: (any FlyUIKit.MFUICreateShowOptionsDelegate)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func show()
  @_Concurrency.MainActor(unsafe) open func dismiss()
  @objc @_Concurrency.MainActor(unsafe) open func onClickClose()
  @objc @_Concurrency.MainActor(unsafe) open func onClickCreateNewSingleChat()
  @objc @_Concurrency.MainActor(unsafe) open func onClickCreateNewGroupChat()
  @objc @_Concurrency.MainActor(unsafe) open func onClickSettingsButton()
  @objc deinit
}
extension FlyUIKit.MFUICreateShowOptions {
  @_Concurrency.MainActor(unsafe) public func createButton(type: FlyUIKit.ChatCreationType) -> FlyUIKit.MFUILayoutableButton
  @_Concurrency.MainActor(unsafe) public func updateButton(type: FlyUIKit.ChatCreationType)
  @_Concurrency.MainActor(unsafe) public func showOrHide(createChat: Swift.Bool, groupCreate: Swift.Bool, setting: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class CallMember : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public func debugLog(_ message: Swift.String)
public class MFUIUpdateProfileModule {
  public var headerComponent: FlyUIKit.MFUIUpdateProfileModule.Header? {
    get
    set
  }
  public var imageViewComponent: FlyUIKit.MFUIUpdateProfileModule.BImageView? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUIUpdateProfileModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIUpdateProfileModule.Header? = nil, listComponent: FlyUIKit.MFUIUpdateProfileModule.List? = nil, imageviewComponent: FlyUIKit.MFUIUpdateProfileModule.BImageView? = nil)
  @objc deinit
}
public class MFUITheme {
  public static var chatListTheme: FlyUIKit.MFChatListTheme {
    get
    set
  }
  public static var chatCellTheme: FlyUIKit.MFChatCellTheme {
    get
    set
  }
  public static var chatTheme: FlyUIKit.MFChatTheme {
    get
    set
  }
  public static var messageInputTheme: FlyUIKit.MFMessageInputTheme {
    get
    set
  }
  public static var messageCellTheme: FlyUIKit.MFMessageCellTheme {
    get
    set
  }
  public static var contactListTheme: FlyUIKit.MFContactListTheme {
    get
    set
  }
  public static var componentTheme: FlyUIKit.MFComponentTheme {
    get
    set
  }
  public static var overlayTheme: FlyUIKit.MFOverlayTheme {
    get
    set
  }
  public static var callScreenTheme: FlyUIKit.MFCallScreenTheme {
    get
    set
  }
  public static var messageInfoTheme: FlyUIKit.MFMessageInfoTheme {
    get
    set
  }
  public static var userProfileTheme: FlyUIKit.MFUserProfileTheme {
    get
    set
  }
  public static var groupInfoTheme: FlyUIKit.MFGroupInfoTheme {
    get
    set
  }
  public static var createGroupTheme: FlyUIKit.MFCreateGroupTheme {
    get
    set
  }
  public static var settingsTheme: FlyUIKit.MFSettingsTheme {
    get
    set
  }
  public static var viewMediaTheme: FlyUIKit.MFViewMediaTheme {
    get
    set
  }
  public static var translateTheme: FlyUIKit.MFTranslateTheme {
    get
    set
  }
  public static var languageTheme: FlyUIKit.MFLanguageTheme {
    get
    set
  }
  public static var forwardTheme: FlyUIKit.MFForwardTheme {
    get
    set
  }
  public static var updateProfileTheme: FlyUIKit.MFUpdateProfileTheme {
    get
    set
  }
  public static var callLogTheme: FlyUIKit.MFCallLogTheme {
    get
    set
  }
  public static var locationTheme: FlyUIKit.MFLocationTheme {
    get
    set
  }
  public static var contactPreviewTheme: FlyUIKit.MFContactPreviewTheme {
    get
    set
  }
  public static var customNotificationTheme: FlyUIKit.MFCustomNotificationTheme {
    get
    set
  }
  public init(chatListTheme: FlyUIKit.MFChatListTheme = .light, chatCellTheme: FlyUIKit.MFChatCellTheme = .light, componentTheme: FlyUIKit.MFComponentTheme = .light, chatTheme: FlyUIKit.MFChatTheme = .light, messageCellTheme: FlyUIKit.MFMessageCellTheme = .light, messageInputTheme: FlyUIKit.MFMessageInputTheme = .light, contactListTheme: FlyUIKit.MFContactListTheme = .light, overlayTheme: FlyUIKit.MFOverlayTheme = .init(), callScreenTheme: FlyUIKit.MFCallScreenTheme = .light, messageInfoTheme: FlyUIKit.MFMessageInfoTheme = .light, userProfileTheme: FlyUIKit.MFUserProfileTheme = .light, createGroupTheme: FlyUIKit.MFCreateGroupTheme = .light, settingsTheme: FlyUIKit.MFSettingsTheme = .light, viewMediaTheme: FlyUIKit.MFViewMediaTheme = .light, updateProfileTheme: FlyUIKit.MFUpdateProfileTheme = .light, groupInfoTheme: FlyUIKit.MFGroupInfoTheme = .light, callLogTheme: FlyUIKit.MFCallLogTheme = .light, translateTheme: FlyUIKit.MFTranslateTheme = .light, languageTheme: FlyUIKit.MFLanguageTheme = .light, locationTheme: FlyUIKit.MFLocationTheme = .light, contactPreviewTheme: FlyUIKit.MFContactPreviewTheme = .light, customNotificationTheme: FlyUIKit.MFCustomNotificationTheme = .light, forwardTheme: FlyUIKit.MFForwardTheme = .light)
  public static func set(theme: FlyUIKit.MFUITheme)
  public static func setChannelList(chatListTheme: FlyUIKit.MFChatListTheme, chatCellTheme: FlyUIKit.MFChatCellTheme)
  public static var dark: FlyUIKit.MFUITheme {
    get
  }
  public static var light: FlyUIKit.MFUITheme {
    get
  }
  @objc deinit
}
public class MFOverlayTheme {
  public init(chatTheme: FlyUIKit.MFChatTheme = .overlay, messageInputTheme: FlyUIKit.MFMessageInputTheme = .overlay, messageCellTheme: FlyUIKit.MFMessageCellTheme = .overlay, componentTheme: FlyUIKit.MFComponentTheme = .overlay)
  public var chatTheme: FlyUIKit.MFChatTheme
  public var messageInputTheme: FlyUIKit.MFMessageInputTheme
  public var messageCellTheme: FlyUIKit.MFMessageCellTheme
  public var componentTheme: FlyUIKit.MFComponentTheme
  @objc deinit
}
public class MFChatListTheme {
  public static var light: FlyUIKit.MFChatListTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, rightBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, navigationBarTintColor: UIKit.UIColor = MFUIColorSet.background50, navigationBarShadowColor: UIKit.UIColor = MFUIColorSet.onlight04, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, notificationOnBackgroundColor: UIKit.UIColor = MFUIColorSet.primary300, notificationOnTintColor: UIKit.UIColor = MFUIColorSet.background50, notificationOffBackgroundColor: UIKit.UIColor = MFUIColorSet.background100, notificationOffTintColor: UIKit.UIColor = MFUIColorSet.onlight01, leaveBackgroundColor: UIKit.UIColor = MFUIColorSet.error300, leaveTintColor: UIKit.UIColor = MFUIColorSet.background50, alertBackgroundColor: UIKit.UIColor = MFUIColorSet.background50, searchbarTintColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarPlaceholderColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarIconColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarNotfoundTextColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarTextColor: UIKit.UIColor = MFUIColorSet.primary300, recentChatTopBackgroundColor: UIKit.UIColor = MFUIColorSet.background800, navigationBarTitleColor: UIKit.UIColor = MFUIColorSet.onlight01, emptyLabelTextColor: UIKit.UIColor = MFUIColorSet.onlight01, emptyLabelTextFont: UIKit.UIFont = MFUIFontSet.body3)
  public static var dark: FlyUIKit.MFChatListTheme {
    get
  }
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var navigationBarTitleColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var notificationOnBackgroundColor: UIKit.UIColor
  public var notificationOnTintColor: UIKit.UIColor
  public var notificationOffBackgroundColor: UIKit.UIColor
  public var notificationOffTintColor: UIKit.UIColor
  public var leaveBackgroundColor: UIKit.UIColor
  public var leaveTintColor: UIKit.UIColor
  public var alertBackgroundColor: UIKit.UIColor
  public var searchbarTintColor: UIKit.UIColor
  public var searchbarPlaceholderColor: UIKit.UIColor
  public var searchbarIconColor: UIKit.UIColor
  public var searchbarNotfoundTextColor: UIKit.UIColor
  public var searchbarTextColor: UIKit.UIColor
  public var recentChatTopBackgroundColor: UIKit.UIColor
  public var emptyLabelTextColor: UIKit.UIColor
  public var emptyLabelTextFont: UIKit.UIFont
  @objc deinit
}
public class MFChatCellTheme {
  public static var light: FlyUIKit.MFChatCellTheme {
    get
  }
  public static var dark: FlyUIKit.MFChatCellTheme {
    get
  }
  public init(backgroundColor: UIKit.UIColor = MFUIColorSet.background50, titleFont: UIKit.UIFont = MFUIFontSet.subtitle1, titleTextColor: UIKit.UIColor = MFUIColorSet.onlight01, memberCountFont: UIKit.UIFont = MFUIFontSet.caption1, memberCountTextColor: UIKit.UIColor = MFUIColorSet.onlight02, lastUpdatedTimeFont: UIKit.UIFont = MFUIFontSet.caption2, lastUpdatedTimeTextColor: UIKit.UIColor = MFUIColorSet.onlight02, messageFont: UIKit.UIFont = MFUIFontSet.body3, messageTextColor: UIKit.UIColor = MFUIColorSet.onlight03, broadcastMarkTintColor: UIKit.UIColor = MFUIColorSet.secondary300, freezeStateTintColor: UIKit.UIColor = MFUIColorSet.primary300, unreadCountBackgroundColor: UIKit.UIColor = MFUIColorSet.primary300, unreadCountTextColor: UIKit.UIColor = MFUIColorSet.ondark01, unreadCountFont: UIKit.UIFont = MFUIFontSet.caption3, unreadMentionFont: UIKit.UIFont = MFUIFontSet.h3, unreadMentionColor: UIKit.UIColor = MFUIColorSet.primary300, separatorLineColor: UIKit.UIColor = MFUIColorSet.onlight04, checkButtonSelectTintColor: UIKit.UIColor = MFUIColorSet.primary300, checkButtonUnSelectTintColor: UIKit.UIColor = MFUIColorSet.primary300)
  public var backgroundColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var titleTextColor: UIKit.UIColor
  public var memberCountFont: UIKit.UIFont
  public var memberCountTextColor: UIKit.UIColor
  public var lastUpdatedTimeFont: UIKit.UIFont
  public var lastUpdatedTimeTextColor: UIKit.UIColor
  public var messageFont: UIKit.UIFont
  public var messageTextColor: UIKit.UIColor
  public var broadcastMarkTintColor: UIKit.UIColor
  public var freezeStateTintColor: UIKit.UIColor
  public var unreadCountBackgroundColor: UIKit.UIColor
  public var unreadCountTextColor: UIKit.UIColor
  public var unreadCountFont: UIKit.UIFont
  public var unreadMentionTextFont: UIKit.UIFont
  public var unreadMentionTextColor: UIKit.UIColor
  public var checkButtonSelectTintColor: UIKit.UIColor
  public var checkButtonUnSelectTintColor: UIKit.UIColor
  public var separatorLineColor: UIKit.UIColor
  @objc deinit
}
public class MFChatTheme {
  public static var light: FlyUIKit.MFChatTheme {
    get
  }
  public static var dark: FlyUIKit.MFChatTheme {
    get
  }
  public static var overlay: FlyUIKit.MFChatTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = MFUIColorSet.background50, navigationBarShadowColor: UIKit.UIColor = MFUIColorSet.onlight04, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, rightBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, removeItemColor: UIKit.UIColor = MFUIColorSet.error300, deleteItemColor: UIKit.UIColor = MFUIColorSet.error300, cancelItemColor: UIKit.UIColor = MFUIColorSet.primary300, alertRemoveColor: UIKit.UIColor = MFUIColorSet.error300, alertCancelColor: UIKit.UIColor = MFUIColorSet.primary300, menuTextColor: UIKit.UIColor = MFUIColorSet.onlight01, menuItemTintColor: UIKit.UIColor = MFUIColorSet.onlight01, menuItemDisabledColor: UIKit.UIColor = MFUIColorSet.ondark04, channelStateBannerFont: UIKit.UIFont = MFUIFontSet.caption2, channelStateBannerTextColor: UIKit.UIColor = MFUIColorSet.onlight01, channelStateBannerBackgroundColor: UIKit.UIColor = MFUIColorSet.information, mentionLimitGuideTextFont: UIKit.UIFont = MFUIFontSet.body1, mentionLimitGuideTextColor: UIKit.UIColor = MFUIColorSet.onlight02, separatorColor: UIKit.UIColor = MFUIColorSet.onlight04)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var removeItemColor: UIKit.UIColor
  public var deleteItemColor: UIKit.UIColor
  public var cancelItemColor: UIKit.UIColor
  public var alertRemoveColor: UIKit.UIColor
  public var alertCancelColor: UIKit.UIColor
  public var menuTextColor: UIKit.UIColor
  public var menuItemTintColor: UIKit.UIColor
  public var menuItemDisabledColor: UIKit.UIColor
  public var channelStateBannerFont: UIKit.UIFont
  public var channelStateBannerTextColor: UIKit.UIColor
  public var channelStateBannerBackgroundColor: UIKit.UIColor
  public var mentionLimitGuideTextFont: UIKit.UIFont
  public var mentionLimitGuideTextColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor
  @objc deinit
}
public class MFMessageInputTheme {
  public var backgroundColor: UIKit.UIColor
  public var textFieldBackgroundColor: UIKit.UIColor
  public var textFieldPlaceholderColor: UIKit.UIColor
  public var textFieldPlaceholderFont: UIKit.UIFont
  public var textFieldDisabledColor: UIKit.UIColor
  public var textFieldTintColor: UIKit.UIColor
  public var textFieldTextColor: UIKit.UIColor
  public var textFieldBorderColor: UIKit.UIColor
  public var textFieldFont: UIKit.UIFont
  public var buttonTintColor: UIKit.UIColor
  public var buttonDisabledTintColor: UIKit.UIColor
  public var cancelButtonFont: UIKit.UIFont
  public var saveButtonFont: UIKit.UIFont
  public var sendButtonTintColor: UIKit.UIColor
  public var channelViewDividerColor: UIKit.UIColor
  public var quotedFileMessageThumbnailBackgroundColor: UIKit.UIColor
  public var quotedFileMessageThumbnailTintColor: UIKit.UIColor
  public var replyToTextColor: UIKit.UIColor
  public var replyToTextFont: UIKit.UIFont
  public var quotedMessageTextColor: UIKit.UIColor
  public var quotedMessageTextFont: UIKit.UIFont
  public var closeReplyButtonColor: UIKit.UIColor
  public var audioDurationColor: UIKit.UIColor
  public var audioDurationFont: UIKit.UIFont
  public var slideToCancelTextColor: UIKit.UIColor
  public var slideToCancelTextFont: UIKit.UIFont
  public var cancelButtonColor: UIKit.UIColor
  public var cancelButtonTextFont: UIKit.UIFont
  public var audioBorderViewColor: UIKit.UIColor
  public var audioButtonTintColor: UIKit.UIColor
  public var mentionTextFont: UIKit.UIFont
  public var mentionTextColor: UIKit.UIColor
  public var mentionTextBackgroundColor: UIKit.UIColor
  public var underLineColor: UIKit.UIColor
  public var contactNameFont: UIKit.UIFont
  public var contactNameColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor = MFUIColorSet.background50, textFieldBackgroundColor: UIKit.UIColor = MFUIColorSet.background100, textFieldPlaceholderColor: UIKit.UIColor = MFUIColorSet.onlight03, textFieldPlaceholderFont: UIKit.UIFont = MFUIFontSet.body3, textFieldDisabledColor: UIKit.UIColor = MFUIColorSet.onlight04, textFieldTintColor: UIKit.UIColor = MFUIColorSet.primary300, textFieldTextColor: UIKit.UIColor = MFUIColorSet.onlight01, textFieldBorderColor: UIKit.UIColor = MFUIColorSet.background100, textFieldFont: UIKit.UIFont = MFUIFontSet.body3, buttonTintColor: UIKit.UIColor = MFUIColorSet.primary300, buttonDisabledTintColor: UIKit.UIColor = MFUIColorSet.onlight04, cancelButtonFont: UIKit.UIFont = MFUIFontSet.button2, saveButtonFont: UIKit.UIFont = MFUIFontSet.button2, saveButtonTextColor: UIKit.UIColor = MFUIColorSet.ondark01, channelViewDividerColor: UIKit.UIColor = MFUIColorSet.onlight04, quotedFileMessageThumbnailBackgroundColor: UIKit.UIColor = MFUIColorSet.background100, quotedFileMessageThumbnailTintColor: UIKit.UIColor = MFUIColorSet.onlight02, replyToTextColor: UIKit.UIColor = MFUIColorSet.onlight01, replyToTextFont: UIKit.UIFont = MFUIFontSet.caption1, quotedMessageTextColor: UIKit.UIColor = MFUIColorSet.onlight03, quotedMessageTextFont: UIKit.UIFont = MFUIFontSet.caption2, closeReplyButtonColor: UIKit.UIColor = MFUIColorSet.onlight02, mentionTextFont: UIKit.UIFont = MFUIFontSet.body2, mentionTextColor: UIKit.UIColor = MFUIColorSet.onlight01, mentionTextBackgroundColor: UIKit.UIColor = .clear, underLineColor: UIKit.UIColor = MFUIColorSet.onlight01, audioDurationColor: UIKit.UIColor = MFUIColorSet.lightBlue, audioDurationFont: UIKit.UIFont = MFUIFontSet.body3, slideToCancelTextColor: UIKit.UIColor = MFUIColorSet.onlight01, slideToCancelTextFont: UIKit.UIFont = MFUIFontSet.body3, cancelButtonColor: UIKit.UIColor = MFUIColorSet.errorRedColor, cancelButtonTextFont: UIKit.UIFont = MFUIFontSet.body3, audioBorderViewColor: UIKit.UIColor = MFUIColorSet.onlight01, audioButtonTintColor: UIKit.UIColor = MFUIColorSet.lightBlue, contactNameFont: UIKit.UIFont = MFUIFontSet.body2, contactNameColor: UIKit.UIColor = MFUIColorSet.onlight01)
  public static var light: FlyUIKit.MFMessageInputTheme {
    get
  }
  public static var dark: FlyUIKit.MFMessageInputTheme {
    get
  }
  public static var overlay: FlyUIKit.MFMessageInputTheme {
    get
  }
  @objc deinit
}
public class MFMessageCellTheme {
  public var backgroundColor: UIKit.UIColor
  public var leftBackgroundColor: UIKit.UIColor
  public var leftPressedBackgroundColor: UIKit.UIColor
  public var rightBackgroundColor: UIKit.UIColor
  public var rightPressedBackgroundColor: UIKit.UIColor
  public var openChannelBackgroundColor: UIKit.UIColor
  public var openChannelPressedBackgroundColor: UIKit.UIColor
  public var dateFont: UIKit.UIFont
  public var dateTextColor: UIKit.UIColor
  public var dateBackgroundColor: UIKit.UIColor
  public var userPlaceholderBackgroundColor: UIKit.UIColor
  public var userPlaceholderTintColor: UIKit.UIColor
  public var userNameFont: UIKit.UIFont
  public var userNameTextColor: UIKit.UIColor
  public var currentUserNameTextColor: UIKit.UIColor
  public var timeFont: UIKit.UIFont
  public var timeTextColor: UIKit.UIColor
  public var pendingStateColor: UIKit.UIColor
  public var failedStateColor: UIKit.UIColor
  public var succeededStateColor: UIKit.UIColor
  public var readReceiptStateColor: UIKit.UIColor
  public var deliveryReceiptStateColor: UIKit.UIColor
  public var contentBackgroundColor: UIKit.UIColor
  public var pressedContentBackgroundColor: UIKit.UIColor
  public var userMessageFont: UIKit.UIFont
  public var userMessageLeftTextColor: UIKit.UIColor
  public var userMessageLeftEditTextColor: UIKit.UIColor
  public var userMessageRightTextColor: UIKit.UIColor
  public var userMessageRightEditTextColor: UIKit.UIColor
  public var fileIconBackgroundColor: UIKit.UIColor
  public var fileIconColor: UIKit.UIColor
  public var fileImageBackgroundColor: UIKit.UIColor
  public var fileImageIconColor: UIKit.UIColor
  public var fileMessageNameFont: UIKit.UIFont
  public var fileMessageLeftTextColor: UIKit.UIColor
  public var fileMessageRightTextColor: UIKit.UIColor
  public var fileMessagePlaceholderColor: UIKit.UIColor
  public var adminMessageFont: UIKit.UIFont
  public var adminMessageTextColor: UIKit.UIColor
  public var unknownMessageDescFont: UIKit.UIFont
  public var unknownMessageDescTextColor: UIKit.UIColor
  public var messageLeftHighlightTextColor: UIKit.UIColor
  public var messageRightHighlightTextColor: UIKit.UIColor
  public var ogTitleFont: UIKit.UIFont
  public var ogTitleColor: UIKit.UIColor
  public var ogDescriptionFont: UIKit.UIFont
  public var ogDescriptionColor: UIKit.UIColor
  public var ogURLAddressFont: UIKit.UIFont
  public var ogURLAddressColor: UIKit.UIColor
  public var linkColor: UIKit.UIColor
  public var audioDurationFont: UIKit.UIFont
  public var audioDurationColor: UIKit.UIColor
  public var audioReceiverBackGroundColor: UIKit.UIColor
  public var audioSenderBackGroundColor: UIKit.UIColor
  public var quotedMessageTextFont: UIKit.UIFont
  public var repliedToTextFont: UIKit.UIFont
  public var quotedMessageRightBackgroundColor: UIKit.UIColor
  public var quotedMessageLeftBackgroundColor: UIKit.UIColor
  public var quotedFileMessageThumbnailColor: UIKit.UIColor
  public var quotedMessageTextColor: UIKit.UIColor
  public var repliedIconColor: UIKit.UIColor
  public var repliedToTextColor: UIKit.UIColor
  public var mentionTextFont: UIKit.UIFont
  public var mentionLeftTextColor: UIKit.UIColor
  public var mentionRightTextColor: UIKit.UIColor
  public var mentionLeftTextBackgroundColor: UIKit.UIColor
  public var mentionRightTextBackgroundColor: UIKit.UIColor
  public static var light: FlyUIKit.MFMessageCellTheme {
    get
  }
  public static var dark: FlyUIKit.MFMessageCellTheme {
    get
  }
  public static var overlay: FlyUIKit.MFMessageCellTheme {
    get
  }
  public init(backgroundColor: UIKit.UIColor = MFUIColorSet.background50, leftBackgroundColor: UIKit.UIColor = MFUIColorSet.background100, leftPressedBackgroundColor: UIKit.UIColor = MFUIColorSet.primary100, rightBackgroundColor: UIKit.UIColor = MFUIColorSet.primary300, rightPressedBackgroundColor: UIKit.UIColor = MFUIColorSet.primary400, openChannelBackgroundColor: UIKit.UIColor = .clear, openChannelPressedBackgroundColor: UIKit.UIColor = MFUIColorSet.background100, dateFont: UIKit.UIFont = MFUIFontSet.caption1, dateTextColor: UIKit.UIColor = MFUIColorSet.ondark01, dateBackgroundColor: UIKit.UIColor = MFUIColorSet.overlay02, userPlaceholderBackgroundColor: UIKit.UIColor = MFUIColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = MFUIColorSet.ondark01, userNameFont: UIKit.UIFont = MFUIFontSet.caption1, userNameTextColor: UIKit.UIColor = MFUIColorSet.onlight02, currentUserNameTextColor: UIKit.UIColor = MFUIColorSet.secondary300, timeFont: UIKit.UIFont = MFUIFontSet.caption4, timeTextColor: UIKit.UIColor = MFUIColorSet.onlight03, pendingStateColor: UIKit.UIColor = MFUIColorSet.primary300, failedStateColor: UIKit.UIColor = MFUIColorSet.error300, succeededStateColor: UIKit.UIColor = MFUIColorSet.onlight03, readReceiptStateColor: UIKit.UIColor = MFUIColorSet.secondary300, deliveryReceiptStateColor: UIKit.UIColor = MFUIColorSet.onlight03, userMessageFont: UIKit.UIFont = MFUIFontSet.body3, userMessageLeftTextColor: UIKit.UIColor = MFUIColorSet.onlight01, userMessageLeftEditTextColor: UIKit.UIColor = MFUIColorSet.onlight02, userMessageLeftHighlightTextColor: UIKit.UIColor = MFUIColorSet.onlight01, userMessageRightTextColor: UIKit.UIColor = MFUIColorSet.ondark01, userMessageRightEditTextColor: UIKit.UIColor = MFUIColorSet.ondark02, userMessageRightHighlightTextColor: UIKit.UIColor = MFUIColorSet.onlight01, fileIconBackgroundColor: UIKit.UIColor = MFUIColorSet.background50, fileImageBackgroundColor: UIKit.UIColor = MFUIColorSet.ondark01, fileImageIconColor: UIKit.UIColor = MFUIColorSet.onlight02, fileIconColor: UIKit.UIColor = MFUIColorSet.primary300, fileMessageNameFont: UIKit.UIFont = MFUIFontSet.body3, fileMessageLeftTextColor: UIKit.UIColor = MFUIColorSet.onlight01, fileMessageRightTextColor: UIKit.UIColor = MFUIColorSet.ondark01, fileMessagePlaceholderColor: UIKit.UIColor = MFUIColorSet.onlight02, adminMessageFont: UIKit.UIFont = MFUIFontSet.caption2, adminMessageTextColor: UIKit.UIColor = MFUIColorSet.onlight02, unknownMessageDescFont: UIKit.UIFont = MFUIFontSet.body3, unknownMessageDescTextColor: UIKit.UIColor = MFUIColorSet.onlight03, ogTitleFont: UIKit.UIFont = MFUIFontSet.body2, ogTitleColor: UIKit.UIColor = MFUIColorSet.onlight01, ogDescriptionFont: UIKit.UIFont = MFUIFontSet.caption2, ogDescriptionColor: UIKit.UIColor = MFUIColorSet.onlight01, ogURLAddressFont: UIKit.UIFont = MFUIFontSet.caption2, ogURLAddressColor: UIKit.UIColor = MFUIColorSet.onlight02, linkColor: UIKit.UIColor = MFUIColorSet.primary300, contentBackgroundColor: UIKit.UIColor = MFUIColorSet.background100, pressedContentBackgroundColor: UIKit.UIColor = MFUIColorSet.background300, quotedMessageRightBackgroundColor: UIKit.UIColor = MFUIColorSet.background100.withAlphaComponent(0.5), quotedMessageLeftBackgroundColor: UIKit.UIColor = MFUIColorSet.ondark01.withAlphaComponent(0.5), quotedFileMessageThumbnailColor: UIKit.UIColor = MFUIColorSet.onlight02, quotedMessageTextColor: UIKit.UIColor = MFUIColorSet.onlight03, quotedMessageTextFont: UIKit.UIFont = MFUIFontSet.body3, repliedIconColor: UIKit.UIColor = MFUIColorSet.onlight03, repliedToTextColor: UIKit.UIColor = MFUIColorSet.onlight03, repliedToTextFont: UIKit.UIFont = MFUIFontSet.caption1, mentionTextFont: UIKit.UIFont = MFUIFontSet.body4, mentionLeftTextColor: UIKit.UIColor = MFUIColorSet.onlight01, mentionRightTextColor: UIKit.UIColor = MFUIColorSet.ondark01, mentionLeftTextBackgroundColor: UIKit.UIColor = .clear, mentionRightTextBackgroundColor: UIKit.UIColor = .clear, audioDurationFont: UIKit.UIFont = MFUIFontSet.h4, audioDurationColor: UIKit.UIColor = MFUIColorSet.whiteColor, audioSenderBackGroundColor: UIKit.UIColor = MFUIColorSet.audioBackGroundColor, audioReceiverBackGroundColor: UIKit.UIColor = MFUIColorSet.primary400)
  @objc deinit
}
public class MFContactListTheme {
  public static var light: FlyUIKit.MFContactListTheme {
    get
  }
  public static var dark: FlyUIKit.MFContactListTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = MFUIColorSet.background50, navigationShadowColor: UIKit.UIColor = MFUIColorSet.onlight04, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, rightBarButtonTintColor: UIKit.UIColor = MFUIColorSet.onlight04, rightBarButtonSelectedTintColor: UIKit.UIColor = MFUIColorSet.primary300, barButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, barButtonDisabledTintColor: UIKit.UIColor = MFUIColorSet.onlight04, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, coverImageTintColor: UIKit.UIColor = MFUIColorSet.ondark01, coverImageBackgroundColor: UIKit.UIColor = MFUIColorSet.background300, itemTextColor: UIKit.UIColor = MFUIColorSet.onlight01, itemColor: UIKit.UIColor = MFUIColorSet.primary300, removeColor: UIKit.UIColor = MFUIColorSet.error300, placeholderTintColor: UIKit.UIColor = MFUIColorSet.onlight03, textfieldTextColor: UIKit.UIColor = MFUIColorSet.onlight01, checkButtonSelectTintColor: UIKit.UIColor = MFUIColorSet.primary300, checkButtonUnSelectTintColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarTintColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarPlaceholderColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarIconColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarNotfoundTextColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarTextColor: UIKit.UIColor = MFUIColorSet.primary300, navigationTitleColor: UIKit.UIColor = MFUIColorSet.ondark01)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationShadowColor: UIKit.UIColor
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonSelectedTintColor: UIKit.UIColor
  public var barButtonTintColor: UIKit.UIColor
  public var barButtonDisabledTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var coverImageTintColor: UIKit.UIColor
  public var coverImageBackgroundColor: UIKit.UIColor
  public var itemTextColor: UIKit.UIColor
  public var itemColor: UIKit.UIColor
  public var removeColor: UIKit.UIColor
  public var placeholderTintColor: UIKit.UIColor
  public var textfieldTextColor: UIKit.UIColor
  public var searchbarTintColor: UIKit.UIColor
  public var searchbarPlaceholderColor: UIKit.UIColor
  public var searchbarIconColor: UIKit.UIColor
  public var searchbarNotfoundTextColor: UIKit.UIColor
  public var searchbarTextColor: UIKit.UIColor
  public var navigationTitleColor: UIKit.UIColor
  @objc deinit
}
public class MFComponentTheme {
  public var emptyViewBackgroundColor: UIKit.UIColor
  public var emptyViewStatusFont: UIKit.UIFont
  public var emptyViewStatusTintColor: UIKit.UIColor
  public var emptyViewRetryButtonTintColor: UIKit.UIColor
  public var emptyViewRetryButtonFont: UIKit.UIFont
  public var alertTitleColor: UIKit.UIColor
  public var alertTitleFont: UIKit.UIFont
  public var alertDetailColor: UIKit.UIColor
  public var alertDetailFont: UIKit.UIFont
  public var alertPlaceholderColor: UIKit.UIColor
  public var alertButtonColor: UIKit.UIColor
  public var alertErrorColor: UIKit.UIColor
  public var alertButtonFont: UIKit.UIFont
  public var alertTextFieldBackgroundColor: UIKit.UIColor
  public var alertTextFieldTintColor: UIKit.UIColor
  public var alertTextFieldFont: UIKit.UIFont
  public var actionSheetTextFont: UIKit.UIFont
  public var actionSheetTextColor: UIKit.UIColor
  public var actionSheetSubTextFont: UIKit.UIFont
  public var actionSheetSubTextColor: UIKit.UIColor
  public var actionSheetItemColor: UIKit.UIColor
  public var actionSheetErrorColor: UIKit.UIColor
  public var actionSheetButtonFont: UIKit.UIFont
  public var actionSheetDisabledColor: UIKit.UIColor
  public var newMessageFont: UIKit.UIFont
  public var newMessageTintColor: UIKit.UIColor
  public var newMessageBackground: UIKit.UIColor
  public var newMessageHighlighted: UIKit.UIColor
  public var newMessageButtonTintColor: UIKit.UIColor
  public var newMessageButtonBackground: UIKit.UIColor
  public var newMessageButtonHighlighted: UIKit.UIColor
  public var scrollBottomButtonIconColor: UIKit.UIColor
  public var scrollBottomButtonBackground: UIKit.UIColor
  public var scrollBottomButtonHighlighted: UIKit.UIColor
  public var titleOnlineStateColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var titleStatusColor: UIKit.UIColor
  public var titleStatusFont: UIKit.UIFont
  public var menuTitleFont: UIKit.UIFont
  public var overlayColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var highlightedColor: UIKit.UIColor
  public var buttonTextColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor
  public var shadowColor: UIKit.UIColor
  public var closeBarButtonTintColor: UIKit.UIColor
  public var selectionColor: UIKit.UIColor
  public var userPlaceholderBackgroundColor: UIKit.UIColor
  public var userPlaceholderTintColor: UIKit.UIColor
  public var reactionBoxBackgroundColor: UIKit.UIColor
  public var reactionBoxBorderLineColor: UIKit.UIColor
  public var reactionBoxEmojiCountColor: UIKit.UIColor
  public var reactionBoxEmojiBackgroundColor: UIKit.UIColor
  public var reactionBoxSelectedEmojiBackgroundColor: UIKit.UIColor
  public var reactionBoxEmojiCountFont: UIKit.UIFont
  public var emojiCountColor: UIKit.UIColor
  public var emojiSelectedCountColor: UIKit.UIColor
  public var emojiSelectedUnderlineColor: UIKit.UIColor
  public var emojiCountFont: UIKit.UIFont
  public var emojiListSelectedBackgroundColor: UIKit.UIColor
  public var reactionMenuLineColor: UIKit.UIColor
  public var addReactionTintColor: UIKit.UIColor
  public var channelTypeSelectorItemTintColor: UIKit.UIColor
  public var channelTypeSelectorItemTextColor: UIKit.UIColor
  public var channelTypeSelectorItemFont: UIKit.UIFont
  public var broadcastIconBackgroundColor: UIKit.UIColor
  public var broadcastIconTintColor: UIKit.UIColor
  public var barItemTintColor: UIKit.UIColor
  public var loadingBackgroundColor: UIKit.UIColor
  public var loadingPopupBackgroundColor: UIKit.UIColor
  public var loadingFont: UIKit.UIFont
  public var loadingTextColor: UIKit.UIColor
  public var loadingSpinnerColor: UIKit.UIColor
  public var singleChatImageTintColor: UIKit.UIColor
  public var groupChatImageTintColor: UIKit.UIColor
  public var progressBackgroundColor: UIKit.UIColor
  public var progressPrimaryColor: UIKit.UIColor
  public var retryLabelFont: UIKit.UIFont
  public var retryLabelColor: UIKit.UIColor
  public static var light: FlyUIKit.MFComponentTheme {
    get
  }
  public static var dark: FlyUIKit.MFComponentTheme {
    get
  }
  public static var overlay: FlyUIKit.MFComponentTheme {
    get
  }
  public init(emptyViewBackgroundColor: UIKit.UIColor = MFUIColorSet.background50, emptyViewStatusFont: UIKit.UIFont = MFUIFontSet.body3, emptyViewStatusTintColor: UIKit.UIColor = MFUIColorSet.onlight03, emptyViewRetryButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, emptyViewRetryButtonFont: UIKit.UIFont = MFUIFontSet.button2, overlayColor: UIKit.UIColor = MFUIColorSet.overlay02, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, highlightedColor: UIKit.UIColor = MFUIColorSet.background100, buttonTextColor: UIKit.UIColor = MFUIColorSet.primary300, separatorColor: UIKit.UIColor = MFUIColorSet.onlight04, shadowColor: UIKit.UIColor = MFUIColorSet.background700, closeBarButtonTintColor: UIKit.UIColor = MFUIColorSet.onlight01, selectionColor: UIKit.UIColor = MFUIColorSet.onlight01, alertTitleColor: UIKit.UIColor = MFUIColorSet.onlight01, alertTitleFont: UIKit.UIFont = MFUIFontSet.h3, alertDetailColor: UIKit.UIColor = MFUIColorSet.onlight02, alertDetailFont: UIKit.UIFont = MFUIFontSet.body3, alertPlaceholderColor: UIKit.UIColor = MFUIColorSet.onlight03, alertButtonColor: UIKit.UIColor = MFUIColorSet.primary300, alertErrorColor: UIKit.UIColor = MFUIColorSet.error300, alertButtonFont: UIKit.UIFont = MFUIFontSet.button2, alertTextFieldBackgroundColor: UIKit.UIColor = MFUIColorSet.background100, alertTextFieldTintColor: UIKit.UIColor = MFUIColorSet.primary300, alertTextFieldFont: UIKit.UIFont = MFUIFontSet.body3, actionSheetTextFont: UIKit.UIFont = MFUIFontSet.subtitle1, actionSheetTextColor: UIKit.UIColor = MFUIColorSet.onlight01, actionSheetSubTextFont: UIKit.UIFont = MFUIFontSet.body2, actionSheetSubTextColor: UIKit.UIColor = MFUIColorSet.onlight02, actionSheetItemColor: UIKit.UIColor = MFUIColorSet.primary300, actionSheetErrorColor: UIKit.UIColor = MFUIColorSet.error300, actionSheetButtonFont: UIKit.UIFont = MFUIFontSet.button1, actionSheetDisabledColor: UIKit.UIColor = MFUIColorSet.onlight04, newMessageFont: UIKit.UIFont = MFUIFontSet.caption1, newMessageTintColor: UIKit.UIColor = MFUIColorSet.primary300, newMessageBackground: UIKit.UIColor = MFUIColorSet.background50.withAlphaComponent(0.96), newMessageHighlighted: UIKit.UIColor = MFUIColorSet.background100.withAlphaComponent(0.96), newMessageButtonTintColor: UIKit.UIColor = MFUIColorSet.ondark01, newMessageButtonBackground: UIKit.UIColor = MFUIColorSet.primary300, newMessageButtonHighlighted: UIKit.UIColor = MFUIColorSet.primary400, scrollBottomButtonIconColor: UIKit.UIColor = MFUIColorSet.primary300, scrollBottomButtonBackground: UIKit.UIColor = MFUIColorSet.background50.withAlphaComponent(0.96), scrollBottomButtonHighlighted: UIKit.UIColor = MFUIColorSet.background100.withAlphaComponent(0.96), titleOnlineStateColor: UIKit.UIColor = MFUIColorSet.secondary300, titleColor: UIKit.UIColor = MFUIColorSet.onlight01, titleFont: UIKit.UIFont = MFUIFontSet.h2, titleStatusColor: UIKit.UIColor = MFUIColorSet.onlight03, titleStatusFont: UIKit.UIFont = MFUIFontSet.caption2, menuTitleFont: UIKit.UIFont = MFUIFontSet.subtitle2, userPlaceholderBackgroundColor: UIKit.UIColor = MFUIColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = MFUIColorSet.ondark01, reactionBoxBackgroundColor: UIKit.UIColor = MFUIColorSet.background50, reactionBoxBorderLineColor: UIKit.UIColor = MFUIColorSet.background100, reactionBoxEmojiCountColor: UIKit.UIColor = MFUIColorSet.onlight01, reactionBoxEmojiBackgroundColor: UIKit.UIColor = MFUIColorSet.background100, reactionBoxSelectedEmojiBackgroundColor: UIKit.UIColor = MFUIColorSet.primary100, reactionBoxEmojiCountFont: UIKit.UIFont = MFUIFontSet.caption4, emojiCountColor: UIKit.UIColor = MFUIColorSet.onlight02, emojiSelectedCountColor: UIKit.UIColor = MFUIColorSet.primary300, emojiSelectedUnderlineColor: UIKit.UIColor = MFUIColorSet.primary300, emojiCountFont: UIKit.UIFont = MFUIFontSet.button3, reactionMenuLineColor: UIKit.UIColor = MFUIColorSet.ondark04, emojiListSelectedBackgroundColor: UIKit.UIColor = MFUIColorSet.primary100, addReactionTintColor: UIKit.UIColor = MFUIColorSet.onlight03, channelTypeSelectorItemTintColor: UIKit.UIColor = MFUIColorSet.primary300, channelTypeSelectorItemTextColor: UIKit.UIColor = MFUIColorSet.onlight01, channelTypeSelectorItemFont: UIKit.UIFont = MFUIFontSet.caption2, broadcastIconBackgroundColor: UIKit.UIColor = MFUIColorSet.secondary300, broadcastIconTintColor: UIKit.UIColor = MFUIColorSet.ondark01, barItemTintColor: UIKit.UIColor = MFUIColorSet.primary300, loadingBackgroundColor: UIKit.UIColor = .clear, loadingPopupBackgroundColor: UIKit.UIColor = .clear, loadingFont: UIKit.UIFont = MFUIFontSet.subtitle2, loadingTextColor: UIKit.UIColor = MFUIColorSet.ondark01, loadingSpinnerColor: UIKit.UIColor = MFUIColorSet.primary300, singleChatImageTintColor: UIKit.UIColor = MFUIColorSet.primary300, groupChatImageTintColor: UIKit.UIColor = MFUIColorSet.primary300, progressBackgroundColor: UIKit.UIColor = MFUIColorSet.onlight01, progressPrimaryColor: UIKit.UIColor = MFUIColorSet.ondark01, retryLabelFont: UIKit.UIFont = MFUIFontSet.caption2, retryLabelColor: UIKit.UIColor = MFUIColorSet.ondark01)
  @objc deinit
}
public class MFCallScreenTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var leftButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var callStatusTextColor: UIKit.UIColor
  public var callStatusTextFont: UIKit.UIFont
  public var nameTextColor: UIKit.UIColor
  public var nameTextFont: UIKit.UIFont
  public var timeTextColor: UIKit.UIColor
  public var timeTextFont: UIKit.UIFont
  public var muteTextColor: UIKit.UIColor
  public var muteTextFont: UIKit.UIFont
  public var callCancelTextColor: UIKit.UIColor
  public var callCancelTextFont: UIKit.UIFont
  public var callAgainTextColor: UIKit.UIColor
  public var callAgainTextFont: UIKit.UIFont
  public var CallNowSelectedBackgroundColor: UIKit.UIColor
  public var CallNowDeselectedBackgroundColor: UIKit.UIColor
  public var CallNowTitleColor: UIKit.UIColor
  public var CallNowButtonFont: UIKit.UIFont
  public var searchbarTintColor: UIKit.UIColor
  public var searchbarPlaceholderColor: UIKit.UIColor
  public var searchbarIconColor: UIKit.UIColor
  public var searchbarNotfoundTextColor: UIKit.UIColor
  public var searchbarTextColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = MFUIColorSet.background50, navigationBarShadowColor: UIKit.UIColor = MFUIColorSet.onlight04, leftButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, callStatusTextColor: UIKit.UIColor = MFUIColorSet.primary300, callStatusTextFont: UIKit.UIFont = MFUIFontSet.button3, nameTextColor: UIKit.UIColor = MFUIColorSet.background100, nameTextFont: UIKit.UIFont = MFUIFontSet.button3, timeTextColor: UIKit.UIColor = MFUIColorSet.error300, timeTextFont: UIKit.UIFont = MFUIFontSet.button3, muteTextColor: UIKit.UIColor = MFUIColorSet.background50, muteTextFont: UIKit.UIFont = MFUIFontSet.button3, callCancelTextColor: UIKit.UIColor = MFUIColorSet.primary300, callCancelTextFont: UIKit.UIFont = MFUIFontSet.caption3, callAgainTextColor: UIKit.UIColor = MFUIColorSet.primary100, callAgainTextFont: UIKit.UIFont = MFUIFontSet.caption3, CallNowSelectedBackgroundColor: UIKit.UIColor = MFUIColorSet.primary300, CallNowDeselectedBackgroundColor: UIKit.UIColor = MFUIColorSet.background300, CallNowTitleColor: UIKit.UIColor = MFUIColorSet.ondark04, CallNowButtonFont: UIKit.UIFont = MFUIFontSet.subtitle1, searchbarTintColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarPlaceholderColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarIconColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarNotfoundTextColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarTextColor: UIKit.UIColor = MFUIColorSet.primary300)
  public static var light: FlyUIKit.MFCallScreenTheme {
    get
  }
  public static var dark: FlyUIKit.MFCallScreenTheme {
    get
  }
  @objc deinit
}
public class MFMessageInfoTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var notificationOnBackgroundColor: UIKit.UIColor
  public var notificationOnTintColor: UIKit.UIColor
  public var notificationOffBackgroundColor: UIKit.UIColor
  public var notificationOffTintColor: UIKit.UIColor
  public var messageInfoGroupHeaderTitleColor: UIKit.UIColor
  public var messageInfoGroupHeaderTitleFont: UIKit.UIFont
  public var messageInfoBorderColor: UIKit.UIColor
  public var messageInfoEmptytitleFont: UIKit.UIFont
  public var messageInfoEmptytitleColor: UIKit.UIColor
  public var groupHeaderBackgroundColor: UIKit.UIColor
  public var emptyBackgroundColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, navigationBarTintColor: UIKit.UIColor = MFUIColorSet.background50, navigationBarShadowColor: UIKit.UIColor = MFUIColorSet.onlight04, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, notificationOnBackgroundColor: UIKit.UIColor = MFUIColorSet.primary300, notificationOnTintColor: UIKit.UIColor = MFUIColorSet.background50, notificationOffBackgroundColor: UIKit.UIColor = MFUIColorSet.background100, notificationOffTintColor: UIKit.UIColor = MFUIColorSet.onlight01, messageInfoGroupHeaderTitleColor: UIKit.UIColor = MFUIColorSet.onlight01, messageInfoGroupHeaderTitleFont: UIKit.UIFont = MFUIFontSet.h3, messageInfoBorderColor: UIKit.UIColor = MFUIColorSet.onlight04, messageInfoEmptytitleFont: UIKit.UIFont = MFUIFontSet.body3, messageInfoEmptytitleColor: UIKit.UIColor = MFUIColorSet.onlight04, groupHeaderBackgroundColor: UIKit.UIColor = MFUIColorSet.background50, emptyBackgroundColor: UIKit.UIColor = MFUIColorSet.ondark01)
  public static var light: FlyUIKit.MFMessageInfoTheme {
    get
  }
  public static var dark: FlyUIKit.MFMessageInfoTheme {
    get
  }
  @objc deinit
}
public class MFUserProfileTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var userProfileTitleColor: UIKit.UIColor
  public var userProfileTitleFont: UIKit.UIFont
  public var userProfileLastseenColor: UIKit.UIColor
  public var userProfileLastseenFont: UIKit.UIFont
  public var userTitleColor: UIKit.UIColor
  public var userdescriptionColor: UIKit.UIColor
  public var userTitleFont: UIKit.UIFont
  public var userDescriptionFont: UIKit.UIFont
  public var underLineColor: UIKit.UIColor
  public var profileHeaderBackgroundColor: UIKit.UIColor
  public var muteNotificationTitleColor: UIKit.UIColor
  public var muteNotificationFont: UIKit.UIFont
  public var switchTintColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, userProfileTitleColor: UIKit.UIColor = MFUIColorSet.background50, userProfileTitleFont: UIKit.UIFont = MFUIFontSet.h1, userProfileLastseenColor: UIKit.UIColor = MFUIColorSet.background50, userProfileLastseenFont: UIKit.UIFont = MFUIFontSet.caption4, userTitleColor: UIKit.UIColor = MFUIColorSet.onlight01, userdescriptionColor: UIKit.UIColor = MFUIColorSet.overlay01, userTitleFont: UIKit.UIFont = MFUIFontSet.button2, userDescriptionFont: UIKit.UIFont = MFUIFontSet.body1, underLineColor: UIKit.UIColor = MFUIColorSet.overlay01, profileHeaderBackgroundColor: UIKit.UIColor = MFUIColorSet.onlight05, muteNotificationTitleColor: UIKit.UIColor = MFUIColorSet.onlight01, muteNotificationFont: UIKit.UIFont = MFUIFontSet.button2, switchTintColor: UIKit.UIColor = MFUIColorSet.lightBlue)
  public static var light: FlyUIKit.MFUserProfileTheme {
    get
  }
  public static var dark: FlyUIKit.MFUserProfileTheme {
    get
  }
  @objc deinit
}
public class MFSettingsTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var settingTitleColor: UIKit.UIColor
  public var settingTitleFont: UIKit.UIFont
  public var underLineColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h1, settingTitleColor: UIKit.UIColor = MFUIColorSet.background50, settingTitleFont: UIKit.UIFont = MFUIFontSet.body2, underLineColor: UIKit.UIColor = MFUIColorSet.ondark03)
  public static var light: FlyUIKit.MFSettingsTheme {
    get
  }
  public static var dark: FlyUIKit.MFSettingsTheme {
    get
  }
  @objc deinit
}
public class MFTranslateTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var translateTitleColor: UIKit.UIColor
  public var translateTitleFont: UIKit.UIFont
  public var languageTitleColor: UIKit.UIColor
  public var languageTitleFont: UIKit.UIFont
  public var underLineColor: UIKit.UIColor
  public var descriptionColor: UIKit.UIColor
  public var descriptionTitleFont: UIKit.UIFont
  public var doubleTitleColor: UIKit.UIColor
  public var doubleTitleFont: UIKit.UIFont
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h1, translateTitleColor: UIKit.UIColor = MFUIColorSet.background50, translateTitleFont: UIKit.UIFont = MFUIFontSet.body2, languageTitleFont: UIKit.UIFont = MFUIFontSet.body2, languageTitleColor: UIKit.UIColor = MFUIColorSet.lightBlue, underLineColor: UIKit.UIColor = MFUIColorSet.ondark03, descriptionColor: UIKit.UIColor = MFUIColorSet.lightGrey, descriptionTitleFont: UIKit.UIFont = MFUIFontSet.body2, doubleTitleColor: UIKit.UIColor = MFUIColorSet.lightGrey, doubleTitleFont: UIKit.UIFont = MFUIFontSet.body2)
  public static var light: FlyUIKit.MFTranslateTheme {
    get
  }
  public static var dark: FlyUIKit.MFTranslateTheme {
    get
  }
  @objc deinit
}
public class MFLanguageTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var languageTitleColor: UIKit.UIColor
  public var languageTitleFont: UIKit.UIFont
  public var underLineColor: UIKit.UIColor
  public var languageColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h1, languageTitleColor: UIKit.UIColor = MFUIColorSet.background50, languageTitleFont: UIKit.UIFont = MFUIFontSet.body2, underLineColor: UIKit.UIColor = MFUIColorSet.ondark03, languageColor: UIKit.UIColor = MFUIColorSet.onlight01)
  public static var light: FlyUIKit.MFLanguageTheme {
    get
  }
  public static var dark: FlyUIKit.MFLanguageTheme {
    get
  }
  @objc deinit
}
public class MFUpdateProfileTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var nameTextFieldColor: UIKit.UIColor
  public var nameTextFieldFont: UIKit.UIFont
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h1, nameTextFieldColor: UIKit.UIColor = MFUIColorSet.onlight01, nameTextFieldFont: UIKit.UIFont = MFUIFontSet.h1)
  public static var light: FlyUIKit.MFUpdateProfileTheme {
    get
  }
  public static var dark: FlyUIKit.MFUpdateProfileTheme {
    get
  }
  @objc deinit
}
public class MFCreateGroupTheme {
  public static var light: FlyUIKit.MFCreateGroupTheme {
    get
  }
  public static var dark: FlyUIKit.MFCreateGroupTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = MFUIColorSet.background50, navigationBarShadowColor: UIKit.UIColor = MFUIColorSet.onlight04, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, rightBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, groupNameTextFieldTextColor: UIKit.UIColor = MFUIColorSet.background50, groupNameTextFieldTextFont: UIKit.UIFont = MFUIFontSet.body1, countTextColor: UIKit.UIColor = MFUIColorSet.background50, countTextFont: UIKit.UIFont = MFUIFontSet.body1, provideGroupNameTextColor: UIKit.UIColor = MFUIColorSet.background50, provideGroupNameTextFont: UIKit.UIFont = MFUIFontSet.body1, separatorColor: UIKit.UIColor = MFUIColorSet.onlight04, navigationBarTitleColor: UIKit.UIColor = MFUIColorSet.onlight01)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var groupNameTextFieldTextColor: UIKit.UIColor
  public var groupNameTextFieldTextFont: UIKit.UIFont
  public var countTextColor: UIKit.UIColor
  public var countTextFont: UIKit.UIFont
  public var provideGroupNameTextColor: UIKit.UIColor
  public var provideGroupNameTextFont: UIKit.UIFont
  public var separatorColor: UIKit.UIColor
  public var navigationBarTitleColor: UIKit.UIColor
  @objc deinit
}
public class MFGroupInfoTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var groupNameTitleColor: UIKit.UIColor
  public var groupNameTitleFont: UIKit.UIFont
  public var groupParticipantCountTitleColor: UIKit.UIColor
  public var groupParticipantCountTitleFont: UIKit.UIFont
  public var userTitleColor: UIKit.UIColor
  public var groupOptionTitleColor: UIKit.UIColor
  public var userdescriptionColor: UIKit.UIColor
  public var userTitleFont: UIKit.UIFont
  public var userDescriptionFont: UIKit.UIFont
  public var underLineColor: UIKit.UIColor
  public var profileHeaderBackgroundColor: UIKit.UIColor
  public var adminTitleFont: UIKit.UIFont
  public var adminTitleColor: UIKit.UIColor
  public var addParticipantColor: UIKit.UIColor
  public var addParticipantFont: UIKit.UIFont
  public var muteNotificationTitleColor: UIKit.UIColor
  public var muteNotificationFont: UIKit.UIFont
  public var switchTintColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, groupNameTitleColor: UIKit.UIColor = MFUIColorSet.background50, groupNameTitleFont: UIKit.UIFont = MFUIFontSet.h1, groupParticipantCountTitleColor: UIKit.UIColor = MFUIColorSet.background50, groupParticipantCountTitleFont: UIKit.UIFont = MFUIFontSet.caption4, userTitleColor: UIKit.UIColor = MFUIColorSet.onlight01, userdescriptionColor: UIKit.UIColor = MFUIColorSet.overlay01, userTitleFont: UIKit.UIFont = MFUIFontSet.button2, userDescriptionFont: UIKit.UIFont = MFUIFontSet.body1, underLineColor: UIKit.UIColor = MFUIColorSet.overlay01, profileHeaderBackgroundColor: UIKit.UIColor = MFUIColorSet.onlight05, adminTitleFont: UIKit.UIFont = MFUIFontSet.body1, adminTitleColor: UIKit.UIColor = MFUIColorSet.lightBlue, addParticipantColor: UIKit.UIColor = MFUIColorSet.onlight01, addParticipantFont: UIKit.UIFont = MFUIFontSet.button2, groupOptionTitleColor: UIKit.UIColor = MFUIColorSet.errorRedColor, muteNotificationTitleColor: UIKit.UIColor = MFUIColorSet.onlight01, muteNotificationFont: UIKit.UIFont = MFUIFontSet.button2, switchTintColor: UIKit.UIColor = MFUIColorSet.lightBlue)
  public static var light: FlyUIKit.MFGroupInfoTheme {
    get
  }
  public static var dark: FlyUIKit.MFGroupInfoTheme {
    get
  }
  @objc deinit
}
public class MFCallLogTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var nameTextTitleColor: UIKit.UIColor
  public var nameTextFont: UIKit.UIFont
  public var dateTextColor: UIKit.UIColor
  public var dateTextFont: UIKit.UIFont
  public var durationTextColor: UIKit.UIColor
  public var durationTextFont: UIKit.UIFont
  public var underLineColor: UIKit.UIColor
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var searchbarTintColor: UIKit.UIColor
  public var searchbarPlaceholderColor: UIKit.UIColor
  public var searchbarIconColor: UIKit.UIColor
  public var searchbarNotfoundTextColor: UIKit.UIColor
  public var searchbarTextColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, navigationBarTintColor: UIKit.UIColor = MFUIColorSet.background50, navigationBarShadowColor: UIKit.UIColor = MFUIColorSet.onlight04, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h1, nameTextTitleColor: UIKit.UIColor = MFUIColorSet.onlight01, nameTextFont: UIKit.UIFont = MFUIFontSet.button1, dateTextColor: UIKit.UIColor = MFUIColorSet.onlight01, dateTextFont: UIKit.UIFont = MFUIFontSet.button1, durationTextColor: UIKit.UIColor = MFUIColorSet.onlight01, durationTextFont: UIKit.UIFont = MFUIFontSet.body3, underLineColor: UIKit.UIColor = MFUIColorSet.onlight04, searchbarTintColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarPlaceholderColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarIconColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarNotfoundTextColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarTextColor: UIKit.UIColor = MFUIColorSet.primary300)
  public static var light: FlyUIKit.MFCallLogTheme {
    get
  }
  public static var dark: FlyUIKit.MFCallLogTheme {
    get
  }
  @objc deinit
}
public class MFLocationTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var sendLocationTitleColor: UIKit.UIColor
  public var sendLocationTitleFont: UIKit.UIFont
  public var addressTitleColor: UIKit.UIColor
  public var addressTitleFont: UIKit.UIFont
  public var streetTitleColor: UIKit.UIColor
  public var streetTitleFont: UIKit.UIFont
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h1, sendLocationTitleColor: UIKit.UIColor = MFUIColorSet.lightBlue, sendLocationTitleFont: UIKit.UIFont = MFUIFontSet.body2, addressTitleColor: UIKit.UIColor = MFUIColorSet.background50, addressTitleFont: UIKit.UIFont = MFUIFontSet.h4, streetTitleColor: UIKit.UIColor = MFUIColorSet.background50, streetTitleFont: UIKit.UIFont = MFUIFontSet.body2)
  public static var light: FlyUIKit.MFLocationTheme {
    get
  }
  public static var dark: FlyUIKit.MFLocationTheme {
    get
  }
  @objc deinit
}
public class MFContactPreviewTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var contactNameColor: UIKit.UIColor
  public var contactNameFont: UIKit.UIFont
  public var phoneNumberColor: UIKit.UIColor
  public var phoneNumberFont: UIKit.UIFont
  public var statusColor: UIKit.UIColor
  public var statusFont: UIKit.UIFont
  public var underlineColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h1, contactNameColor: UIKit.UIColor = MFUIColorSet.background50, contactNameFont: UIKit.UIFont = MFUIFontSet.body2, phoneNumberColor: UIKit.UIColor = MFUIColorSet.background50, phoneNumberFont: UIKit.UIFont = MFUIFontSet.body2, statusColor: UIKit.UIColor = MFUIColorSet.background75, statusFont: UIKit.UIFont = MFUIFontSet.body2, underlineColor: UIKit.UIColor = MFUIColorSet.onlight01)
  public static var light: FlyUIKit.MFContactPreviewTheme {
    get
  }
  public static var dark: FlyUIKit.MFContactPreviewTheme {
    get
  }
  @objc deinit
}
public class MFCustomNotificationTheme {
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var contentTextFieldColor: UIKit.UIColor
  public var contentTextFieldFont: UIKit.UIFont
  public init(backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h4, contentTextFieldColor: UIKit.UIColor = MFUIColorSet.onlight01, contentTextFieldFont: UIKit.UIFont = MFUIFontSet.h1)
  public static var light: FlyUIKit.MFCustomNotificationTheme {
    get
  }
  public static var dark: FlyUIKit.MFCustomNotificationTheme {
    get
  }
  @objc deinit
}
public class MFForwardTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var contactNameColor: UIKit.UIColor
  public var contactNameFont: UIKit.UIFont
  public var underLineColor: UIKit.UIColor
  public var statusColor: UIKit.UIColor
  public var statusFont: UIKit.UIFont
  public var searchbarTintColor: UIKit.UIColor
  public var searchbarPlaceholderColor: UIKit.UIColor
  public var searchbarIconColor: UIKit.UIColor
  public var searchbarNotfoundTextColor: UIKit.UIColor
  public var searchbarTextColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h1, contactNameColor: UIKit.UIColor = MFUIColorSet.background50, contactNameFont: UIKit.UIFont = MFUIFontSet.body2, underLineColor: UIKit.UIColor = MFUIColorSet.ondark03, statusColor: UIKit.UIColor = MFUIColorSet.ondark03, searchbarTintColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarPlaceholderColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarIconColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarNotfoundTextColor: UIKit.UIColor = MFUIColorSet.primary300, searchbarTextColor: UIKit.UIColor = MFUIColorSet.primary300, statusFont: UIKit.UIFont = MFUIFontSet.caption5)
  public static var light: FlyUIKit.MFForwardTheme {
    get
  }
  public static var dark: FlyUIKit.MFForwardTheme {
    get
  }
  @objc deinit
}
public class MFViewMediaTheme {
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFont: UIKit.UIFont
  public var settingTitleColor: UIKit.UIColor
  public var settingTitleFont: UIKit.UIFont
  public var underLineColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = MFUIColorSet.primary300, backgroundColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleColor: UIKit.UIColor = MFUIColorSet.background50, headerTitleFont: UIKit.UIFont = MFUIFontSet.h1, settingTitleColor: UIKit.UIColor = MFUIColorSet.background50, settingTitleFont: UIKit.UIFont = MFUIFontSet.body2, underLineColor: UIKit.UIColor = MFUIColorSet.ondark03)
  public static var light: FlyUIKit.MFViewMediaTheme {
    get
  }
  public static var dark: FlyUIKit.MFViewMediaTheme {
    get
  }
  @objc deinit
}
public protocol MFUIForwardViewModelDelegate : FlyUIKit.MFUICommonViewModelDelegate {
  func forwardViewModel(_ viewModel: FlyUIKit.MFUIForwardViewModel, didChangeUsers contact: [MirrorFlySDK.ProfileDetails], needsToReload: Swift.Bool)
  func forwardViewModel(_ viewModel: FlyUIKit.MFUIForwardViewModel, didChangeGroups contact: [MirrorFlySDK.RecentChat], needsToReload: Swift.Bool)
  func forwardViewModel(_ viewModel: FlyUIKit.MFUIForwardViewModel, didChangeRecent contact: [MirrorFlySDK.RecentChat], needsToReload: Swift.Bool)
  func forwardViewModel(_ viewModel: FlyUIKit.MFUIForwardViewModel, didUpdateSelectedContacts selectedContacts: [MirrorFlySDK.ProfileDetails])
}
@objc @_hasMissingDesignatedInitializers open class MFUIForwardViewModel : ObjectiveC.NSObject {
  public var contactList: [MirrorFlySDK.ProfileDetails] {
    get
  }
  public func resetPaginationConstants()
  public func getUsersList(searchTerm: Swift.String)
  @objc deinit
}
public protocol MFUICreateChatModuleListDelegate : FlyUIKit.MFUIBaseSelectContactModuleListDelegate {
  func createChatModule(_ listComponent: FlyUIKit.MFUICreateChatModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func createChatModule(_ listComponent: FlyUIKit.MFUICreateChatModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  func createChatModuleDidSelectRetry(_ listComponent: FlyUIKit.MFUICreateChatModule.List)
  func createChatModule(_ listComponent: FlyUIKit.MFUICreateChatModule.List, willDisplay indexPath: Foundation.IndexPath)
}
public protocol MFUICreateChatModuleListDataSource : FlyUIKit.MFUIBaseSelectContactModuleListDataSource {
}
extension FlyUIKit.MFUICreateChatModule {
  @_inheritsConvenienceInitializers @objc(MFUICreateChatModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : FlyUIKit.MFUIBaseSelectContactModule.List {
    @objc @_Concurrency.MainActor(unsafe) public var searchString: Swift.String
    @objc @_Concurrency.MainActor(unsafe) public var type: FlyUIKit.ChatCreationType
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICreateChatModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUICreateChatModuleListDataSource)? {
      get
      set
    }
    @available(*, unavailable, renamed: "MFUICreateChatModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUICreateChatModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICreateChatModuleListDelegate, dataSource: any FlyUIKit.MFUICreateChatModuleListDataSource, theme: FlyUIKit.MFContactListTheme, chatType: FlyUIKit.ChatCreationType)
    @_Concurrency.MainActor(unsafe) @objc override open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath, selectedcontactList: [MirrorFlySDK.ProfileDetails]?)
  }
}
extension FlyUIKit.MFUICreateChatModule.List {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didSelectRetry()
}
extension FlyUIKit.MFUICreateChatModule.List {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
public protocol MFUIImageEditModuleInputDelegate : FlyUIKit.MFUICommonDelegate {
  func imageEditModuleDidStartTyping(_ inputComponent: FlyUIKit.MFUIImageEditModule.Input)
  func imageEditModuleDidEndTyping(_ inputComponent: FlyUIKit.MFUIImageEditModule.Input, inputText: Swift.String)
  func imageEditModule(_ inputComponent: FlyUIKit.MFUIImageEditModule.Input, didTapSend text: Swift.String)
  func imageEditModule(_ inputComponent: FlyUIKit.MFUIImageEditModule.Input, didTapAdd text: Swift.String)
  func imageEditModule(_ inputComponent: FlyUIKit.MFUIImageEditModule.Input, didTapResource type: FlyUIKit.MediaResourceType)
  func imageEditModule(_ inputComponent: FlyUIKit.MFUIImageEditModule.Input, didChangeText text: Swift.String)
  func imageEditModule(_ inputComponent: FlyUIKit.MFUIImageEditModule.Input, willChangeMode mode: FlyUIKit.MFUIMessageInputMode)
  func imageEditModule(_ inputComponent: FlyUIKit.MFUIChatViewParentModule.Input, didTapSend text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
}
public protocol MFUIImageEditModuleInputDataSource : AnyObject {
}
extension FlyUIKit.MFUIImageEditModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Input : UIKit.UIView, FlyUIKit.MFUICaptionInputViewDelegate {
    @objc @_Concurrency.MainActor(unsafe) public var messageInputView: UIKit.UIView?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIImageEditModuleInputDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUIImageEditModuleInputDataSource)?
    @available(*, unavailable, renamed: "MFUIImageEditModule.Input()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUIImageEditModule.Input()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFChatTheme? = nil)
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIImageEditModuleInputDelegate, dataSource: any FlyUIKit.MFUIImageEditModuleInputDataSource, theme: FlyUIKit.MFChatTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setCaptionText(text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func captionInputViewDidStartTyping()
    @objc @_Concurrency.MainActor(unsafe) public func captionInputViewDidEndTyping()
    @objc @_Concurrency.MainActor(unsafe) public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didSelectSend text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didChangeText text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func captionInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didSelectAdd text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func captionInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didSelectResource type: FlyUIKit.MediaResourceType)
    @objc @_Concurrency.MainActor(unsafe) public func captionInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: FlyUIKit.MFUICaptionInputView, didChangeSelection range: Foundation.NSRange)
    @objc @_Concurrency.MainActor(unsafe) public func captionInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeSelection range: Foundation.NSRange)
    @objc deinit
  }
}
public protocol MFUICallScreenModuleLocalVideoViewDelegate : FlyUIKit.MFUICommonDelegate {
  func CallScreenModule(_ LocalVideoViewComponent: FlyUIKit.MFUICallScreenModule.LocalVideoView, panGesture sender: UIKit.UIPanGestureRecognizer)
  func CallScreenModule(_ LocalVideoViewComponent: FlyUIKit.MFUICallScreenModule.LocalVideoView, tapGeture sender: UIKit.UITapGestureRecognizer)
}
extension FlyUIKit.MFUICallScreenModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class LocalVideoView : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var RtcLocalVideoView: WebRTC.RTCMTLVideoView?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICallScreenModuleLocalVideoViewDelegate)?
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICallScreenModuleLocalVideoViewDelegate)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public struct FlyUIKitConstants {
  public static var CONTAINER_ID: Swift.String
  public static var ENABLE_CONTACT_SYNC: Swift.Bool
  public static var IS_LIVE: Swift.Bool
  public static var WEB_LOGIN_URL: Swift.String
  public static var IS_MOBILE_NUMBER_LOGIN: Swift.Bool
  public static var IS_CALL_ENABLED: Swift.Bool
  public static var isRecentBackNeeded: Swift.Bool
  public static var isRecentRightButtonNeeded: Swift.Bool
  public static var userNameLimit: Swift.Int
  public static var Google_Place_Api_Key: Swift.String
  public static var Google_Translate_Key: Swift.String
}
public class MFUICallLogModule {
  public var headerComponent: FlyUIKit.MFUICallLogModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUICallLogModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUICallLogModule.Header? = nil, listComponent: FlyUIKit.MFUICallLogModule.List? = nil)
  @objc deinit
}
public protocol MFUICallLogModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func callLogModule(_ listComponent: FlyUIKit.MFUICallLogModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func didClickCallButton(indexPath: Foundation.IndexPath)
}
public protocol MFUICallLogModuleListDataSource : AnyObject {
  func callLogListModule(_ listComponent: FlyUIKit.MFUICallLogModule.List, callLogMemberInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.CallLog]?
}
extension FlyUIKit.MFUICallLogModule {
  @_inheritsConvenienceInitializers @objc(MFUICallLogModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var noCallLogView: UIKit.UIView
    @objc @_Concurrency.MainActor(unsafe) public var noCallLogsLabel: UIKit.UILabel
    @objc @_Concurrency.MainActor(unsafe) public var noCallLogsImageView: UIKit.UIImageView
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallLogTheme?
    @objc @_Concurrency.MainActor(unsafe) public var searchEnabled: Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public var searchText: Swift.String
    @_Concurrency.MainActor(unsafe) public var searchedCallLog: [MirrorFlySDK.CallLog]
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICallLogModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUICallLogModuleListDataSource)?
    @_Concurrency.MainActor(unsafe) public var callLogsList: [MirrorFlySDK.CallLog]? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUICallLogModule.Header?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICallLogModuleListDelegate, dataSource: any FlyUIKit.MFUICallLogModuleListDataSource, theme: FlyUIKit.MFCallLogTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallLogTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(callLogScreenCell: FlyUIKit.MFUICallLogScreenCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ profilecell: FlyUIKit.MFUICallLogScreenCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUICallLogModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
extension FlyUIKit.MFUICallLogModule.List : FlyUIKit.MFUICallLogModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didUpdateLeftBackButton leftBack: UIKit.UIView?)
}
public protocol MFUIImageEditModuleCollectionDelegate : FlyUIKit.MFUICommonDelegate {
  func imageEditModule(_ collectionComponent: FlyUIKit.MFUIImageEditModule.Collection, didSelectRowAt indexPath: Foundation.IndexPath)
}
public protocol MFUIImageEditModuleCollectionDataSource : AnyObject {
  func imageEditModule(_ collectionComponent: FlyUIKit.MFUIImageEditModule.Collection, imagesInCollection collectionView: UIKit.UICollectionView) -> [FlyUIKit.ImageData]?
}
extension FlyUIKit.MFUIImageEditModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Collection : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIImageEditModuleCollectionDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUIImageEditModuleCollectionDataSource)?
    @_Concurrency.MainActor(unsafe) public var imageData: [FlyUIKit.ImageData]? {
      get
    }
    @available(*, unavailable, renamed: "MFUIImageEditModule.Collection()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUIImageEditModule.Collection()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIImageEditModuleCollectionDelegate, dataSource: any FlyUIKit.MFUIImageEditModuleCollectionDataSource, theme: FlyUIKit.MFChatTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFChatTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func reloadCollectionView()
  }
}
extension FlyUIKit.MFUIImageEditModule.Collection : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
public protocol MFUIChatViewModelDataSource : FlyUIKit.MFUIBaseChatViewModelDataSource {
  func groupChatViewModel(_ viewModel: FlyUIKit.MFUIChatViewModel, startingPointIndexPathsForChat chat: MirrorFlySDK.ChatMessage?) -> [Foundation.IndexPath]?
}
public protocol MFUIChatViewModelDelegate : FlyUIKit.MFUIBaseChatViewModelDelegate {
}
@objc open class MFUIChatViewModel : FlyUIKit.MFUIBaseChatViewModel {
  weak public var delegate: (any FlyUIKit.MFUIChatViewModelDelegate)? {
    get
    set
  }
  weak public var dataSource: (any FlyUIKit.MFUIChatViewModelDataSource)? {
    get
    set
  }
  public init(chatJid: Swift.String? = nil, startingPoint: Swift.Int64? = LLONG_MAX, delegate: (any FlyUIKit.MFUIChatViewModelDelegate)? = nil, dataSource: (any FlyUIKit.MFUIChatViewModelDataSource)? = nil)
  override public func loadChat(initialLoad: Swift.Bool)
  public func deleteUnreadNotificationFromDB()
  override public func clearConversation(clearChatExceptStarred: Swift.Bool, completionHandler: @escaping MirrorFlySDK.FlyCompletionHandler)
  override public func updateTranslationMessage(messageId: Swift.String)
  override public func deleteMessageForMe(messageIdList: [Swift.String], completionHandler: @escaping MirrorFlySDK.FlyCompletionHandler)
  override public func deleteMessageForEveryOne(messageIdList: [Swift.String], completionHandler: @escaping MirrorFlySDK.FlyCompletionHandler)
  override public func checkMessagesAvailable() -> Swift.Bool
  @objc deinit
}
extension FlyUIKit.MFUIChatViewModel : MirrorFlySDK.MessageEventsDelegate {
  @objc dynamic public func onMediaStatusFailed(error: Swift.String, messageId: Swift.String, errorCode: Swift.Int)
  @objc dynamic public func clearAllConversationForSyncedDevice()
  @objc dynamic public func onMessagesCleared(toJid: Swift.String, deleteType: Swift.String?)
  @objc dynamic public func onMessageTranslated(message: MirrorFlySDK.ChatMessage, jid: Swift.String)
  @objc dynamic public func onMessageReceived(message: MirrorFlySDK.ChatMessage, chatJid: Swift.String)
  @objc dynamic public func onMessageStatusUpdated(messageId: Swift.String, chatJid: Swift.String, status: MirrorFlySDK.MessageStatus)
  @objc dynamic public func onMediaStatusUpdated(message: MirrorFlySDK.ChatMessage)
  public func onMediaStatusFailed(error: Swift.String, messageId: Swift.String)
  @objc dynamic public func onMediaProgressChanged(message: MirrorFlySDK.ChatMessage, progressPercentage: Swift.Float)
  @objc dynamic public func onMessagesClearedOrDeleted(messageIds: Swift.Array<Swift.String>)
  @objc dynamic public func onMessagesDeletedforEveryone(messageIds: Swift.Array<Swift.String>)
  @objc dynamic public func showOrUpdateOrCancelNotification()
  public func onMessagesCleared(toJid: Swift.String)
  @objc dynamic public func setOrUpdateFavourite(messageId: Swift.String, favourite: Swift.Bool, removeAllFavourite: Swift.Bool)
}
extension FlyUIKit.MFUIChatViewModel : MirrorFlySDK.ProfileEventsDelegate {
  @objc dynamic public func userCameOnline(for jid: Swift.String)
  @objc dynamic public func userWentOffline(for jid: Swift.String)
  @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @objc dynamic public func myProfileUpdated()
  @objc dynamic public func usersProfilesFetched()
  @objc dynamic public func blockedThisUser(jid: Swift.String)
  @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @objc dynamic public func userBlockedMe(jid: Swift.String)
  @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @objc dynamic public func hideUserLastSeen()
  @objc dynamic public func getUserLastSeen()
  @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
extension FlyUIKit.MFUIChatViewModel : MirrorFlySDK.TypingStatusDelegate {
  public func onChatTypingStatus(userJid: Swift.String, status: MirrorFlySDK.TypingStatus)
  public func onGroupTypingStatus(groupJid: Swift.String, groupUserJid: Swift.String, status: MirrorFlySDK.TypingStatus)
}
extension FlyUIKit.MFUIChatViewModel : MirrorFlySDK.ConnectionEventDelegate {
  public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  public func onReconnecting()
  public func onConnected()
  public func onDisconnected()
  public func onConnectionNotAuthorized()
}
public class MFUIUserProfileModule {
  public var headerComponent: FlyUIKit.MFUIUserProfileModule.Header? {
    get
    set
  }
  public var listViewcomponent: FlyUIKit.MFUIUserProfileModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIUserProfileModule.Header? = nil, listComponent: FlyUIKit.MFUIUserProfileModule.List? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MFUIBaseSelectContactModule {
  @objc deinit
}
@objc public enum ProfileAttributeType : Swift.Int {
  case email
  case mobileNumber
  case viewAllMedia
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ChatCreationType : Swift.Int {
  case newSinglehChat
  case newGroupChat
  case settings
  case forward
  case addParticipants
  case inviteParticipants
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MediaResourceType : Swift.Int {
  case camera
  case Gallery
  case Document
  case Audio
  case Remove
  case Contact
  case Location
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NewMessageInfoItemType : Swift.Int {
  case tooltip
  case button
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessagePosition : Swift.Int {
  case left
  case right
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessageGroupPosition : Swift.Int {
  case none
  case top
  case middle
  case bottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MFUIMessageReceiptState : Swift.Int {
  case none
  case delivered
  case read
  case notUsed
  @available(*, unavailable, renamed: "read")
  case readReceipt
  @available(*, unavailable, renamed: "delivered")
  case deliveryReceipt
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum EmptyViewType : Swift.Int {
  case none
  case noInternet
  case noChats
  case noMessages
  case noMembers
  case noMutedMembers
  case noBannedMembers
  case noSearchResults
  case noContactsFound
  case noMediaFound
  case noDocumentFound
  case noLinksFound
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ContactListType : Swift.Hashable {
  case none
  case createChat
  case channelMembers
  case inviteUser
  case reaction
  case operators
  case mutedMembers
  case bannedMembers
  case participants
  case suggestedMention(_: Swift.Bool)
  public static func == (a: FlyUIKit.ContactListType, b: FlyUIKit.ContactListType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CallMode : Swift.String {
  case Incoming
  case Outgoing
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CallType : Swift.String {
  case Audio
  case Video
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeleteAction : Swift.String {
  case deleteForMe
  case deleteForEveryOne
  case cancel
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CallStatus : Swift.String {
  case calling
  case ringing
  case attended
  case connecting
  case connected
  case disconnected
  case reconnecting
  case reconnected
  case tryagain
  case onHold
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum MessageMenuItem : Swift.Int {
  case reply
  case messageInfo
  case forward
  case copy
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ProgressType : Swift.Int {
  case image
  case document
  case audio
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ChatActions : Swift.String, Swift.CaseIterable {
  case clearAllConversation
  case emailChat
  case report
  case search
  case block
  case unblock
  public init?(rawValue: Swift.String)
  public typealias AllCases = [FlyUIKit.ChatActions]
  public typealias RawValue = Swift.String
  public static var allCases: [FlyUIKit.ChatActions] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIMediaMessageCell : FlyUIKit.MFUIContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var mediaMessage: MirrorFlySDK.ChatMessage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var progressViewDelegate: (any FlyUIKit.MFUIProgressDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: FlyUIKit.MFUIBaseMessageCellParams)
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, size: CoreFoundation.CGSize? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onClickDownloadButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickCloseButton(_ sender: Any)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension FlyUIKit.MFUIMediaMessageCell : FlyUIKit.MFUIProgressDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onDownloadMedia()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onCloseMedia()
}
extension FlyUIKit.MFUIMediaMessageCell : FlyUIKit.MFUIAudioContentViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onPlayOrPause(sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func sliderAction(slider: UIKit.UISlider)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func sliderTapGesture(tapGesture: UIKit.UITapGestureRecognizer, slider: UIKit.UISlider)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIDocumentContentView : FlyUIKit.MFUIBaseMediaContentView {
  @_Concurrency.MainActor(unsafe) public var documentIcon: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var progressContentView: FlyUIKit.MFUIProgressContentView
  @_Concurrency.MainActor(unsafe) public var fileNameLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var fileStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func configure(message: MirrorFlySDK.ChatMessage, position: FlyUIKit.MessagePosition, delegate: any FlyUIKit.MFUIProgressDelegate, audioViewDelegate: any FlyUIKit.MFUIAudioContentViewDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFSettingsTableCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFSettingsTheme
  @_Concurrency.MainActor(unsafe) open func configCell(theme: FlyUIKit.MFSettingsTheme, settingsmodel: FlyUIKit.settingsModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MFUILocationModuleMapViewDelegate : FlyUIKit.MFUICommonDelegate {
  func locationModule(_ listComponent: FlyUIKit.MFUILocationModule.Mapview, latitude: Swift.Double, longitude: Swift.Double)
  func enablePermissionSetting()
  func goToPrevious()
}
extension FlyUIKit.MFUILocationModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Mapview : UIKit.UIView, CoreLocation.CLLocationManagerDelegate, GoogleMaps.GMSMapViewDelegate {
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFLocationTheme?
    @objc @_Concurrency.MainActor(unsafe) public var mapview: GoogleMaps.GMSMapView?
    @objc @_Concurrency.MainActor(unsafe) public var locationView: UIKit.UIView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUILocationModuleMapViewDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var sendLocationLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var streetLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var addressLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var locationVstack: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var sendButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var locationHStackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var locationManager: CoreLocation.CLLocationManager
    @objc @_Concurrency.MainActor(unsafe) public var location: CoreLocation.CLLocation!
    @_Concurrency.MainActor(unsafe) public var latitude: Swift.Double?
    @_Concurrency.MainActor(unsafe) public var longitude: Swift.Double?
    @objc @_Concurrency.MainActor(unsafe) public var isForView: Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public var isMapZoomed: Swift.Bool
    @_Concurrency.MainActor(unsafe) public var mapZoomLevel: Swift.Float?
    @objc @_Concurrency.MainActor(unsafe) public var marker: GoogleMaps.GMSMarker?
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUILocationModuleMapViewDelegate, theme: FlyUIKit.MFLocationTheme, latitude: Swift.Double, longitude: Swift.Double, isForView: Swift.Bool)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFLocationTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
    @_Concurrency.MainActor(unsafe) @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
    @_Concurrency.MainActor(unsafe) @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
    @_Concurrency.MainActor(unsafe) @objc public func mapView(_ mapView: GoogleMaps.GMSMapView, idleAt position: GoogleMaps.GMSCameraPosition)
    @_Concurrency.MainActor(unsafe) @objc public func mapView(_ mapView: GoogleMaps.GMSMapView, willMove gesture: Swift.Bool)
    @_Concurrency.MainActor(unsafe) @objc public func mapView(_ mapView: GoogleMaps.GMSMapView, didTap marker: GoogleMaps.GMSMarker) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc public func mapView(_ mapView: GoogleMaps.GMSMapView, didTapAt coordinate: CoreLocation.CLLocationCoordinate2D)
    @_Concurrency.MainActor(unsafe) @objc public func didTapMyLocationButton(for mapView: GoogleMaps.GMSMapView) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc public func mapView(_ mapView: GoogleMaps.GMSMapView, didChange position: GoogleMaps.GMSCameraPosition)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public class MFUILanguageModule {
  public var headerComponent: FlyUIKit.MFUILanguageModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUILanguageModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUILanguageModule.Header? = nil, listComponent: FlyUIKit.MFUILanguageModule.List? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIPreviewCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var selectedImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageCellTheme
  @_Concurrency.MainActor(unsafe) open func configure(with imageURL: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CropperState : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIAdminMessageCell : FlyUIKit.MFUIBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: FlyUIKit.MFUIBaseMessageCellParams)
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUICreateGroupChatViewController : FlyUIKit.MFBaseViewController, FlyUIKit.MFUICreateGroupChatModuleHeaderDelegate, FlyUIKit.MFUICreateGroupChatModuleCreateGroupViewDelegate, UIKit.UITextFieldDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var createGroupViewComponent: FlyUIKit.MFUICreateGroupChatModule.CreateGroupView?
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: FlyUIKit.MFUICreateGroupChatViewModel?
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCreateGroupTheme
  @available(*, unavailable, renamed: "MFUICreateGroupChatViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "MFUICreateGroupChatViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(contacts: [MirrorFlySDK.ProfileDetails]? = nil, type: FlyUIKit.ChatCreationType = .newGroupChat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(contacts: [MirrorFlySDK.ProfileDetails]? = nil, type: FlyUIKit.ChatCreationType = .newGroupChat)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) public func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func createGroupChatModule(_ headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func createGroupChatModule(_ createGroupComponent: FlyUIKit.MFUICreateGroupChatModule.CreateGroupView, didUpdateProfileImageView profileImageView: UIKit.UIImageView?)
  @objc @_Concurrency.MainActor(unsafe) public func createGroupChatModule(_ createGroupComponent: FlyUIKit.MFUICreateGroupChatModule.CreateGroupView, didUpdateGroupNameTitle groupNameTitle: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension FlyUIKit.MFUIMessageInfoModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class messageView : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var userMessageView: FlyUIKit.MFUIUserMessageCell
    @objc @_Concurrency.MainActor(unsafe) public var mediaMessageView: FlyUIKit.MFUIMediaMessageCell
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageInfoTheme?
    @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) open func configure(theme: FlyUIKit.MFMessageInfoTheme, message: MirrorFlySDK.ChatMessage)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFMessageInfoTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public protocol MFUISearchBarDelegate : AnyObject {
  func passChangeTextString(searchbar: UIKit.UISearchBar, text: Swift.String)
  func didClickCancelSearch()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MFUISearchBarView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var searchbar: UIKit.UISearchBar
  @_Concurrency.MainActor(unsafe) public var searchText: Swift.String
  @_Concurrency.MainActor(unsafe) public var searchBarHeight: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc deinit
}
extension FlyUIKit.MFUISearchBarView : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
}
public protocol MFUIMessageInputViewDelegate : AnyObject {
  func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didSelectSend text: Swift.String)
  func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didSelectResource type: FlyUIKit.MediaResourceType)
  func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeText text: Swift.String)
  func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
  func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, willChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
  func messageInputViewDidStartTyping()
  func messageInputViewDidEndTyping()
  func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didTapAudioRecord message: MirrorFlySDK.ChatMessage?)
  func didTapDelete()
  func didTapDeleteCancel()
  func didTapAudio()
  func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeSelection range: Foundation.NSRange)
}
extension FlyUIKit.MFUIMessageInputViewDelegate {
  public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didSelectSend text: Swift.String)
  public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didSelectResource type: FlyUIKit.MediaResourceType)
  public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeText text: Swift.String)
  public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
  public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, willChangeMode mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage?)
  public func messageInputViewDidStartTyping()
  public func messageInputViewDidEndTyping()
  public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, shouldInteractWith url: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  public func messageInputView(_ messageInputView: FlyUIKit.MFUIMessageInputView, didChangeSelection range: Foundation.NSRange)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class MFUIMessageInputView : FlyUIKit.MFUIView, FlyUIKit.MFUIActionSheetDelegate, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) public var addButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textView: UIKit.UITextView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var audioButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var sendButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var sendAudioButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var audioMicButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var micBlueButtonAnimated: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var audioHiddenRecordButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var deleteButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var deleteCancelButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var inputHStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var inputAudioRecordHStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var audioSliderCancelHStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var replyMessageView: FlyUIKit.MFUIRepyMessageInputView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leadingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var trailingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var textViewMinHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var textViewMaxHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var showsSendButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var textViewLeadingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var textViewTrailingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var layoutInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) public var defaultAttributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var mentionedAttributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bottomDeleteView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var durationLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leftArrowImgView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var sliderCancelLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textViewLeadingPaddingViewWidtConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var audioMicWithConstraint: UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) public var audioSlideViewTrailing: UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) public var audioSlideViewWidth: UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) public var availableFeatures: MirrorFlySDK.AvailableFeaturesModel
  @_Concurrency.MainActor(unsafe) public var audioButtonTimer: Foundation.Timer
  @_Concurrency.MainActor(unsafe) public var recordedAudioFileName: Swift.String
  @_Concurrency.MainActor(unsafe) public var recordedAuidoUrl: Foundation.URL?
  @_Concurrency.MainActor(unsafe) public var didTapSendAudioButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isAudioMaximumTimeReached: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var audioRecordingDuration: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var currentMessageTextViewHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var currentToolBarViewHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var currentAudioUrl: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @available(*, unavailable, renamed: "MFUIMessageInputView()")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var mode: FlyUIKit.MFUIMessageInputMode {
    get
  }
  @_Concurrency.MainActor(unsafe) open func setMode(_ mode: FlyUIKit.MFUIMessageInputMode, message: MirrorFlySDK.ChatMessage? = nil)
  @_Concurrency.MainActor(unsafe) public func updateReplyToText(profile: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) public func startReplyMode(message: MirrorFlySDK.ChatMessage)
  @_Concurrency.MainActor(unsafe) public func endReplyMode()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setErrorState()
  @_Concurrency.MainActor(unsafe) public func endTypingMode()
  @_Concurrency.MainActor(unsafe) public func setupTextViewHeight(textView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func updateTextViewHeight()
  @objc @_Concurrency.MainActor(unsafe) open func onClickAddButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickAudioButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickCancelButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickDeleteButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickDeleteCancelButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickAudioAnimatedButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickSendButton(_ sender: Any)
  @_Concurrency.MainActor(unsafe) public func showAudioRecordingUI(show: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func invalidateAnimationTimer()
  @_Concurrency.MainActor(unsafe) public func handleAudioRecordMaximumTimeReached()
  @_Concurrency.MainActor(unsafe) public func udpateAudioRcordingTime(duration: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func resetAudioRecording(isCancel: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) public func updateTextandUI()
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) public func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MFUIViewControllerSet {
  public static var RecentChatListViewController: FlyUIKit.MFUIRecentChatListViewController.Type
  public static var ChatViewParentController: FlyUIKit.MFUIChatViewParentController.Type
  public static var CreateChatViewController: FlyUIKit.MFUICreateChatViewController.Type
  public static var CreateGroupChatViewController: FlyUIKit.MFUICreateGroupChatViewController.Type
  public static var CallScreenViewController: FlyUIKit.MFUICallScreenViewController.Type
  public static var messageInfoViewcontroller: FlyUIKit.MFUIMessageInfoController.Type
  public static var userProfileViewcontroller: FlyUIKit.MFUIUserProfileViewController.Type
  public static var groupInfoViewcontroller: FlyUIKit.MFUIGroupInfoViewController.Type
  public static var settingsViewController: FlyUIKit.MFUISettingsController.Type
  public static var translateViewController: FlyUIKit.MFUITranslateViewController.Type
  public static var languageViewController: FlyUIKit.MFUILanguageViewController.Type
  public static var updateprofileViewController: FlyUIKit.MFUIUpdateProfileViewController.Type
  public static var callParticipantController: FlyUIKit.MFUICallParticipantController.Type
  public static var locationViewController: FlyUIKit.MFUILocationViewController.Type
  public static var contactPreviewController: FlyUIKit.MFUIContactPreviewController.Type
  public static var viewMediaController: FlyUIKit.MFUIViewMediaController.Type
  public static var forwardViewController: FlyUIKit.MFUIForwardViewController.Type
  @objc deinit
}
public protocol MFUICommonViewModelDelegate : FlyUIKit.MFUICommonDelegate {
  func connectionStateDidChange(_ isConnected: Swift.Bool)
  func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
}
extension FlyUIKit.MFUICommonViewModelDelegate {
  public func connectionStateDidChange(_ isConnected: Swift.Bool)
  public func didReceiveError(_ error: Swift.String?)
}
public class MFUICreateChatModule {
  public var headerComponent: FlyUIKit.MFUICreateChatModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUICreateChatModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUICreateChatModule.Header? = nil, listComponent: FlyUIKit.MFUICreateChatModule.List? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIReplyUserMessageView : FlyUIKit.MFUIReplyBaseMessageView {
  @_Concurrency.MainActor(unsafe) public var quotedMessageLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var UserNameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var captionVstackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: FlyUIKit.MFUIReplyBaseMessageViewParams)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUILocationViewController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFLocationTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUILocationModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var mapViewcomponent: FlyUIKit.MFUILocationModule.Mapview?
  @objc @_Concurrency.MainActor(unsafe) public var currentLatitude: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) public var currentLongitude: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) public var isForView: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc deinit
}
extension FlyUIKit.MFUILocationViewController : FlyUIKit.MFUILocationModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func locationModule(_ headerComponent: FlyUIKit.MFUILocationModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func locationModule(_ headerComponent: FlyUIKit.MFUILocationModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func locationModule(_ headerComponent: FlyUIKit.MFUILocationModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUILocationViewController : FlyUIKit.MFUILocationModuleMapViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func locationModule(_ listComponent: FlyUIKit.MFUILocationModule.Mapview, latitude: Swift.Double, longitude: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func enablePermissionSetting()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func goToPrevious()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFViewMediaTableCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFSettingsTheme
  @_Concurrency.MainActor(unsafe) open func configCell(theme: FlyUIKit.MFSettingsTheme, settingsmodel: FlyUIKit.settingsModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MFUINavigationTitleView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String?
  @_Concurrency.MainActor(unsafe) public var textAlignment: UIKit.NSTextAlignment
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "MFUINavigationTitleView.init(frame:)")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public enum AspectRatio {
  case original
  case freeForm
  case square
  case ratio(width: Swift.Int, height: Swift.Int)
}
extension FlyUIKit.AspectRatio : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FlyUIKit.AspectRatio : Swift.Equatable {
  public static func == (lhs: FlyUIKit.AspectRatio, rhs: FlyUIKit.AspectRatio) -> Swift.Bool
}
public class MFUIBaseChatViewModule {
  public var headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUIBaseChatViewModule.List? {
    get
    set
  }
  public var inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header? = nil, listComponent: FlyUIKit.MFUIBaseChatViewModule.List? = nil, inputComponent: FlyUIKit.MFUIBaseChatViewModule.Input? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIBaseChatCell : FlyUIKit.MFUITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var recenChat: MirrorFlySDK.RecentChat? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var chatMessage: MirrorFlySDK.ChatMessage? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var contactDetails: MirrorFlySDK.ProfileDetails? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var singleMessageStatus: FlyUIKit.Messagestatus? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var groupMessageStatus: FlyUIKit.participantDetails? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatCellTheme
  @objc @_Concurrency.MainActor(unsafe) open func configure(chat: MirrorFlySDK.RecentChat, chatMessage: MirrorFlySDK.ChatMessage)
  @objc @_Concurrency.MainActor(unsafe) open func configureContact(detail: MirrorFlySDK.ProfileDetails)
  @objc @_Concurrency.MainActor(unsafe) open func configureMessageStatus(chat: FlyUIKit.Messagestatus)
  @objc @_Concurrency.MainActor(unsafe) open func configureGroupMessageStatus(chat: FlyUIKit.participantDetails)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CallNotificationDelegate : ObjectiveC.NSObject {
  func onCallAttended(vc: FlyUIKit.MFUICallScreenViewController?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIRecentChatCell : FlyUIKit.MFUIBaseChatCell {
  @objc @_Concurrency.MainActor(unsafe) public var coverImage: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var separatorLine: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let titleSpacer: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let messageSpacer: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var unreadCount: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var lastUpdatedTimeLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var deliveryStatus: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var imageIcon: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var muteImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentStackView: FlyUIKit.MFUIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var infoStackView: FlyUIKit.MFUIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleStackView: FlyUIKit.MFUIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageStackView: FlyUIKit.MFUIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let coverImageSize: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public let unreadCountSize: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public let imageIconSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @objc @_Concurrency.MainActor(unsafe) public var messageHstackLeading: UIKit.NSLayoutConstraint
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func configure(chat: MirrorFlySDK.RecentChat, chatMessage: MirrorFlySDK.ChatMessage)
  @_Concurrency.MainActor(unsafe) @objc override open func configureContact(detail: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc override open func configureMessageStatus(chat: FlyUIKit.Messagestatus)
  @_Concurrency.MainActor(unsafe) @objc override open func configureGroupMessageStatus(chat: FlyUIKit.participantDetails)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol MFUIForwardModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIForwardModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIForwardModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFForwardTheme?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIForwardModuleHeaderDelegate, theme: FlyUIKit.MFForwardTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFForwardTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
  }
}
@objc @_inheritsConvenienceInitializers open class MFUIGroupInfoViewModel : ObjectiveC.NSObject {
  public var isExistMember: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MFUILayoutableButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var contentEdgeInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var imageEdgeInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var titleEdgeInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public class MFUIGroupInfoModule {
  public var headerComponent: FlyUIKit.MFUIGroupInfoModule.Header? {
    get
    set
  }
  public var listViewcomponent: FlyUIKit.MFUIGroupInfoModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIGroupInfoModule.Header? = nil, listComponent: FlyUIKit.MFUIGroupInfoModule.List? = nil)
  @objc deinit
}
public class MFUICallScreenModule {
  public var headerComponent: FlyUIKit.MFUICallScreenModule.Header? {
    get
    set
  }
  public var hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter? {
    get
    set
  }
  public var retryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter? {
    get
    set
  }
  public var muteViewComponent: FlyUIKit.MFUICallScreenModule.MuteView? {
    get
    set
  }
  public var callOverlayComponent: FlyUIKit.MFUICallScreenModule.CallOverlayView? {
    get
    set
  }
  public var remoteVideoComponent: FlyUIKit.MFUICallScreenModule.RemoteVideoView? {
    get
    set
  }
  public var localVideoComponent: FlyUIKit.MFUICallScreenModule.LocalVideoView? {
    get
    set
  }
  public var groupCallListComponent: FlyUIKit.MFUICallScreenModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUICallScreenModule.Header? = nil, hangupFooterComponent: FlyUIKit.MFUICallScreenModule.HangupFooter? = nil, retryFooterComponent: FlyUIKit.MFUICallScreenModule.RetryFooter? = nil, muteViewComponent: FlyUIKit.MFUICallScreenModule.MuteView? = nil, callOverlayComponent: FlyUIKit.MFUICallScreenModule.CallOverlayView? = nil, localVideoComponent: FlyUIKit.MFUICallScreenModule.LocalVideoView? = nil, remoteVideoComponent: FlyUIKit.MFUICallScreenModule.RemoteVideoView? = nil, groupCallListComponent: FlyUIKit.MFUICallScreenModule.List? = nil)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUIGroupInfoViewController : FlyUIKit.MFBaseViewController, FlyUIKit.MFUIGroupInfoModuleListDataSource {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFGroupInfoTheme
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUIGroupInfoModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var headerViewcomponent: FlyUIKit.MFUIGroupInfoModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var groupMembers: [MirrorFlySDK.GroupParticipantDetail]
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc @_Concurrency.MainActor(unsafe) open func groupMemberListModule(_ listComponent: FlyUIKit.MFUIGroupInfoModule.List, groupMemberInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.GroupParticipantDetail]?
  @objc deinit
}
extension FlyUIKit.MFUIGroupInfoViewController : FlyUIKit.MFUIGroupInfoModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func groupInfoModule(_ listComponent: FlyUIKit.MFUIGroupInfoModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickHeaderBackBtn()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickHeaderImageBtn()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickHeaderAddPariticpantBtn()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickHeaderMuteSwitchBtn(switchState: UIKit.UISwitch)
}
extension FlyUIKit.MFUIGroupInfoViewController : MirrorFlySDK.GroupEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didAddNewMemeberToGroup(groupJid: Swift.String, newMemberJid: Swift.String, addedByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didRemoveMemberFromGroup(groupJid: Swift.String, removedMemberJid: Swift.String, removedByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didFetchGroupProfile(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didUpdateGroupProfile(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didMakeMemberAsAdmin(groupJid: Swift.String, newAdminMemberJid: Swift.String, madeByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didRemoveMemberFromAdmin(groupJid: Swift.String, removedAdminMemberJid: Swift.String, removedByMemberJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didDeleteGroupLocally(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didLeftFromGroup(groupJid: Swift.String, leftUserJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didCreateGroup(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didFetchGroups(groups: [MirrorFlySDK.ProfileDetails])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didFetchGroupMembers(groupJid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didReceiveGroupNotificationMessage(message: MirrorFlySDK.ChatMessage)
}
extension FlyUIKit.MFUIGroupInfoViewController : FlyUIKit.MFUIActionSheetDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
}
extension FlyUIKit.MFUIGroupInfoViewController : MirrorFlySDK.ConnectionEventDelegate {
  @_Concurrency.MainActor(unsafe) public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onReconnecting()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onDisconnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnectionNotAuthorized()
}
extension FlyUIKit.MFUIGroupInfoViewController : MirrorFlySDK.ProfileEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userCameOnline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userWentOffline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func myProfileUpdated()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersProfilesFetched()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func hideUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
public enum QCropper {
  public enum Config {
    public static var croppingImageShortSideMaxSize: CoreFoundation.CGFloat
    public static var croppingImageLongSideMaxSize: CoreFoundation.CGFloat
    public static var highlightColor: UIKit.UIColor
    public static var resourceBundle: Foundation.Bundle
  }
}
public protocol MFUICallLogModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func callLogModule(_ headerComponent: FlyUIKit.MFUICallLogModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUICallLogModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : FlyUIKit.MFUIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICallLogModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallLogTheme
    @objc @_Concurrency.MainActor(unsafe) public var type: FlyUIKit.ChatCreationType
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICallLogModuleHeaderDelegate, theme: FlyUIKit.MFCallLogTheme)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallLogTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  }
}
public protocol MFUIBaseChatViewModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateVoiceCallButton rightItem: UIKit.UIBarButtonItem?)
  func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didTapVoiceCallButton leftItem: UIKit.UIBarButtonItem)
  func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateVideoCallButton rightItem: UIKit.UIBarButtonItem?)
  func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didTapThreeDotButton leftItem: UIKit.UIBarButtonItem)
  func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didUpdateThreeDotButton rightItem: UIKit.UIBarButtonItem?)
  func baseChatViewModule(_ headerComponent: FlyUIKit.MFUIBaseChatViewModule.Header, didTapVideoCallButton leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIBaseChatViewModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var threeDotButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var VideoCallButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var VoiceCallButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var titleSpacer: UIKit.UIView
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatTheme?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any FlyUIKit.MFUIBaseChatViewModuleHeaderDelegate)?
    @available(*, unavailable, renamed: "MFUIBaseChatViewModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "MFUIBaseChatViewModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFChatTheme? = nil)
    @_Concurrency.MainActor(unsafe) open func updateStyles(theme: FlyUIKit.MFChatTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapVoiceCallButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapVideoCallButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapThreeDotButton()
    @objc deinit
  }
}
public class MFUICreateGroupChatModule {
  public var headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header? {
    get
    set
  }
  public var createGroupViewComponent: FlyUIKit.MFUICreateGroupChatModule.CreateGroupView? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUICreateGroupChatModule.Header? = nil, createGroupViewComponent: FlyUIKit.MFUICreateGroupChatModule.CreateGroupView? = nil)
  @objc deinit
}
public protocol MFUIBaseSelectContactModuleListDelegate : FlyUIKit.MFUICommonDelegate {
}
public protocol MFUIBaseSelectContactModuleListDataSource : AnyObject {
  func baseSelectContactModule(_ listComponent: FlyUIKit.MFUIBaseSelectContactModule.List, usersInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
  func baseSelectContactModule(_ listComponent: FlyUIKit.MFUIBaseSelectContactModule.List, selectedUsersInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
}
extension FlyUIKit.MFUIBaseSelectContactModule {
  @_inheritsConvenienceInitializers @objc(MFUIBaseChatSettingsModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var chatType: FlyUIKit.ChatCreationType
    @objc @_Concurrency.MainActor(unsafe) public var contactCell: UIKit.UITableViewCell?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFContactListTheme?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any FlyUIKit.MFUIBaseSelectContactModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var baseDataSource: (any FlyUIKit.MFUIBaseSelectContactModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var contactList: [MirrorFlySDK.ProfileDetails]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var selectedContactList: [MirrorFlySDK.ProfileDetails]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var showLoading: Swift.Bool
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFContactListTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func isSelectedContact(_ user: MirrorFlySDK.ProfileDetails) -> Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public func register(contactCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath, selectedcontactList: [MirrorFlySDK.ProfileDetails])
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @objc @_Concurrency.MainActor(unsafe) public func updateEmptyView(type: FlyUIKit.EmptyViewType)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  }
}
extension FlyUIKit.MFUIBaseSelectContactModule.List : FlyUIKit.MFUIEmptyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
}
extension FlyUIKit.MFUIBaseSelectContactModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class ImageView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension FlyUIKit.ImageView {
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var highlightedImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var animationImages: [UIKit.UIImage]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var highlightedAnimationImages: [UIKit.UIImage]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var animationDuration: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var animationRepeatCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func startAnimating()
  @_Concurrency.MainActor(unsafe) open func stopAnimating()
  @_Concurrency.MainActor(unsafe) open var isAnimating: Swift.Bool {
    get
  }
}
public typealias MFUINewMessageInfoHandler = () -> Swift.Void
@objc @_Concurrency.MainActor(unsafe) open class MFUINewMessageInfo : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var messageInfoButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var actionHandler: FlyUIKit.MFUINewMessageInfoHandler?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public init(type: FlyUIKit.NewMessageInfoItemType = .tooltip)
  @available(*, unavailable, renamed: "MFUINewMessageInfo.init(frame:)")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open func onClickNewMessageInfo()
  @_Concurrency.MainActor(unsafe) open func updateCount(count: Swift.Int, actionHandler: FlyUIKit.MFUINewMessageInfoHandler?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUICallParticipantCell : FlyUIKit.MFUITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userNickname: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var nicknameLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userIdLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var checkBox: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var operatorLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var separateView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFChatCellTheme
  @_Concurrency.MainActor(unsafe) public var type: FlyUIKit.ContactListType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configure(contact: MirrorFlySDK.ProfileDetails, searchString: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIDeleteMessageCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageCellTheme
  @objc @_Concurrency.MainActor(unsafe) public var multiSelectButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeHstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timeRightHstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var deleteRightHstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var deleteLeftHstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configUpdateCell(message: MirrorFlySDK.ChatMessage)
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: FlyUIKit.MFUIBaseMessageCellParams)
  @objc @_Concurrency.MainActor(unsafe) open func onTapMultiSelect(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onLongPressContentView(sender: UIKit.UILongPressGestureRecognizer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MFUIAudioContentViewDelegate {
  func onPlayOrPause(sender: UIKit.UIButton)
  func sliderAction(slider: UIKit.UISlider)
  func sliderTapGesture(tapGesture: UIKit.UITapGestureRecognizer, slider: UIKit.UISlider)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIAudioContentView : FlyUIKit.MFUIBaseMediaContentView {
  @_Concurrency.MainActor(unsafe) public var audioIcon: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var playIconButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public var audioPlaySlider: UIKit.UISlider
  @_Concurrency.MainActor(unsafe) public var progressContentView: FlyUIKit.MFUIProgressContentView
  @_Concurrency.MainActor(unsafe) public var durationLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var sliderVStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var audioStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func configure(message: MirrorFlySDK.ChatMessage, position: FlyUIKit.MessagePosition, delegate: any FlyUIKit.MFUIProgressDelegate, audioViewDelegate: any FlyUIKit.MFUIAudioContentViewDelegate)
  @_Concurrency.MainActor(unsafe) open func updateReceiverImageCell(message: MirrorFlySDK.ChatMessage)
  @_Concurrency.MainActor(unsafe) open func updateSenderImageCell(message: MirrorFlySDK.ChatMessage)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MFUIStringSet {
  public static var Cancel: Swift.String
  public static var OK: Swift.String
  public static var Retry: Swift.String
  public static var Save: Swift.String
  public static var Copy: Swift.String
  public static var Delete: Swift.String
  public static var Edit: Swift.String
  public static var Remove: Swift.String
  public static var Camera: Swift.String
  public static var Gallery: Swift.String
  public static var Document: Swift.String
  public static var ActionDocument: Swift.String
  public static var Audio: Swift.String
  public static var contact: Swift.String
  public static var location: Swift.String
  public static var Loading: Swift.String
  public static var Invite: Swift.String
  public static var TakePhoto: Swift.String
  public static var ChoosePhoto: Swift.String
  public static var RemovePhoto: Swift.String
  public static var ViewLibrary: Swift.String
  public static var Search: Swift.String
  public static var Settings: Swift.String
  public static var Reply: Swift.String
  public static var Forward: Swift.String
  public static var MessageInfo: Swift.String
  public static var saveContact: Swift.String
  public static var shareContact: Swift.String
  public static var send: Swift.String
  public static var okay: Swift.String
  public static var plsSelectOneContact: Swift.String
  public static var Alert_Delete: Swift.String
  public static var Alert_Allow_PhotoLibrary_Access: Swift.String
  public static var Alert_Allow_PhotoLibrary_Access_Message: Swift.String
  public static var Alert_Allow_call_member_restriction_Message: Swift.String
  public static var Date_Yesterday: Swift.String
  public static var Date_Year: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Day: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Month: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Hour: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Min: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Ago: Swift.String
  public static var Date_On: Swift.String
  public static var ChatList_Header_Title: Swift.String
  public static var CreateGroupChat_Header_Title: Swift.String
  public static var Add_Participant_Title: Swift.String
  public static var CreateGroupChat_Header_Right_Title: Swift.String
  public static var CreateGroupChat_Header_Right_Create_Title: Swift.String
  public static var CreateGroupChat_Header_Add_Title: Swift.String
  public static var ChatList_Last_File_Message: Swift.String
  public static var Forward_Header_Send_Title: Swift.String
  public static var forwardTo: Swift.String
  public static var Channel_Name_Default: Swift.String
  public static var Channel_Name_No_Members: Swift.String
  public static var Channel_Header_LastSeen: Swift.String
  public static var Chat_Success_Download_file: Swift.String
  public static var Chat_Failure_Download_file: Swift.String
  public static var Chat_Failure_Open_file: Swift.String
  public static var Chat_New_Message_File: Swift.String
  public static var Chat_New_Message: (_ count: Swift.Int) -> Swift.String
  public static var Channel_State_Banner_Frozen: Swift.String
  public static var ChannelSettings_Header_Title: Swift.String
  public static var ChannelSettings_Change_Name: Swift.String
  public static var ChannelSettings_Change_Image: Swift.String
  public static var ChannelSettings_Enter_New_Name: Swift.String
  public static var ChannelSettings_Enter_New_Channel_Name: Swift.String
  public static var ChannelSettings_Notifications: Swift.String
  public static var ChannelSettings_Members_Title: Swift.String
  public static var ChannelSettings_Participants_Title: Swift.String
  public static var ChannelSettings_Members: (_ count: Swift.UInt) -> Swift.String
  public static var ChannelSettings_Leave: Swift.String
  public static var ChannelSettings_Delete: Swift.String
  public static var ChannelSettings_Search: Swift.String
  public static var ChannelSettings_Moderations: Swift.String
  public static var ChannelSettings_Operators: Swift.String
  public static var ChannelSettings_Muted_Members: Swift.String
  public static var ChannelSettings_Banned_Members: Swift.String
  public static var ChannelSettings_Freeze_Channel: Swift.String
  public static var ChannelSettings_URL: Swift.String
  public static var MessageInput_Text_Placeholder: Swift.String
  public static var MessageInput_Text_Unavailable: Swift.String
  public static var MessageInput_Text_Muted: Swift.String
  public static var MessageInput_Text_Reply: Swift.String
  public static var MessageInput_Reply_To: (_ quotedMessageNickname: Swift.String) -> Swift.String
  public static var MessageInput_Reply_Message_Photo: Swift.String
  public static var MessageInput_Reply_Message_GIF: Swift.String
  public static var MessageInput_Reply_Message_Video: Swift.String
  public static var recordingReachedMaximumTime: Swift.String
  public static var CaptionInput_Text_Placeholder: Swift.String
  public static var Message_Edited: Swift.String
  public static var Message_System: Swift.String
  public static var Message_Unknown_Title: Swift.String
  public static var Message_Unknown_Desctiption: Swift.String
  public static var Message_Replied_To: (_ replierNickname: Swift.String, _ quotedMessageNickname: Swift.String) -> Swift.String
  public static var Message_You: Swift.String
  public static var sliderToCancel: Swift.String
  public static var Empty_No_Channels: Swift.String
  public static var Empty_No_Messages: Swift.String
  public static var Empty_No_Users: Swift.String
  public static var Empty_No_Muted_Members: Swift.String
  public static var Empty_No_Banned_Members: Swift.String
  public static var Empty_Search_Result: Swift.String
  public static var Empty_No_Contacts_Found: Swift.String
  public static var Empty_Wrong: Swift.String
  public static var Empty_search: Swift.String
  public static var Empty_no_media: Swift.String
  public static var Empty_no_document: Swift.String
  public static var Empty_no_link: Swift.String
  public static var Empty_no_recent_chat: Swift.String
  public static var CreateChannel_Create: (_ count: Swift.Int) -> Swift.String
  public static var CreateChat_Header_Title: Swift.String
  public static var Show_Contacts_List: Swift.String
  public static var call_log_header_title: Swift.String
  public static var Forward_Message_Header_Title: Swift.String
  public static var CreateChannel_Header_Title_Profile: Swift.String
  public static var leaveGroup: Swift.String
  public static var deleteGroup: Swift.String
  public static var deleteChat: Swift.String
  public static var InviteChannel_Header_Title: Swift.String
  public static var InviteChannel_Header_Select_Members: Swift.String
  public static var InviteChannel_Invite: (_ count: Swift.Int) -> Swift.String
  public static var InviteChannel_Add: (_ count: Swift.Int) -> Swift.String
  public static var MemberList_Header_Title: Swift.String
  public static var MemberList_Me: Swift.String
  public static var MemberList_Ban: Swift.String
  public static var MemberList_Unban: Swift.String
  public static var MemberList_Mute: Swift.String
  public static var MemberList_Unmute: Swift.String
  public static var MemberList_Dismiss_Operator: Swift.String
  public static var MemberList_Promote_Operator: Swift.String
  public static var MemberList_Title_Members: Swift.String
  public static var MemberList_Title_Operators: Swift.String
  public static var MemberList_Title_Muted_Members: Swift.String
  public static var MemberList_Title_Banned_Members: Swift.String
  public static var MemberList_Title_Participants: Swift.String
  public static var User_No_Name: Swift.String
  public static var User_Operator: Swift.String
  public static var UserProfile_Role_Operator: Swift.String
  public static var UserProfile_Role_Member: Swift.String
  public static var UserProfile_UserID: Swift.String
  public static var UserProfile_Message: Swift.String
  public static var UserProfile_Promote: Swift.String
  public static var UserProfile_Dismiss: Swift.String
  public static var UserProfile_Mute: Swift.String
  public static var UserProfile_Unmute: Swift.String
  public static var UserProfile_Ban: Swift.String
  public static var ChatType_Single: Swift.String
  public static var ChatType_Group: Swift.String
  public static var Call_cancel: Swift.String
  public static var Call_Again: Swift.String
  public static var Microphone_turnedOff: Swift.String
  public static var Camera_turnedOff: Swift.String
  public static var Trying_to_connect: Swift.String
  public static var Connecting: Swift.String
  public static var calling: Swift.String
  public static var Ringing: Swift.String
  public static var Connected: Swift.String
  public static var Unavailable_Try_again_later: Swift.String
  public static var Reconnecting: Swift.String
  public static var User_Busy: Swift.String
  public static var Call_Engaged: Swift.String
  public static var user_seems_to_be_offline: Swift.String
  public static var Request_declined: Swift.String
  public static var Requesting_Video_Call: Swift.String
  public static var Accept: Swift.String
  public static var Decline: Swift.String
  public static var switch_Video_Call: Swift.String
  public static var Switch: Swift.String
  public static var Requesting_switch_video_call: Swift.String
  public static var Recent_Search_Placeholder: Swift.String
  public static var Recent_Search_Cancel: Swift.String
  public static var ChatinfoView_Header_Title: Swift.String
  public static var Message_not_delivered: Swift.String
  public static var message_not_read: Swift.String
  public static var Email: Swift.String
  public static var Mobile_Number: Swift.String
  public static var settings: Swift.String
  public static var userLocation: Swift.String
  public static var profileTitle: Swift.String
  public static var ChatTitle: Swift.String
  public static var chats_Title: Swift.String
  public static var logout: Swift.String
  public static var remove_photo_desc: Swift.String
  public static var remove_photo: Swift.String
  public static var remove_photo_cancel: Swift.String
  public static var emptyPhone: Swift.String
  public static var userNameValidation: Swift.String
  public static var profilePictureRemoved: Swift.String
  public static var userNamePlaceholder: Swift.String
  public static var Please_wait: Swift.String
  public static var participants: Swift.String
  public static var removeMember_title: Swift.String
  public static var removeMember_subtitile: (_ name: Swift.String) -> Swift.String
  public static var make_admin_title: Swift.String
  public static var make_admin_subtitile: (_ name: Swift.String) -> Swift.String
  public static var exitGroup: Swift.String
  public static var exitGroupMessage: Swift.String
  public static var deleteGroupDescription: Swift.String
  public static var deleteChatDescription: Swift.String
  public static var removeYes: Swift.String
  public static var removeNo: Swift.String
  public static var remove_from_group: Swift.String
  public static var make_admin: Swift.String
  public static var adminYes: Swift.String
  public static var NoMember_desc: Swift.String
  public static var Group_Feature_unavailable: Swift.String
  public static var videoLimitText: Swift.String
  public static var participant_call_now: Swift.String
  public static var participant_title: Swift.String
  public static var no_call_history_found_title: Swift.String
  public static var noCallLogFound: Swift.String
  public static var deleteForMe: Swift.String
  public static var deleteForEveryOne: Swift.String
  public static var message: Swift.String
  public static var youDeletedThisMessage: Swift.String
  public static var thisMessageWasDeleted: Swift.String
  public static var areYouSureYouWantSingular: Swift.String
  public static var areYouSureYouWantPlural: Swift.String
  public static var mute_notification_title: Swift.String
  public static var enableTranslateMessageToChooseTranslationLanguage: Swift.String
  public static var chooseTranslationLaguage: Swift.String
  public static var chooseLanguage: Swift.String
  public static var translation_title: Swift.String
  public static var doubleTapTheReceivedMessageToTranslate: Swift.String
  public static var sendLocationTitle: Swift.String
  public static var forbidden: Swift.String
  public static var messageNoLongerAvailable: Swift.String
  public static var viewAllMedia: Swift.String
  public static var forwardTitleContacts: Swift.String
  public static var forwardTitleGroups: Swift.String
  public static var forwardTitleRecent: Swift.String
  public static var youCanForwardOnlyTofive: Swift.String
  public static var sending: Swift.String
  public static var doYouWantToforwardSelected: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BSImagePickerSettings) @objcMembers public class Settings : ObjectiveC.NSObject {
  @objc public static let shared: FlyUIKit.Settings
  @objc @_inheritsConvenienceInitializers public class Theme : ObjectiveC.NSObject {
    public var backgroundColor: UIKit.UIColor {
      get
      set
    }
    public var dropDownBackgroundColor: UIKit.UIColor {
      get
      set
    }
    public var selectionFillColor: UIKit.UIColor {
      get
      set
    }
    public var selectionStrokeColor: UIKit.UIColor {
      get
      set
    }
    public var selectionShadowColor: UIKit.UIColor {
      get
      set
    }
    public enum SelectionStyle {
      case checked
      case numbered
      public static func == (a: FlyUIKit.Settings.Theme.SelectionStyle, b: FlyUIKit.Settings.Theme.SelectionStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var selectionStyle: FlyUIKit.Settings.Theme.SelectionStyle {
      get
      set
    }
    public var previewTitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    public var previewSubtitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    public var albumTitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(BSImagePickerSelection) @objcMembers public class Selection : ObjectiveC.NSObject {
    @objc public var max: Swift.Int {
      @objc get
      @objc set
    }
    @objc public var min: Swift.Int {
      @objc get
      @objc set
    }
    @objc public var unselectOnReachingMax: Swift.Bool {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(BSImagePickerList) @objcMembers public class List : ObjectiveC.NSObject {
    @objc public var spacing: CoreFoundation.CGFloat {
      @objc get
      @objc set
    }
    @objc public var cellsPerRow: (_ verticalSize: UIKit.UIUserInterfaceSizeClass, _ horizontalSize: UIKit.UIUserInterfaceSizeClass) -> Swift.Int {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Preview : ObjectiveC.NSObject {
    public var enabled: Swift.Bool {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(BSImagePickerFetch) @objcMembers public class Fetch : ObjectiveC.NSObject {
    @_inheritsConvenienceInitializers @objc(BSImagePickerAlbum) @objcMembers public class Album : ObjectiveC.NSObject {
      @objc public var options: Photos.PHFetchOptions {
        @objc get
        @objc set
      }
      @objc public var fetchResults: [Photos.PHFetchResult<Photos.PHAssetCollection>] {
        @objc get
        @objc set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(BSImagePickerAssets) @objcMembers public class Assets : ObjectiveC.NSObject {
      public enum MediaTypes {
        case image
        case video
        public static func == (a: FlyUIKit.Settings.Fetch.Assets.MediaTypes, b: FlyUIKit.Settings.Fetch.Assets.MediaTypes) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var supportedMediaTypes: Swift.Set<FlyUIKit.Settings.Fetch.Assets.MediaTypes> {
        get
        set
      }
      @objc public var options: Photos.PHFetchOptions {
        @objc get
        @objc set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Preview : ObjectiveC.NSObject {
      public var photoOptions: Photos.PHImageRequestOptions {
        get
        set
      }
      public var livePhotoOptions: Photos.PHLivePhotoRequestOptions {
        get
        set
      }
      public var videoOptions: Photos.PHVideoRequestOptions {
        get
        set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc public var album: FlyUIKit.Settings.Fetch.Album {
      @objc get
      @objc set
    }
    @objc public var assets: FlyUIKit.Settings.Fetch.Assets {
      @objc get
      @objc set
    }
    @objc public var preview: FlyUIKit.Settings.Fetch.Preview {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Dismiss : ObjectiveC.NSObject {
    public var enabled: Swift.Bool {
      get
      set
    }
    public var allowSwipe: Swift.Bool {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public var theme: FlyUIKit.Settings.Theme {
    @objc get
    @objc set
  }
  @objc public var selection: FlyUIKit.Settings.Selection {
    @objc get
    @objc set
  }
  @objc public var list: FlyUIKit.Settings.List {
    @objc get
    @objc set
  }
  @objc public var fetch: FlyUIKit.Settings.Fetch {
    @objc get
    @objc set
  }
  @objc public var dismiss: FlyUIKit.Settings.Dismiss {
    @objc get
    @objc set
  }
  @objc public var preview: FlyUIKit.Settings.Preview {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUICreateChatViewController : FlyUIKit.MFBaseViewController, FlyUIKit.MFUICreateChatModuleHeaderDelegate, FlyUIKit.MFUICreateChatModuleListDataSource, FlyUIKit.MFUICreateChatModuleListDelegate, FlyUIKit.MFUICreateChatViewModelDelegate, FlyUIKit.MFUICreateChatViewModelDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUICreateChatModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: FlyUIKit.MFUICreateChatModule.List?
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFContactListTheme
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: FlyUIKit.MFUICreateChatViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var chatType: FlyUIKit.ChatCreationType
  @objc @_Concurrency.MainActor(unsafe) public var messgaeMenuType: FlyUIKit.MessageMenuItem
  @objc @_Concurrency.MainActor(unsafe) public var contactList: [MirrorFlySDK.ProfileDetails]
  @objc @_Concurrency.MainActor(unsafe) public var selectedcontactList: [MirrorFlySDK.ProfileDetails]
  @objc @_Concurrency.MainActor(unsafe) public var recentChat: MirrorFlySDK.RecentChat
  @objc @_Concurrency.MainActor(unsafe) public var groupName: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var groupID: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var message: MirrorFlySDK.ChatMessage?
  @objc @_Concurrency.MainActor(unsafe) public var searchbarView: FlyUIKit.MFUISearchBarView
  @available(*, unavailable, renamed: "MFUICreateChatViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "MFUICreateChatViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(chatMessage: MirrorFlySDK.ChatMessage? = nil, messageMenuItem: FlyUIKit.MessageMenuItem = .reply, groupName: Swift.String? = nil, contacts: [MirrorFlySDK.ProfileDetails]? = nil, type: FlyUIKit.ChatCreationType = .newSinglehChat, groupId: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(contacts: [MirrorFlySDK.ProfileDetails]? = nil, type: FlyUIKit.ChatCreationType = .newSinglehChat, groupId: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func openChat(index: Swift.Int, jid: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func createChatModule(_ headerComponent: FlyUIKit.MFUICreateChatModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func baseSelectContactModule(_ listComponent: FlyUIKit.MFUIBaseSelectContactModule.List, usersInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
  @objc @_Concurrency.MainActor(unsafe) public func baseSelectContactModule(_ listComponent: FlyUIKit.MFUIBaseSelectContactModule.List, selectedUsersInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
  @objc @_Concurrency.MainActor(unsafe) public func createChatModule(_ listComponent: FlyUIKit.MFUICreateChatModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func createChatModule(_ listComponent: FlyUIKit.MFUICreateChatModule.List, willDisplay indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func createChatModule(_ listComponent: FlyUIKit.MFUICreateChatModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func createChatModuleDidSelectRetry(_ listComponent: FlyUIKit.MFUICreateChatModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func createChatViewModel(_ viewModel: FlyUIKit.MFUICreateChatViewModel, nextContactListForChatType chatType: FlyUIKit.ChatCreationType) -> [MirrorFlySDK.ProfileDetails]?
  @objc @_Concurrency.MainActor(unsafe) open func createChatViewModel(_ viewModel: FlyUIKit.MFUICreateChatViewModel, didChangeUsers contact: [MirrorFlySDK.ProfileDetails], needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func createChatViewModel(_ viewModel: FlyUIKit.MFUICreateChatViewModel, didCreateChat chat: MirrorFlySDK.RecentChat?)
  @objc @_Concurrency.MainActor(unsafe) open func createChatViewModel(_ viewModel: FlyUIKit.MFUICreateChatViewModel, didUpdateSelectedContacts selectedContacts: [MirrorFlySDK.ProfileDetails])
  @objc @_Concurrency.MainActor(unsafe) public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
}
extension FlyUIKit.MFUICreateChatViewController : MirrorFlySDK.ProfileEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userCameOnline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userWentOffline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func myProfileUpdated()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersProfilesFetched()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func hideUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
extension FlyUIKit.MFUICreateChatViewController : MirrorFlySDK.ConnectionEventDelegate {
  @_Concurrency.MainActor(unsafe) public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onReconnecting()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onDisconnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnectionNotAuthorized()
}
extension FlyUIKit.MFUICreateChatViewController : FlyUIKit.MFUISearchBarDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func passChangeTextString(searchbar: UIKit.UISearchBar, text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickCancelSearch()
}
public class MFUIForwardModule {
  public var headerComponent: FlyUIKit.MFUIForwardModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUIForwardModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIForwardModule.Header? = nil, listComponent: FlyUIKit.MFUIForwardModule.List? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MFUIUpdateProfileViewModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol MFUIReplyMessageViewDelegate {
  @objc func didTapReplyMessageView(_ replyMessageView: FlyUIKit.MFUIReplyBaseMessageView)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIReplyBaseMessageView : FlyUIKit.MFUIView, FlyUIKit.MFUIReplyMessageViewProtocol {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var messageId: Swift.Int64
  @_Concurrency.MainActor(unsafe) public var messagePosition: FlyUIKit.MessagePosition {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var quotedMessageNickname: Swift.String
  @_Concurrency.MainActor(unsafe) public var replierNickname: Swift.String
  @_Concurrency.MainActor(unsafe) public var repliedToText: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String?
  @_Concurrency.MainActor(unsafe) public var isFileType: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var repliedToLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var repliedIconView: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var contentStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var messageStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var repliedToStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mainContainerView: FlyUIKit.MFUISelectableStackView
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIReplyMessageViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) public func configure(with configuration: FlyUIKit.MFUIReplyBaseMessageViewParams)
  @objc @_Concurrency.MainActor(unsafe) open func didTapReplyMessageView(sender: UIKit.UITapGestureRecognizer)
  @objc deinit
}
public protocol MFUIContactPreviewModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func contactPreviewModule(_ listComponent: FlyUIKit.MFUIContactPreviewModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension FlyUIKit.MFUIContactPreviewModule {
  @_inheritsConvenienceInitializers @objc(MFUIContactPrevieModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var contactPreviewCell: FlyUIKit.MFContactPreviewTableCell?
    @objc @_Concurrency.MainActor(unsafe) public var contactHeadrCell: FlyUIKit.MFContactPreviewHeaderTableCell?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFContactPreviewTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIContactPreviewModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFContactPreviewTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(chatCell: FlyUIKit.MFContactPreviewTableCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func registerHeader(chatCell: FlyUIKit.MFContactPreviewHeaderTableCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ contactPreviewCell: FlyUIKit.MFContactPreviewTableCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func configureHeaderCell(_ contactPreviewCell: FlyUIKit.MFContactPreviewHeaderTableCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUIContactPreviewModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
public class MFUIModuleSet {
  public static var chatListModule: FlyUIKit.MFUIRecentChatListModule {
    get
    set
  }
  public static var baseChatViewModule: FlyUIKit.MFUIBaseChatViewModule {
    get
    set
  }
  public static var chatViewParentModule: FlyUIKit.MFUIChatViewParentModule {
    get
    set
  }
  public static var createChatModule: FlyUIKit.MFUICreateChatModule {
    get
    set
  }
  public static var viewMediaModule: FlyUIKit.MFUIViewMediaModule {
    get
    set
  }
  public static var createGroupChatModule: FlyUIKit.MFUICreateGroupChatModule {
    get
    set
  }
  public static var callScreenModule: FlyUIKit.MFUICallScreenModule {
    get
    set
  }
  public static var imageEditModule: FlyUIKit.MFUIImageEditModule {
    get
    set
  }
  public static var messageInfoModule: FlyUIKit.MFUIMessageInfoModule {
    get
    set
  }
  public static var userProfileModule: FlyUIKit.MFUIUserProfileModule {
    get
    set
  }
  public static var settingsModule: FlyUIKit.MFUISettingsModule {
    get
    set
  }
  public static var updateProfileModule: FlyUIKit.MFUIUpdateProfileModule {
    get
    set
  }
  public static var groupInfoModule: FlyUIKit.MFUIGroupInfoModule {
    get
    set
  }
  public static var participantModule: FlyUIKit.MFUIParticipantModule {
    get
    set
  }
  public static var callLogModule: FlyUIKit.MFUICallLogModule {
    get
    set
  }
  public static var translateModule: FlyUIKit.MFUITranslateModule {
    get
    set
  }
  public static var languageModule: FlyUIKit.MFUILanguageModule {
    get
    set
  }
  public static var locationModule: FlyUIKit.MFUILocationModule {
    get
    set
  }
  public static var contactPreviewModule: FlyUIKit.MFUIContactPreviewModule {
    get
    set
  }
  public static var forwardModule: FlyUIKit.MFUIForwardModule {
    get
    set
  }
  public init(chatListModule: FlyUIKit.MFUIRecentChatListModule = MFUIRecentChatListModule(), baseChatViewModule: FlyUIKit.MFUIBaseChatViewModule = MFUIBaseChatViewModule(), chatViewParentModule: FlyUIKit.MFUIChatViewParentModule = MFUIChatViewParentModule(), createChatModule: FlyUIKit.MFUICreateChatModule = MFUICreateChatModule(), createGroupChatModule: FlyUIKit.MFUICreateGroupChatModule = MFUICreateGroupChatModule(), callScreenModule: FlyUIKit.MFUICallScreenModule = MFUICallScreenModule(), imageEditModule: FlyUIKit.MFUIImageEditModule = MFUIImageEditModule(), messageInfoModule: FlyUIKit.MFUIMessageInfoModule = MFUIMessageInfoModule(), userProfileModule: FlyUIKit.MFUIUserProfileModule = MFUIUserProfileModule(), settingsModule: FlyUIKit.MFUISettingsModule = MFUISettingsModule(), updateProfileModule: FlyUIKit.MFUIUpdateProfileModule = MFUIUpdateProfileModule(), groupInfoModule: FlyUIKit.MFUIGroupInfoModule = MFUIGroupInfoModule(), participantModule: FlyUIKit.MFUIParticipantModule = MFUIParticipantModule(), callLogModule: FlyUIKit.MFUICallLogModule = MFUICallLogModule(), translateModule: FlyUIKit.MFUITranslateModule = MFUITranslateModule(), languageModule: FlyUIKit.MFUILanguageModule = MFUILanguageModule(), locationModule: FlyUIKit.MFUILocationModule = MFUILocationModule(), contactPreviewModule: FlyUIKit.MFUIContactPreviewModule = MFUIContactPreviewModule(), viewMediaModule: FlyUIKit.MFUIViewMediaModule = MFUIViewMediaModule(), forwardModeule: FlyUIKit.MFUIForwardModule = MFUIForwardModule())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class Overlay : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var cropBoxAlpha: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var gridLinesAlpha: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var gridLinesCount: Swift.UInt {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isCircular: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isBlurEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var blur: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maskColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var free: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cropBoxFrame: CoreFoundation.CGRect {
    get
    set(frame)
  }
  @_Concurrency.MainActor(unsafe) open func setCropBoxFrame(_ cropBoxFrame: CoreFoundation.CGRect, blurLayerAnimated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public var cropBox: FlyUIKit.CropBox
  @_Concurrency.MainActor(unsafe) public var translucentMaskView: UIKit.UIVisualEffectView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func updateMask(animated: Swift.Bool)
  @objc deinit
}
public struct Units {
  public let bytes: Swift.Int64
  public var kilobytes: Swift.Double {
    get
  }
  public var megabytes: Swift.Double {
    get
  }
  public var gigabytes: Swift.Double {
    get
  }
  public init(bytes: Swift.Int64)
  public func getReadableUnit() -> Swift.String
}
public protocol MFUICallLogViewModelDelegate : FlyUIKit.MFUICommonViewModelDelegate {
  func callLogViewModel(_ viewModel: FlyUIKit.MFUICallLogViewModel, didChangeUsers contact: [MirrorFlySDK.CallLog], needsToReload: Swift.Bool)
  func callLogViewModel(_ viewModel: FlyUIKit.MFUICallLogViewModel, didCreateChat chat: MirrorFlySDK.RecentChat?)
  func callLogViewModel(_ viewModel: FlyUIKit.MFUICallLogViewModel, didUpdateSelectedContacts selectedContacts: [MirrorFlySDK.CallLog])
}
public protocol MFUICallLogViewModelDataSource : AnyObject {
  func callLogViewModel(_ viewModel: FlyUIKit.MFUICallLogViewModel, nextContactListForChatType chatType: FlyUIKit.ChatCreationType) -> [MirrorFlySDK.CallLog]?
}
@objc @_hasMissingDesignatedInitializers open class MFUICallLogViewModel : ObjectiveC.NSObject {
  public var contactList: [MirrorFlySDK.CallLog]
  public var mfUICallScreenViewModel: FlyUIKit.MFUICallScreenViewModel?
  @objc deinit
}
public protocol MFUICreateGroupChatViewModelDelegate : FlyUIKit.MFUICommonViewModelDelegate {
}
@objc @_hasMissingDesignatedInitializers open class MFUICreateGroupChatViewModel : ObjectiveC.NSObject {
  public var chatType: FlyUIKit.ChatCreationType {
    get
  }
  @objc deinit
}
public protocol MFUIChatViewParentModuleListDelegate : FlyUIKit.MFUIBaseChatViewModuleListDelegate {
  func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, didTapImageDownload message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, didTapCloseDownloadOrUpload message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, didTapQuickForward message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, didTapPlayOrPause message: MirrorFlySDK.ChatMessage, sender: UIKit.UIButton)
  func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, _ slider: UIKit.UISlider, didDragSlider message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
  func chatViewModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, _ slider: UIKit.UISlider, _ tapGesture: UIKit.UITapGestureRecognizer, didTapSlider message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
}
public protocol MFUIChatViewParentModuleListDataSource : FlyUIKit.MFUIBaseChatViewModuleLisDataSource {
  func chatListModule(_ listComponent: FlyUIKit.MFUIChatViewParentModule.List, chatParentInTableView tableView: UIKit.UITableView, forRowAt indexPath: Foundation.IndexPath, message: MirrorFlySDK.ChatMessage, audioView: FlyUIKit.MFUIAudioContentView)
}
extension FlyUIKit.MFUIChatViewParentModule {
  @_inheritsConvenienceInitializers @objc(MFUIChatViewParentModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : FlyUIKit.MFUIBaseChatViewModule.List {
    @objc @_Concurrency.MainActor(unsafe) public var adminMessageCell: FlyUIKit.MFUIBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var userMessageCell: FlyUIKit.MFUIBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var customMessageCell: FlyUIKit.MFUIBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var mediaMessageCell: FlyUIKit.MFUIBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var deleteMessageCell: FlyUIKit.MFUIDeleteMessageCell? {
      get
    }
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIChatViewParentModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUIChatViewParentModuleListDataSource)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) public var chat: MirrorFlySDK.RecentChat? {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIChatViewParentModuleListDelegate, dataSource: any FlyUIKit.MFUIChatViewParentModuleListDataSource, theme: FlyUIKit.MFChatTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
    @_Concurrency.MainActor(unsafe) override open func updateStyles(theme: FlyUIKit.MFChatTheme? = nil, componentTheme: FlyUIKit.MFComponentTheme = MFUITheme.componentTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
    @objc @_Concurrency.MainActor(unsafe) open func register(userMessageCell: FlyUIKit.MFUIBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(adminMessageCell: FlyUIKit.MFUIBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(mediaMessageCell: FlyUIKit.MFUIBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ messageCell: FlyUIKit.MFUIBaseMessageCell, message: MirrorFlySDK.ChatMessage, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
    @objc @_Concurrency.MainActor(unsafe) public func register(messageCell: FlyUIKit.MFUIBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(deleteCell: FlyUIKit.MFUIDeleteMessageCell, nib: UIKit.UINib? = nil)
    @_Concurrency.MainActor(unsafe) open func generateCellIdentifier(messageType: MirrorFlySDK.MessageType) -> Swift.String
    @objc @_Concurrency.MainActor(unsafe) public func getMessageGroupingPosition(currentIndex: Swift.Int) -> FlyUIKit.MessageGroupPosition
    @objc @_Concurrency.MainActor(unsafe) open func setMessageCellGestures(_ cell: FlyUIKit.MFUIBaseMessageCell, message: MirrorFlySDK.ChatMessage, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setMessageCellGesture(_ cell: FlyUIKit.MFUIDeleteMessageCell, message: MirrorFlySDK.ChatMessage, indexPath: Foundation.IndexPath)
    @objc deinit
  }
}
public protocol MFUICallScreenModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func CallScreenModule(_ headerComponent: FlyUIKit.MFUICallScreenModule.Header, didUpdateLeftBackButton leftBack: UIKit.UIView?)
  func CallScreenModule(_ headerComponent: FlyUIKit.MFUICallScreenModule.Header, didTapLeftBackButton leftItem: UIKit.UIView?)
  func CallScreenModule(_ headerComponent: FlyUIKit.MFUICallScreenModule.Header, didTapInviteParticipant inviteParticipantItem: UIKit.UIView?)
}
extension FlyUIKit.MFUICallScreenModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUICallScreenModuleHeaderDelegate)?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme?
    @objc @_Concurrency.MainActor(unsafe) public var callStatusText: Swift.String {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBackButton: UIKit.UIButton? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var callStatusLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var ReceiverNameLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var callTimeLbl: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var addInviteParticipant: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var defaultLeftBackButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var circularImageView: UIKit.UIImageView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUICallScreenModuleHeaderDelegate, theme: FlyUIKit.MFCallScreenTheme, isvideoCall: Swift.Bool)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallScreenTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onClickBack()
    @objc @_Concurrency.MainActor(unsafe) open func onInviteParticipant()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public class MFUIRecentChatListModule {
  public var headerComponent: FlyUIKit.MFUIRecentChatListModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUIRecentChatListModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIRecentChatListModule.Header? = nil, listComponent: FlyUIKit.MFUIRecentChatListModule.List? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MFUICustomNotificationView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) final public let theme: FlyUIKit.MFCustomNotificationTheme
  @_Concurrency.MainActor(unsafe) public var logoImg: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var labelsStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mainStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol MFUIParticipantModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUIParticipantModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : FlyUIKit.MFUIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIParticipantModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme
    @objc @_Concurrency.MainActor(unsafe) public var type: FlyUIKit.ChatCreationType
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIParticipantModuleHeaderDelegate, theme: FlyUIKit.MFCallScreenTheme)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallScreenTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  }
}
public protocol MFUIUpdateProfileModuleImageviewDelegate : FlyUIKit.MFUICommonDelegate {
  func didClickCamerButton()
  func didClickProfilePhoto()
  func didChangeNameString(name: Swift.String)
}
extension FlyUIKit.MFUIUpdateProfileModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class BImageView : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIUpdateProfileModuleImageviewDelegate)?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFUpdateProfileTheme?
    @objc @_Concurrency.MainActor(unsafe) public var nameTextfield: UIKit.UITextField {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var circularImgButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var cameraImageButton: UIKit.UIButton {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var circularImageView: UIKit.UIImageView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var cameraImageView: UIKit.UIImageView {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIUpdateProfileModuleImageviewDelegate, theme: FlyUIKit.MFUpdateProfileTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFUpdateProfileTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension FlyUIKit.MFUIUpdateProfileModule.BImageView : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
public class MFUITranslateModule {
  public var headerComponent: FlyUIKit.MFUITranslateModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUITranslateModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUITranslateModule.Header? = nil, listComponent: FlyUIKit.MFUITranslateModule.List? = nil)
  @objc deinit
}
public protocol MFUISettingsModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func settingsModule(_ headerComponent: FlyUIKit.MFUISettingsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func settingsModule(_ headerComponent: FlyUIKit.MFUISettingsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func settingsModule(_ headerComponent: FlyUIKit.MFUISettingsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUISettingsModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUISettingsModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFSettingsTheme?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUISettingsModuleHeaderDelegate, theme: FlyUIKit.MFSettingsTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFSettingsTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
  }
}
public class MFUISettingsModule {
  public var headerComponent: FlyUIKit.MFUISettingsModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUISettingsModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUISettingsModule.Header? = nil, listComponent: FlyUIKit.MFUISettingsModule.List? = nil)
  @objc deinit
}
public protocol MFUIParticipantModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func participantModule(_ listComponent: FlyUIKit.MFUIParticipantModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func participantModule(_ listComponent: FlyUIKit.MFUIParticipantModule.List, willDisplay indexPath: Foundation.IndexPath)
}
public protocol MFUIParticipantModuleListDataSource : AnyObject {
  func participantListModule(_ listComponent: FlyUIKit.MFUIParticipantModule.List, participantMemberInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
  func participantSelectListModule(_ listComponent: FlyUIKit.MFUIParticipantModule.List, participantSelectMemberInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
}
extension FlyUIKit.MFUIParticipantModule {
  @_inheritsConvenienceInitializers @objc(MFUIParticipantModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var searchString: Swift.String
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIParticipantModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any FlyUIKit.MFUIParticipantModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var groupMembers: [MirrorFlySDK.ProfileDetails]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var selectedContactList: [MirrorFlySDK.ProfileDetails]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public func isSelectedContact(_ user: MirrorFlySDK.ProfileDetails) -> Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public var showLoading: Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIParticipantModule.Header?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIParticipantModuleListDelegate, dataSource: any FlyUIKit.MFUIParticipantModuleListDataSource, theme: FlyUIKit.MFCallScreenTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallScreenTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func updateEmptyView(type: FlyUIKit.EmptyViewType)
    @objc @_Concurrency.MainActor(unsafe) public func register(callParticipantCell: FlyUIKit.MFUICallParticipantCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ profilecell: FlyUIKit.MFUICallParticipantCell?, indexPath: Foundation.IndexPath, selectedcontactList: [MirrorFlySDK.ProfileDetails]?)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUIParticipantModule.List : FlyUIKit.MFUIEmptyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
}
extension FlyUIKit.MFUIParticipantModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
extension FlyUIKit.MFUIParticipantModule.List : FlyUIKit.MFUIParticipantModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func GroupInfoModule(_ headerComponent: FlyUIKit.MFUIGroupInfoModule.Header, didUpdateLeftBackButton leftBack: UIKit.UIView?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIReplyFileImageView : FlyUIKit.MFUIReplyBaseMessageView {
  @_Concurrency.MainActor(unsafe) public var urlString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var messageFileView: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var docImgContainerView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var docImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var fileNameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contactNameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var UserNameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var IconCaptionHstackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var captionVstackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mapView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mediaLocationMapView: GoogleMaps.GMSMapView
  @_Concurrency.MainActor(unsafe) public var ImageHstackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: FlyUIKit.MFUIReplyBaseMessageViewParams)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol MFUIEmptyViewDelegate : ObjectiveC.NSObjectProtocol {
  func didSelectRetry()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIEmptyView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var type: FlyUIKit.EmptyViewType
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIEmptyViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var statusImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var statusLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFComponentTheme
  @_Concurrency.MainActor(unsafe) public var overlayTheme: FlyUIKit.MFComponentTheme
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "MFUIEmptyView.init(frame:)")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) public func reloadData(_ type: FlyUIKit.EmptyViewType)
  @_Concurrency.MainActor(unsafe) open func updateViews()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUISettingsController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFSettingsTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUISettingsModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUISettingsModule.List?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc deinit
}
extension FlyUIKit.MFUISettingsController : FlyUIKit.MFUISettingsModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func settingModule(_ listComponent: FlyUIKit.MFUISettingsModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUISettingsController : FlyUIKit.MFUISettingsModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func settingsModule(_ headerComponent: FlyUIKit.MFUISettingsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func settingsModule(_ headerComponent: FlyUIKit.MFUISettingsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func settingsModule(_ headerComponent: FlyUIKit.MFUISettingsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
public protocol MFUITranslateModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func translateModule(_ listComponent: FlyUIKit.MFUITranslateModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func translateModule(_ listComponent: FlyUIKit.MFUITranslateModule.List, _ tap: UIKit.UITapGestureRecognizer, indexPath: Foundation.IndexPath)
}
extension FlyUIKit.MFUITranslateModule {
  @_inheritsConvenienceInitializers @objc(MFUITranslateModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var translateCell: FlyUIKit.MFUITranslateCell?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFTranslateTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUITranslateModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUITranslateModuleListDelegate, theme: FlyUIKit.MFTranslateTheme, translateArr: [FlyUIKit.TranslateDetail])
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFTranslateTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(chatCell: FlyUIKit.MFUITranslateCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ translateCell: FlyUIKit.MFUITranslateCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUITranslateModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
@objc public protocol MFUIViewLifeCycle {
  @objc func setupViews()
  @objc func setupStyles()
  @objc func updateStyles()
  @objc func setupLayouts()
  @objc func updateLayouts()
  @objc func setupActions()
}
public protocol MFUIViewMediaModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func viewMediaModule(_ listComponent: FlyUIKit.MFUIViewMediaModule.List, chatMessage: MirrorFlySDK.ChatMessage)
  func viewDocumentModule(_ listComponent: FlyUIKit.MFUIViewMediaModule.List, chatMessage: MirrorFlySDK.ChatMessage)
}
extension FlyUIKit.MFUIViewMediaModule {
  @_inheritsConvenienceInitializers @objc(MFUIViewMediaModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFViewMediaTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUIViewMediaModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) open func configureDocment(delegate: any FlyUIKit.MFUIViewMediaModuleListDelegate, theme: FlyUIKit.MFViewMediaTheme, documentMessages: [[MirrorFlySDK.ChatMessage]])
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUIViewMediaModuleListDelegate, theme: FlyUIKit.MFViewMediaTheme, mediaChatMessages: [[MirrorFlySDK.ChatMessage]])
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFViewMediaTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func reloadCollectionView()
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUIViewMediaModule.List : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
extension FlyUIKit.MFUIViewMediaModule.List : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers final public class NetworkReachability {
  public static let shared: FlyUIKit.NetworkReachability
  final public var didStartMonitoringHandler: (() -> Swift.Void)?
  final public var didStopMonitoringHandler: (() -> Swift.Void)?
  final public var netStatusChangeHandler: (() -> Swift.Void)?
  final public var isConnected: Swift.Bool {
    get
  }
  final public var interfaceType: Network.NWInterface.InterfaceType? {
    get
  }
  @objc deinit
  final public func startMonitoring()
  final public func stopMonitoring()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUICallParticipantController : FlyUIKit.MFBaseViewController, FlyUIKit.MFUIParticipantModuleHeaderDelegate, FlyUIKit.MFUIParticipantModuleListDataSource, FlyUIKit.MFUIParticipantModuleListDelegate, FlyUIKit.MFUICallParticipantViewModelDelegate, FlyUIKit.MFUICallParticipantViewModelDataSource {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIParticipantModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: FlyUIKit.MFUIParticipantModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var callButton: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) public var isInvite: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var callType: FlyUIKit.CallType
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: FlyUIKit.MFUICallParticipantViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var contactList: [MirrorFlySDK.ProfileDetails]
  @objc @_Concurrency.MainActor(unsafe) public var selectedcontactList: [MirrorFlySDK.ProfileDetails]
  @objc @_Concurrency.MainActor(unsafe) public var selectedProfilesJid: [Swift.String]
  @objc @_Concurrency.MainActor(unsafe) public var groupName: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var groupID: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var message: MirrorFlySDK.ChatMessage?
  @objc @_Concurrency.MainActor(unsafe) public var searchbarView: FlyUIKit.MFUISearchBarView
  @available(*, unavailable, renamed: "MFUICallParticipantViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "MFUICallParticipantViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(contacts: [MirrorFlySDK.ProfileDetails]? = nil, type: FlyUIKit.ChatCreationType = .newSinglehChat)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func participantModule(_ headerComponent: FlyUIKit.MFUIParticipantModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func participantListModule(_ listComponent: FlyUIKit.MFUIParticipantModule.List, participantMemberInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
  @objc @_Concurrency.MainActor(unsafe) public func participantSelectListModule(_ listComponent: FlyUIKit.MFUIParticipantModule.List, participantSelectMemberInTableView tableView: UIKit.UITableView) -> [MirrorFlySDK.ProfileDetails]?
  @objc @_Concurrency.MainActor(unsafe) public func participantModule(_ listComponent: FlyUIKit.MFUIParticipantModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func participantModule(_ listComponent: FlyUIKit.MFUIParticipantModule.List, willDisplay indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func callParticipantViewModel(_ viewModel: FlyUIKit.MFUICallParticipantViewModel, nextContactListForChatType chatType: FlyUIKit.ChatCreationType) -> [MirrorFlySDK.ProfileDetails]?
  @objc @_Concurrency.MainActor(unsafe) open func callParticipantViewModel(_ viewModel: FlyUIKit.MFUICallParticipantViewModel, didChangeUsers contact: [MirrorFlySDK.ProfileDetails], needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func callParticipantViewModel(_ viewModel: FlyUIKit.MFUICallParticipantViewModel, didCreateChat chat: MirrorFlySDK.RecentChat?)
  @objc @_Concurrency.MainActor(unsafe) open func callParticipantViewModel(_ viewModel: FlyUIKit.MFUICallParticipantViewModel, didUpdateSelectedContacts selectedContacts: [MirrorFlySDK.ProfileDetails])
  @objc @_Concurrency.MainActor(unsafe) public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
}
extension FlyUIKit.MFUICallParticipantController : MirrorFlySDK.ProfileEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userCameOnline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userWentOffline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func myProfileUpdated()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersProfilesFetched()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func hideUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
extension FlyUIKit.MFUICallParticipantController : MirrorFlySDK.ConnectionEventDelegate {
  @_Concurrency.MainActor(unsafe) public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onReconnecting()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onDisconnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnectionNotAuthorized()
}
extension FlyUIKit.MFUICallParticipantController : MirrorFlySDK.AdminBlockDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didBlockOrUnblockContact(userJid: Swift.String, isBlocked: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didBlockOrUnblockSelf(userJid: Swift.String, isBlocked: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didBlockOrUnblockGroup(groupJid: Swift.String, isBlocked: Swift.Bool)
}
extension FlyUIKit.MFUICallParticipantController : FlyUIKit.MFUISearchBarDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func passChangeTextString(searchbar: UIKit.UISearchBar, text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickCancelSearch()
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class MFUIAdminMesssageCell : FlyUIKit.MFUIBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var groupHeader: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: FlyUIKit.MFUIBaseMessageCellParams)
  @objc @available(*, deprecated, renamed: "configure(with:)")
  @_Concurrency.MainActor(unsafe) open func configure(_ message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class MFUIUserMessageCellParams : FlyUIKit.MFUIBaseMessageCellParams {
  public var userMessage: MirrorFlySDK.ChatMessage? {
    get
  }
  final public let useReaction: Swift.Bool
  final public let withTextView: Swift.Bool
  public init(message: MirrorFlySDK.ChatMessage, hideDateView: Swift.Bool, useMessagePosition: Swift.Bool, groupPosition: FlyUIKit.MessageGroupPosition = .none, receiptState: FlyUIKit.MFUIMessageReceiptState = .none, useReaction: Swift.Bool = false, withTextView: Swift.Bool, multiSelect: Swift.Bool, messageMenuItem: FlyUIKit.MessageMenuItem, isMessageSelected: Swift.Bool = false)
  @objc deinit
}
public protocol ImagePickerControllerDelegate : AnyObject {
  func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didSelectAsset asset: Photos.PHAsset)
  func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didDeselectAsset asset: Photos.PHAsset)
  func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didFinishWithAssets assets: [Photos.PHAsset])
  func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didCancelWithAssets assets: [Photos.PHAsset])
  func imagePicker(_ imagePicker: FlyUIKit.ImagePickerController, didReachSelectionLimit count: Swift.Int)
}
@objc public protocol MFUIFloatyDelegate {
  @objc optional func emptyFloatySelected(_ floaty: FlyUIKit.MFUIFloaty)
  @objc optional func floatyShouldOpen(_ floaty: FlyUIKit.MFUIFloaty) -> Swift.Bool
  @objc optional func floatyWillOpen(_ floaty: FlyUIKit.MFUIFloaty)
  @objc optional func floatyDidOpen(_ floaty: FlyUIKit.MFUIFloaty)
  @objc optional func floatyShouldClose(_ floaty: FlyUIKit.MFUIFloaty) -> Swift.Bool
  @objc optional func floatyWillClose(_ floaty: FlyUIKit.MFUIFloaty)
  @objc optional func floatyDidClose(_ floaty: FlyUIKit.MFUIFloaty)
  @objc optional func floatyOpened(_ floaty: FlyUIKit.MFUIFloaty)
  @objc optional func floatyClosed(_ floaty: FlyUIKit.MFUIFloaty)
}
public protocol CropperViewControllerDelegate : AnyObject {
  func cropperDidConfirm(_ cropper: FlyUIKit.CropperViewController, state: FlyUIKit.CropperState?)
  func cropperDidCancel(_ cropper: FlyUIKit.CropperViewController)
}
extension FlyUIKit.CropperViewControllerDelegate {
  public func cropperDidCancel(_ cropper: FlyUIKit.CropperViewController)
}
@objc @_Concurrency.MainActor(unsafe) open class CropperViewController : UIKit.UIViewController, FlyUIKit.Rotatable, FlyUIKit.StateRestorable, FlyUIKit.Flipable {
  @_Concurrency.MainActor(unsafe) final public let originalImage: UIKit.UIImage
  @_Concurrency.MainActor(unsafe) public init(originalImage: UIKit.UIImage, initialState: FlyUIKit.CropperState? = nil, isCircular: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.CropperViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) open var isCurrentlyInInitialState: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var aspectRatioLocked: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var currentAspectRatioValue: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var isCropBoxPanEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var cropContentInset: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) open var isCurrentlyInDefalutState: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var bottomView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var topBar: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var toolbar: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var overlay: FlyUIKit.Overlay {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var angleRuler: FlyUIKit.AngleRuler {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var aspectRatioPicker: FlyUIKit.AspectRatioPicker {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredScreenEdgesDeferringSystemGestures: UIKit.UIRectEdge {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) open var cropBoxFrame: CoreFoundation.CGRect {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func resetToDefaultLayout()
  @_Concurrency.MainActor(unsafe) public static let overlayCropBoxFramePlaceholder: CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) public func matchScrollViewAndCropView(animated: Swift.Bool = false, targetCropBoxFrame: CoreFoundation.CGRect = overlayCropBoxFramePlaceholder, extraZoomScale: CoreFoundation.CGFloat = 1.0, blurLayerAnimated: Swift.Bool = false, animations: (() -> Swift.Void)? = nil, completion: (() -> Swift.Void)? = nil)
}
extension FlyUIKit.CropperViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in _: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginZooming(_: UIKit.UIScrollView, with _: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_: UIKit.UIScrollView, with _: UIKit.UIView?, atScale _: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_: UIKit.UIScrollView)
}
extension FlyUIKit.CropperViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension FlyUIKit.CropperViewController : FlyUIKit.AspectRatioSettable {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIGroupOptionInfoCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFGroupInfoTheme
  @objc @_Concurrency.MainActor(unsafe) public var VstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var HstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configGroupOptionInfoUpdateCell(isExistMember: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIGroupOptionViewMediaInfoCell : FlyUIKit.MFUITableViewCell {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFGroupInfoTheme
  @objc @_Concurrency.MainActor(unsafe) public var VstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var HstackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configGroupOptionInfoUpdateCell(isExistMember: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ObjectiveC.NSObject {
  @objc public static var mfui_className: Swift.String {
    @objc get
  }
  @objc dynamic public var mfui_className: Swift.String {
    @objc get
  }
}
public struct LanguagesSupported : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Datas : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LanguageSelection : Swift.Codable {
  public var language: Swift.String?
  public var name: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Root : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FlyData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Translations : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol TranslationManagerDelegate : ObjectiveC.NSObjectProtocol {
  func updateTranslateMessage(jid: Swift.String, messageId: Swift.String, translatedText: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class TranslationManager : ObjectiveC.NSObject {
  public var delegate: (any FlyUIKit.TranslationManagerDelegate)?
  public static let shared: FlyUIKit.TranslationManager
  public func supportedTranslationLanguages(targetLanguageCode: Swift.String, gooogleAPIKey: Swift.String, complete: @escaping (_ languageList: [FlyUIKit.LanguageSelection], _ success: Swift.Bool, _ error: Swift.String) -> ())
  public func languageTransalation(jid: Swift.String, messageId: Swift.String, QueryString: Swift.String, targetLanguageCode: Swift.String, googleAPIKey: Swift.String, complete: @escaping (_ translatedText: Swift.String, _ success: Swift.Bool, _ error: Swift.String) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AspectRatioPicker : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IPImage : ObjectiveC.NSObject {
  public var text: Swift.String
  public var radius: Swift.Double {
    get
    set
  }
  public var font: UIKit.UIFont?
  public var textColor: UIKit.UIColor?
  public var backgroundColor: UIKit.UIColor?
  @objc convenience override dynamic public init()
  convenience public init(text: Swift.String, radius: Swift.Double)
  convenience public init(text: Swift.String, radius: Swift.Double, font: UIKit.UIFont?)
  public init(text: Swift.String, radius: Swift.Double, font: UIKit.UIFont?, textColor: UIKit.UIColor?, randomBackgroundColor: Swift.Bool)
  public init(text: Swift.String, radius: Swift.Double, font: UIKit.UIFont?, textColor: UIKit.UIColor?, color: UIKit.UIColor)
  public init(text: Swift.String, radius: Swift.Double, font: UIKit.UIFont?, textColor: UIKit.UIColor?, backgroundColor: UIKit.UIColor?)
  public func initials() -> Swift.String
  public func generateImage() -> UIKit.UIImage?
  public func generateInitialImage() -> UIKit.UIImage?
  public func generateInitialSqareImage() -> UIKit.UIImage?
  @objc deinit
}
public class MFUIParticipantModule {
  public var headerComponent: FlyUIKit.MFUIParticipantModule.Header? {
    get
    set
  }
  public var listComponent: FlyUIKit.MFUIParticipantModule.List? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUIParticipantModule.Header? = nil, listComponent: FlyUIKit.MFUIParticipantModule.List? = nil)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUILanguageViewController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFLanguageTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUILanguageModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUILanguageModule.List?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc deinit
}
extension FlyUIKit.MFUILanguageViewController : FlyUIKit.MFUILanguageModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func languageModule(_ listComponent: FlyUIKit.MFUILanguageModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func languageModule(_ listComponent: FlyUIKit.MFUILanguageModule.List, _ tap: UIKit.UITapGestureRecognizer, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUILanguageViewController : FlyUIKit.MFUILanguageModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func languageModule(_ headerComponent: FlyUIKit.MFUILanguageModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func languageModule(_ headerComponent: FlyUIKit.MFUILanguageModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func languageModule(_ headerComponent: FlyUIKit.MFUILanguageModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MFUIUserNameView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var usernameColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(username: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateStyles()
  @objc deinit
}
extension FlyUIKit.MFUICallScreenModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class MuteView : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFCallScreenTheme?
    @objc @_Concurrency.MainActor(unsafe) public var muteTextLabel: UIKit.UILabel {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var muteImageView: UIKit.UIImageView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) open func configure(theme: FlyUIKit.MFCallScreenTheme, user: FlyUIKit.CallMember)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFCallScreenTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public protocol MFUILanguageModuleHeaderDelegate : FlyUIKit.MFUICommonDelegate {
  func languageModule(_ headerComponent: FlyUIKit.MFUILanguageModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func languageModule(_ headerComponent: FlyUIKit.MFUILanguageModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func languageModule(_ headerComponent: FlyUIKit.MFUILanguageModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension FlyUIKit.MFUILanguageModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUILanguageModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFLanguageTheme?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUILanguageModuleHeaderDelegate, theme: FlyUIKit.MFLanguageTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFLanguageTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
  }
}
public protocol MFUIULoaderIndicatorProtocol {
  func showLoading(_ isLoading: Swift.Bool, isContact: Swift.Bool)
}
public class MFUILocationModule {
  public var headerComponent: FlyUIKit.MFUILocationModule.Header? {
    get
    set
  }
  public var mapViewComponent: FlyUIKit.MFUILocationModule.Mapview? {
    get
    set
  }
  public init(headerComponent: FlyUIKit.MFUILocationModule.Header? = nil, mapViewComponent: FlyUIKit.MFUILocationModule.Mapview? = nil)
  @objc deinit
}
public protocol MFUISettingsModuleListDelegate : FlyUIKit.MFUICommonDelegate {
  func settingModule(_ listComponent: FlyUIKit.MFUISettingsModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension FlyUIKit.MFUISettingsModule {
  @_inheritsConvenienceInitializers @objc(MFUISettingsModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var settingCell: FlyUIKit.MFSettingsTableCell?
    @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFSettingsTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any FlyUIKit.MFUISettingsModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any FlyUIKit.MFUISettingsModuleListDelegate, theme: FlyUIKit.MFSettingsTheme, settingsArr: [FlyUIKit.settingsModel])
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: FlyUIKit.MFSettingsTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(chatCell: FlyUIKit.MFSettingsTableCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ settingCell: FlyUIKit.MFSettingsTableCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  }
}
extension FlyUIKit.MFUISettingsModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
public protocol AspectRatioSettable {
  func setAspectRatio(_ aspectRatio: FlyUIKit.AspectRatio)
  func setAspectRatioValue(_ aspectRatioValue: CoreFoundation.CGFloat)
}
extension FlyUIKit.AspectRatioSettable where Self : FlyUIKit.CropperViewController {
  public func setAspectRatio(_ aspectRatio: FlyUIKit.AspectRatio)
  public func setAspectRatioValue(_ aspectRatioValue: CoreFoundation.CGFloat)
}
@objc @_Concurrency.MainActor(unsafe) open class MFUITranslateViewController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFTranslateTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUITranslateModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUITranslateModule.List?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc deinit
}
extension FlyUIKit.MFUITranslateViewController : FlyUIKit.MFUITranslateModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func translateModule(_ listComponent: FlyUIKit.MFUITranslateModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func translateModule(_ listComponent: FlyUIKit.MFUITranslateModule.List, _ tap: UIKit.UITapGestureRecognizer, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUITranslateViewController : FlyUIKit.MFUITranslateModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func translateModule(_ headerComponent: FlyUIKit.MFUITranslateModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func translateModule(_ headerComponent: FlyUIKit.MFUITranslateModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func translateModule(_ headerComponent: FlyUIKit.MFUITranslateModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
open class MFUIMessageStateViewParams {
  final public let timestamp: Swift.Double
  final public let sendingState: MirrorFlySDK.MessageStatus
  final public let receiptState: FlyUIKit.MFUIMessageReceiptState
  final public let position: FlyUIKit.MessagePosition
  final public let isReplyMessage: Swift.Bool
  final public let message: MirrorFlySDK.ChatMessage
  public init(timestamp: Swift.Double, sendingState: MirrorFlySDK.MessageStatus, receiptState: FlyUIKit.MFUIMessageReceiptState, position: FlyUIKit.MessagePosition, isReplyMessage: Swift.Bool = false, message: MirrorFlySDK.ChatMessage)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUIMessageStateView : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var stackView: FlyUIKit.MFUIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var stateImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var timeLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var docSizeLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var timeFormat: Swift.String
  @_Concurrency.MainActor(unsafe) public var timeLabelCustomSize: CoreFoundation.CGSize?
  @_Concurrency.MainActor(unsafe) public init(sendingState: MirrorFlySDK.MessageStatus, receiptState: FlyUIKit.MFUIMessageReceiptState, isReplyMessage: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public init(isReplyMessage: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: FlyUIKit.MFUIMessageStateViewParams)
  @_Concurrency.MainActor(unsafe) open func configure(timestamp: Swift.Double, sendingState: MirrorFlySDK.MessageStatus, receiptState: FlyUIKit.MFUIMessageReceiptState?, position: FlyUIKit.MessagePosition, message: MirrorFlySDK.ChatMessage)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MFUISegmentControl : FlyUIKit.MFUIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MFUIForwardCell : FlyUIKit.MFUITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var iconView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var icon: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var imageIcon: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var imageIconView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var contactNameLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var statusLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var checkBoxImage: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var profileDetails: MirrorFlySDK.ProfileDetails?
  @objc @_Concurrency.MainActor(unsafe) public var separtorOuterView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var separatorView: UIKit.UIView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MFUIForwardViewController : FlyUIKit.MFBaseViewController {
  @_Concurrency.MainActor(unsafe) public var theme: FlyUIKit.MFForwardTheme
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: FlyUIKit.MFUIForwardModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listViewcomponent: FlyUIKit.MFUIForwardModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var segmentControl: FlyUIKit.MFUISegmentControl
  @objc @_Concurrency.MainActor(unsafe) public var currenItem: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var searchbarView: FlyUIKit.MFUISearchBarView
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: FlyUIKit.MFUIForwardViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var selectedMessageId: [Swift.String]
  @objc @_Concurrency.MainActor(unsafe) public var profileDetails: MirrorFlySDK.ProfileDetails?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
}
extension FlyUIKit.MFUIForwardViewController : FlyUIKit.MFUIForwardModuleListDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardModule(_ listComponent: FlyUIKit.MFUIForwardModule.List, selectedList: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardModule(_ listComponent: FlyUIKit.MFUIForwardModule.List, willDisplay indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardModule(_ listComponent: FlyUIKit.MFUIForwardModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardModule(_ listComponent: FlyUIKit.MFUIForwardModule.List, _ tap: UIKit.UITapGestureRecognizer, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didReceiveError(_ error: Swift.String?, isBlocker: Swift.Bool)
}
extension FlyUIKit.MFUIForwardViewController : FlyUIKit.MFUIForwardModuleHeaderDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardModule(_ headerComponent: FlyUIKit.MFUIForwardModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
}
extension FlyUIKit.MFUIForwardViewController : FlyUIKit.MFUISearchBarDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func passChangeTextString(searchbar: UIKit.UISearchBar, text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didClickCancelSearch()
}
extension FlyUIKit.MFUIForwardViewController : FlyUIKit.MFUIForwardViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardViewModel(_ viewModel: FlyUIKit.MFUIForwardViewModel, didChangeUsers contact: [MirrorFlySDK.ProfileDetails], needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardViewModel(_ viewModel: FlyUIKit.MFUIForwardViewModel, didUpdateSelectedContacts selectedContacts: [MirrorFlySDK.ProfileDetails])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardViewModel(_ viewModel: FlyUIKit.MFUIForwardViewModel, didChangeRecent contact: [MirrorFlySDK.RecentChat], needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func forwardViewModel(_ viewModel: FlyUIKit.MFUIForwardViewModel, didChangeGroups contact: [MirrorFlySDK.RecentChat], needsToReload: Swift.Bool)
}
extension FlyUIKit.MFUIForwardViewController : MirrorFlySDK.ProfileEventsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userCameOnline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userWentOffline(for jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userProfileFetched(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func myProfileUpdated()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersProfilesFetched()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func unblockedThisUser(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersIBlockedListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func usersBlockedMeListFetched(jidList: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUpdatedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userUnBlockedMe(jid: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func hideUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getUserLastSeen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userDeletedTheirProfile(for jid: Swift.String, profileDetails: MirrorFlySDK.ProfileDetails)
}
extension FlyUIKit.MFUIForwardViewController : MirrorFlySDK.ConnectionEventDelegate {
  @_Concurrency.MainActor(unsafe) public func onConnectionFailed(error: MirrorFlySDK.FlyError)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onReconnecting()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onDisconnected()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onConnectionNotAuthorized()
}
extension FlyUIKit.MFUIFloatyItemLabelPositionType : Swift.Equatable {}
extension FlyUIKit.MFUIFloatyItemLabelPositionType : Swift.Hashable {}
extension FlyUIKit.MFUIFloatyItemLabelPositionType : Swift.RawRepresentable {}
extension FlyUIKit.MFUIMessageInputMode : Swift.Equatable {}
extension FlyUIKit.MFUIMessageInputMode : Swift.Hashable {}
extension FlyUIKit.MFUIMessageInputMode : Swift.RawRepresentable {}
extension Foundation.Date.MFUIDateFormat : Swift.Equatable {}
extension Foundation.Date.MFUIDateFormat : Swift.Hashable {}
extension Foundation.Date.MFUIDateFormat : Swift.RawRepresentable {}
extension FlyUIKit.MFUIPhotoAccessLevel : Swift.RawRepresentable {}
extension FlyUIKit.MFUIPhotoAccessibleStatus : Swift.RawRepresentable {}
extension FlyUIKit.LogType : Swift.Equatable {}
extension FlyUIKit.LogType : Swift.Hashable {}
extension FlyUIKit.LogType : Swift.RawRepresentable {}
extension FlyUIKit.MFUIRepyMessageInputView.Edge : Swift.Equatable {}
extension FlyUIKit.MFUIRepyMessageInputView.Edge : Swift.Hashable {}
extension FlyUIKit.MFUIRepyMessageInputView.Edge : Swift.RawRepresentable {}
extension FlyUIKit.MFUIForwardType : Swift.Equatable {}
extension FlyUIKit.MFUIForwardType : Swift.Hashable {}
extension FlyUIKit.MFUIForwardType : Swift.RawRepresentable {}
extension FlyUIKit.MFUIFloatyOpenAnimationType : Swift.Equatable {}
extension FlyUIKit.MFUIFloatyOpenAnimationType : Swift.Hashable {}
extension FlyUIKit.MFUIFloatyOpenAnimationType : Swift.RawRepresentable {}
extension FlyUIKit.MFUIFloatyVerticalDirection : Swift.Equatable {}
extension FlyUIKit.MFUIFloatyVerticalDirection : Swift.Hashable {}
extension FlyUIKit.MFUIFloatyVerticalDirection : Swift.RawRepresentable {}
extension FlyUIKit.ProfileAttributeType : Swift.Equatable {}
extension FlyUIKit.ProfileAttributeType : Swift.Hashable {}
extension FlyUIKit.ProfileAttributeType : Swift.RawRepresentable {}
extension FlyUIKit.ChatCreationType : Swift.Equatable {}
extension FlyUIKit.ChatCreationType : Swift.Hashable {}
extension FlyUIKit.ChatCreationType : Swift.RawRepresentable {}
extension FlyUIKit.MediaResourceType : Swift.Equatable {}
extension FlyUIKit.MediaResourceType : Swift.Hashable {}
extension FlyUIKit.MediaResourceType : Swift.RawRepresentable {}
extension FlyUIKit.NewMessageInfoItemType : Swift.Equatable {}
extension FlyUIKit.NewMessageInfoItemType : Swift.Hashable {}
extension FlyUIKit.NewMessageInfoItemType : Swift.RawRepresentable {}
extension FlyUIKit.MessagePosition : Swift.Equatable {}
extension FlyUIKit.MessagePosition : Swift.Hashable {}
extension FlyUIKit.MessagePosition : Swift.RawRepresentable {}
extension FlyUIKit.MessageGroupPosition : Swift.Equatable {}
extension FlyUIKit.MessageGroupPosition : Swift.Hashable {}
extension FlyUIKit.MessageGroupPosition : Swift.RawRepresentable {}
extension FlyUIKit.MFUIMessageReceiptState : Swift.Equatable {}
extension FlyUIKit.MFUIMessageReceiptState : Swift.Hashable {}
extension FlyUIKit.MFUIMessageReceiptState : Swift.RawRepresentable {}
extension FlyUIKit.EmptyViewType : Swift.Equatable {}
extension FlyUIKit.EmptyViewType : Swift.Hashable {}
extension FlyUIKit.EmptyViewType : Swift.RawRepresentable {}
extension FlyUIKit.CallMode : Swift.Equatable {}
extension FlyUIKit.CallMode : Swift.Hashable {}
extension FlyUIKit.CallMode : Swift.RawRepresentable {}
extension FlyUIKit.CallType : Swift.Equatable {}
extension FlyUIKit.CallType : Swift.Hashable {}
extension FlyUIKit.CallType : Swift.RawRepresentable {}
extension FlyUIKit.DeleteAction : Swift.Equatable {}
extension FlyUIKit.DeleteAction : Swift.Hashable {}
extension FlyUIKit.DeleteAction : Swift.RawRepresentable {}
extension FlyUIKit.CallStatus : Swift.Equatable {}
extension FlyUIKit.CallStatus : Swift.Hashable {}
extension FlyUIKit.CallStatus : Swift.RawRepresentable {}
extension FlyUIKit.MessageMenuItem : Swift.Equatable {}
extension FlyUIKit.MessageMenuItem : Swift.Hashable {}
extension FlyUIKit.MessageMenuItem : Swift.RawRepresentable {}
extension FlyUIKit.ProgressType : Swift.Equatable {}
extension FlyUIKit.ProgressType : Swift.Hashable {}
extension FlyUIKit.ProgressType : Swift.RawRepresentable {}
extension FlyUIKit.ChatActions : Swift.Equatable {}
extension FlyUIKit.ChatActions : Swift.Hashable {}
extension FlyUIKit.ChatActions : Swift.RawRepresentable {}
extension FlyUIKit.Settings.Theme.SelectionStyle : Swift.Equatable {}
extension FlyUIKit.Settings.Theme.SelectionStyle : Swift.Hashable {}
extension FlyUIKit.Settings.Fetch.Assets.MediaTypes : Swift.Equatable {}
extension FlyUIKit.Settings.Fetch.Assets.MediaTypes : Swift.Hashable {}
